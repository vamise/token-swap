{"ast":null,"code":"import * as BufferLayout from 'buffer-layout';\n/**\n * Layout for a public key\n */\n\nexport var publicKey = function publicKey(property) {\n  if (property === void 0) {\n    property = 'publicKey';\n  }\n\n  return BufferLayout.blob(32, property);\n};\n/**\n * Layout for a 64bit unsigned value\n */\n\nexport var uint64 = function uint64(property) {\n  if (property === void 0) {\n    property = 'uint64';\n  }\n\n  return BufferLayout.blob(8, property);\n};\n/**\n * Layout for a Rust String type\n */\n\nexport var rustString = function rustString(property) {\n  if (property === void 0) {\n    property = 'string';\n  }\n\n  var rsl = BufferLayout.struct([BufferLayout.u32('length'), BufferLayout.u32('lengthPadding'), BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars')], property);\n\n  var _decode = rsl.decode.bind(rsl);\n\n  var _encode = rsl.encode.bind(rsl);\n\n  rsl.decode = function (buffer, offset) {\n    var data = _decode(buffer, offset);\n\n    return data.chars.toString('utf8');\n  };\n\n  rsl.encode = function (str, buffer, offset) {\n    var data = {\n      chars: Buffer.from(str, 'utf8')\n    };\n    return _encode(data, buffer, offset);\n  };\n\n  return rsl;\n};","map":{"version":3,"sources":["/Users/mikovainio/FyFy/token-swap/node_modules/@solana/spl-token-swap/dist.browser/layout.js"],"names":["BufferLayout","publicKey","property","blob","uint64","rustString","rsl","struct","u32","offset","_decode","decode","bind","_encode","encode","buffer","data","chars","toString","str","Buffer","from"],"mappings":"AAAA,OAAO,KAAKA,YAAZ,MAA8B,eAA9B;AACA;AACA;AACA;;AACA,OAAO,IAAIC,SAAS,GAAG,SAAZA,SAAY,CAAUC,QAAV,EAAoB;AACvC,MAAIA,QAAQ,KAAK,KAAK,CAAtB,EAAyB;AAAEA,IAAAA,QAAQ,GAAG,WAAX;AAAyB;;AACpD,SAAOF,YAAY,CAACG,IAAb,CAAkB,EAAlB,EAAsBD,QAAtB,CAAP;AACH,CAHM;AAIP;AACA;AACA;;AACA,OAAO,IAAIE,MAAM,GAAG,SAATA,MAAS,CAAUF,QAAV,EAAoB;AACpC,MAAIA,QAAQ,KAAK,KAAK,CAAtB,EAAyB;AAAEA,IAAAA,QAAQ,GAAG,QAAX;AAAsB;;AACjD,SAAOF,YAAY,CAACG,IAAb,CAAkB,CAAlB,EAAqBD,QAArB,CAAP;AACH,CAHM;AAIP;AACA;AACA;;AACA,OAAO,IAAIG,UAAU,GAAG,SAAbA,UAAa,CAAUH,QAAV,EAAoB;AACxC,MAAIA,QAAQ,KAAK,KAAK,CAAtB,EAAyB;AAAEA,IAAAA,QAAQ,GAAG,QAAX;AAAsB;;AACjD,MAAII,GAAG,GAAGN,YAAY,CAACO,MAAb,CAAoB,CAC1BP,YAAY,CAACQ,GAAb,CAAiB,QAAjB,CAD0B,EAE1BR,YAAY,CAACQ,GAAb,CAAiB,eAAjB,CAF0B,EAG1BR,YAAY,CAACG,IAAb,CAAkBH,YAAY,CAACS,MAAb,CAAoBT,YAAY,CAACQ,GAAb,EAApB,EAAwC,CAAC,CAAzC,CAAlB,EAA+D,OAA/D,CAH0B,CAApB,EAIPN,QAJO,CAAV;;AAKA,MAAIQ,OAAO,GAAGJ,GAAG,CAACK,MAAJ,CAAWC,IAAX,CAAgBN,GAAhB,CAAd;;AACA,MAAIO,OAAO,GAAGP,GAAG,CAACQ,MAAJ,CAAWF,IAAX,CAAgBN,GAAhB,CAAd;;AACAA,EAAAA,GAAG,CAACK,MAAJ,GAAa,UAAUI,MAAV,EAAkBN,MAAlB,EAA0B;AACnC,QAAIO,IAAI,GAAGN,OAAO,CAACK,MAAD,EAASN,MAAT,CAAlB;;AACA,WAAOO,IAAI,CAACC,KAAL,CAAWC,QAAX,CAAoB,MAApB,CAAP;AACH,GAHD;;AAIAZ,EAAAA,GAAG,CAACQ,MAAJ,GAAa,UAAUK,GAAV,EAAeJ,MAAf,EAAuBN,MAAvB,EAA+B;AACxC,QAAIO,IAAI,GAAG;AACPC,MAAAA,KAAK,EAAEG,MAAM,CAACC,IAAP,CAAYF,GAAZ,EAAiB,MAAjB;AADA,KAAX;AAGA,WAAON,OAAO,CAACG,IAAD,EAAOD,MAAP,EAAeN,MAAf,CAAd;AACH,GALD;;AAMA,SAAOH,GAAP;AACH,CApBM","sourcesContent":["import * as BufferLayout from 'buffer-layout';\n/**\n * Layout for a public key\n */\nexport var publicKey = function (property) {\n    if (property === void 0) { property = 'publicKey'; }\n    return BufferLayout.blob(32, property);\n};\n/**\n * Layout for a 64bit unsigned value\n */\nexport var uint64 = function (property) {\n    if (property === void 0) { property = 'uint64'; }\n    return BufferLayout.blob(8, property);\n};\n/**\n * Layout for a Rust String type\n */\nexport var rustString = function (property) {\n    if (property === void 0) { property = 'string'; }\n    var rsl = BufferLayout.struct([\n        BufferLayout.u32('length'),\n        BufferLayout.u32('lengthPadding'),\n        BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ], property);\n    var _decode = rsl.decode.bind(rsl);\n    var _encode = rsl.encode.bind(rsl);\n    rsl.decode = function (buffer, offset) {\n        var data = _decode(buffer, offset);\n        return data.chars.toString('utf8');\n    };\n    rsl.encode = function (str, buffer, offset) {\n        var data = {\n            chars: Buffer.from(str, 'utf8'),\n        };\n        return _encode(data, buffer, offset);\n    };\n    return rsl;\n};\n"]},"metadata":{},"sourceType":"module"}