{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) {\n    to[j] = from[i];\n  }\n\n  return to;\n};\n\nimport assert from 'assert';\nimport BN from 'bn.js';\nimport { Buffer } from 'buffer';\nimport * as BufferLayout from 'buffer-layout';\nimport { PublicKey, SystemProgram, Transaction, TransactionInstruction } from '@solana/web3.js';\nimport * as Layout from './layout';\nimport { sendAndConfirmTransaction } from './util/send-and-confirm-transaction';\nimport { loadAccount } from './util/account';\nexport var TOKEN_SWAP_PROGRAM_ID = new PublicKey('SwaPpA9LAaLfeLi3a68M4DjnLqgtticKg6CnyNwgAC8');\n/**\n * Some amount of tokens\n */\n\nvar Numberu64 =\n/** @class */\nfunction (_super) {\n  __extends(Numberu64, _super);\n\n  function Numberu64() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Convert to Buffer representation\n   */\n\n\n  Numberu64.prototype.toBuffer = function () {\n    var a = _super.prototype.toArray.call(this).reverse();\n\n    var b = Buffer.from(a);\n\n    if (b.length === 8) {\n      return b;\n    }\n\n    assert(b.length < 8, 'Numberu64 too large');\n    var zeroPad = Buffer.alloc(8);\n    b.copy(zeroPad);\n    return zeroPad;\n  };\n  /**\n   * Construct a Numberu64 from Buffer representation\n   */\n\n\n  Numberu64.fromBuffer = function (buffer) {\n    assert(buffer.length === 8, \"Invalid buffer length: \" + buffer.length);\n    return new Numberu64(__spreadArray([], __read(buffer)).reverse().map(function (i) {\n      return (\"00\" + i.toString(16)).slice(-2);\n    }).join(''), 16);\n  };\n\n  return Numberu64;\n}(BN);\n\nexport { Numberu64 };\nexport var TokenSwapLayout = BufferLayout.struct([BufferLayout.u8('version'), BufferLayout.u8('isInitialized'), BufferLayout.u8('nonce'), Layout.publicKey('tokenProgramId'), Layout.publicKey('tokenAccountA'), Layout.publicKey('tokenAccountB'), Layout.publicKey('tokenPool'), Layout.publicKey('mintA'), Layout.publicKey('mintB'), Layout.publicKey('feeAccount'), Layout.uint64('tradeFeeNumerator'), Layout.uint64('tradeFeeDenominator'), Layout.uint64('ownerTradeFeeNumerator'), Layout.uint64('ownerTradeFeeDenominator'), Layout.uint64('ownerWithdrawFeeNumerator'), Layout.uint64('ownerWithdrawFeeDenominator'), Layout.uint64('hostFeeNumerator'), Layout.uint64('hostFeeDenominator'), BufferLayout.u8('curveType'), BufferLayout.blob(32, 'curveParameters')]);\nexport var CurveType = Object.freeze({\n  ConstantProduct: 0,\n  ConstantPrice: 1,\n  Offset: 3 // Offset curve, like Uniswap, but with an additional offset on the token B side\n\n});\n/**\n * A program to exchange tokens against a pool of liquidity\n */\n\nvar TokenSwap =\n/** @class */\nfunction () {\n  /**\n   * Create a Token object attached to the specific token\n   *\n   * @param connection The connection to use\n   * @param tokenSwap The token swap account\n   * @param swapProgramId The program ID of the token-swap program\n   * @param tokenProgramId The program ID of the token program\n   * @param poolToken The pool token\n   * @param authority The authority over the swap and accounts\n   * @param tokenAccountA The token swap's Token A account\n   * @param tokenAccountB The token swap's Token B account\n   * @param mintA The mint of Token A\n   * @param mintB The mint of Token B\n   * @param tradeFeeNumerator The trade fee numerator\n   * @param tradeFeeDenominator The trade fee denominator\n   * @param ownerTradeFeeNumerator The owner trade fee numerator\n   * @param ownerTradeFeeDenominator The owner trade fee denominator\n   * @param ownerWithdrawFeeNumerator The owner withdraw fee numerator\n   * @param ownerWithdrawFeeDenominator The owner withdraw fee denominator\n   * @param hostFeeNumerator The host fee numerator\n   * @param hostFeeDenominator The host fee denominator\n   * @param curveType The curve type\n   * @param payer Pays for the transaction\n   */\n  function TokenSwap(connection, tokenSwap, swapProgramId, tokenProgramId, poolToken, feeAccount, authority, tokenAccountA, tokenAccountB, mintA, mintB, tradeFeeNumerator, tradeFeeDenominator, ownerTradeFeeNumerator, ownerTradeFeeDenominator, ownerWithdrawFeeNumerator, ownerWithdrawFeeDenominator, hostFeeNumerator, hostFeeDenominator, curveType, payer) {\n    this.connection = connection;\n    this.tokenSwap = tokenSwap;\n    this.swapProgramId = swapProgramId;\n    this.tokenProgramId = tokenProgramId;\n    this.poolToken = poolToken;\n    this.feeAccount = feeAccount;\n    this.authority = authority;\n    this.tokenAccountA = tokenAccountA;\n    this.tokenAccountB = tokenAccountB;\n    this.mintA = mintA;\n    this.mintB = mintB;\n    this.tradeFeeNumerator = tradeFeeNumerator;\n    this.tradeFeeDenominator = tradeFeeDenominator;\n    this.ownerTradeFeeNumerator = ownerTradeFeeNumerator;\n    this.ownerTradeFeeDenominator = ownerTradeFeeDenominator;\n    this.ownerWithdrawFeeNumerator = ownerWithdrawFeeNumerator;\n    this.ownerWithdrawFeeDenominator = ownerWithdrawFeeDenominator;\n    this.hostFeeNumerator = hostFeeNumerator;\n    this.hostFeeDenominator = hostFeeDenominator;\n    this.curveType = curveType;\n    this.payer = payer;\n    this.connection = connection;\n    this.tokenSwap = tokenSwap;\n    this.swapProgramId = swapProgramId;\n    this.tokenProgramId = tokenProgramId;\n    this.poolToken = poolToken;\n    this.feeAccount = feeAccount;\n    this.authority = authority;\n    this.tokenAccountA = tokenAccountA;\n    this.tokenAccountB = tokenAccountB;\n    this.mintA = mintA;\n    this.mintB = mintB;\n    this.tradeFeeNumerator = tradeFeeNumerator;\n    this.tradeFeeDenominator = tradeFeeDenominator;\n    this.ownerTradeFeeNumerator = ownerTradeFeeNumerator;\n    this.ownerTradeFeeDenominator = ownerTradeFeeDenominator;\n    this.ownerWithdrawFeeNumerator = ownerWithdrawFeeNumerator;\n    this.ownerWithdrawFeeDenominator = ownerWithdrawFeeDenominator;\n    this.hostFeeNumerator = hostFeeNumerator;\n    this.hostFeeDenominator = hostFeeDenominator;\n    this.curveType = curveType;\n    this.payer = payer;\n  }\n  /**\n   * Get the minimum balance for the token swap account to be rent exempt\n   *\n   * @return Number of lamports required\n   */\n\n\n  TokenSwap.getMinBalanceRentForExemptTokenSwap = function (connection) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , connection.getMinimumBalanceForRentExemption(TokenSwapLayout.span)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n\n  TokenSwap.createInitSwapInstruction = function (tokenSwapAccount, authority, tokenAccountA, tokenAccountB, tokenPool, feeAccount, tokenAccountPool, tokenProgramId, swapProgramId, nonce, tradeFeeNumerator, tradeFeeDenominator, ownerTradeFeeNumerator, ownerTradeFeeDenominator, ownerWithdrawFeeNumerator, ownerWithdrawFeeDenominator, hostFeeNumerator, hostFeeDenominator, curveType) {\n    var keys = [{\n      pubkey: tokenSwapAccount.publicKey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authority,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: tokenAccountA,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: tokenAccountB,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: tokenPool,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: feeAccount,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: tokenAccountPool,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: tokenProgramId,\n      isSigner: false,\n      isWritable: false\n    }];\n    var commandDataLayout = BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u8('nonce'), BufferLayout.nu64('tradeFeeNumerator'), BufferLayout.nu64('tradeFeeDenominator'), BufferLayout.nu64('ownerTradeFeeNumerator'), BufferLayout.nu64('ownerTradeFeeDenominator'), BufferLayout.nu64('ownerWithdrawFeeNumerator'), BufferLayout.nu64('ownerWithdrawFeeDenominator'), BufferLayout.nu64('hostFeeNumerator'), BufferLayout.nu64('hostFeeDenominator'), BufferLayout.u8('curveType'), BufferLayout.blob(32, 'curveParameters')]);\n    var data = Buffer.alloc(1024);\n    {\n      var encodeLength = commandDataLayout.encode({\n        instruction: 0,\n        nonce: nonce,\n        tradeFeeNumerator: tradeFeeNumerator,\n        tradeFeeDenominator: tradeFeeDenominator,\n        ownerTradeFeeNumerator: ownerTradeFeeNumerator,\n        ownerTradeFeeDenominator: ownerTradeFeeDenominator,\n        ownerWithdrawFeeNumerator: ownerWithdrawFeeNumerator,\n        ownerWithdrawFeeDenominator: ownerWithdrawFeeDenominator,\n        hostFeeNumerator: hostFeeNumerator,\n        hostFeeDenominator: hostFeeDenominator,\n        curveType: curveType\n      }, data);\n      data = data.slice(0, encodeLength);\n    }\n    return new TransactionInstruction({\n      keys: keys,\n      programId: swapProgramId,\n      data: data\n    });\n  };\n\n  TokenSwap.loadTokenSwap = function (connection, address, programId, payer) {\n    return __awaiter(this, void 0, void 0, function () {\n      var data, tokenSwapData, _a, authority, poolToken, feeAccount, tokenAccountA, tokenAccountB, mintA, mintB, tokenProgramId, tradeFeeNumerator, tradeFeeDenominator, ownerTradeFeeNumerator, ownerTradeFeeDenominator, ownerWithdrawFeeNumerator, ownerWithdrawFeeDenominator, hostFeeNumerator, hostFeeDenominator, curveType;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , loadAccount(connection, address, programId)];\n\n          case 1:\n            data = _b.sent();\n            tokenSwapData = TokenSwapLayout.decode(data);\n\n            if (!tokenSwapData.isInitialized) {\n              throw new Error(\"Invalid token swap state\");\n            }\n\n            return [4\n            /*yield*/\n            , PublicKey.findProgramAddress([address.toBuffer()], programId)];\n\n          case 2:\n            _a = __read.apply(void 0, [_b.sent(), 1]), authority = _a[0];\n            poolToken = new PublicKey(tokenSwapData.tokenPool);\n            feeAccount = new PublicKey(tokenSwapData.feeAccount);\n            tokenAccountA = new PublicKey(tokenSwapData.tokenAccountA);\n            tokenAccountB = new PublicKey(tokenSwapData.tokenAccountB);\n            mintA = new PublicKey(tokenSwapData.mintA);\n            mintB = new PublicKey(tokenSwapData.mintB);\n            tokenProgramId = new PublicKey(tokenSwapData.tokenProgramId);\n            tradeFeeNumerator = Numberu64.fromBuffer(tokenSwapData.tradeFeeNumerator);\n            tradeFeeDenominator = Numberu64.fromBuffer(tokenSwapData.tradeFeeDenominator);\n            ownerTradeFeeNumerator = Numberu64.fromBuffer(tokenSwapData.ownerTradeFeeNumerator);\n            ownerTradeFeeDenominator = Numberu64.fromBuffer(tokenSwapData.ownerTradeFeeDenominator);\n            ownerWithdrawFeeNumerator = Numberu64.fromBuffer(tokenSwapData.ownerWithdrawFeeNumerator);\n            ownerWithdrawFeeDenominator = Numberu64.fromBuffer(tokenSwapData.ownerWithdrawFeeDenominator);\n            hostFeeNumerator = Numberu64.fromBuffer(tokenSwapData.hostFeeNumerator);\n            hostFeeDenominator = Numberu64.fromBuffer(tokenSwapData.hostFeeDenominator);\n            curveType = tokenSwapData.curveType;\n            return [2\n            /*return*/\n            , new TokenSwap(connection, address, programId, tokenProgramId, poolToken, feeAccount, authority, tokenAccountA, tokenAccountB, mintA, mintB, tradeFeeNumerator, tradeFeeDenominator, ownerTradeFeeNumerator, ownerTradeFeeDenominator, ownerWithdrawFeeNumerator, ownerWithdrawFeeDenominator, hostFeeNumerator, hostFeeDenominator, curveType, payer)];\n        }\n      });\n    });\n  };\n  /**\n   * Create a new Token Swap\n   *\n   * @param connection The connection to use\n   * @param payer Pays for the transaction\n   * @param tokenSwapAccount The token swap account\n   * @param authority The authority over the swap and accounts\n   * @param nonce The nonce used to generate the authority\n   * @param tokenAccountA: The token swap's Token A account\n   * @param tokenAccountB: The token swap's Token B account\n   * @param poolToken The pool token\n   * @param tokenAccountPool The token swap's pool token account\n   * @param tokenProgramId The program ID of the token program\n   * @param swapProgramId The program ID of the token-swap program\n   * @param feeNumerator Numerator of the fee ratio\n   * @param feeDenominator Denominator of the fee ratio\n   * @return Token object for the newly minted token, Public key of the account holding the total supply of new tokens\n   */\n\n\n  TokenSwap.createTokenSwap = function (connection, payer, tokenSwapAccount, authority, tokenAccountA, tokenAccountB, poolToken, mintA, mintB, feeAccount, tokenAccountPool, swapProgramId, tokenProgramId, nonce, tradeFeeNumerator, tradeFeeDenominator, ownerTradeFeeNumerator, ownerTradeFeeDenominator, ownerWithdrawFeeNumerator, ownerWithdrawFeeDenominator, hostFeeNumerator, hostFeeDenominator, curveType) {\n    return __awaiter(this, void 0, void 0, function () {\n      var transaction, tokenSwap, balanceNeeded, instruction;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            tokenSwap = new TokenSwap(connection, tokenSwapAccount.publicKey, swapProgramId, tokenProgramId, poolToken, feeAccount, authority, tokenAccountA, tokenAccountB, mintA, mintB, new Numberu64(tradeFeeNumerator), new Numberu64(tradeFeeDenominator), new Numberu64(ownerTradeFeeNumerator), new Numberu64(ownerTradeFeeDenominator), new Numberu64(ownerWithdrawFeeNumerator), new Numberu64(ownerWithdrawFeeDenominator), new Numberu64(hostFeeNumerator), new Numberu64(hostFeeDenominator), curveType, payer);\n            return [4\n            /*yield*/\n            , TokenSwap.getMinBalanceRentForExemptTokenSwap(connection)];\n\n          case 1:\n            balanceNeeded = _a.sent();\n            transaction = new Transaction();\n            transaction.add(SystemProgram.createAccount({\n              fromPubkey: payer.publicKey,\n              newAccountPubkey: tokenSwapAccount.publicKey,\n              lamports: balanceNeeded,\n              space: TokenSwapLayout.span,\n              programId: swapProgramId\n            }));\n            instruction = TokenSwap.createInitSwapInstruction(tokenSwapAccount, authority, tokenAccountA, tokenAccountB, poolToken, feeAccount, tokenAccountPool, tokenProgramId, swapProgramId, nonce, tradeFeeNumerator, tradeFeeDenominator, ownerTradeFeeNumerator, ownerTradeFeeDenominator, ownerWithdrawFeeNumerator, ownerWithdrawFeeDenominator, hostFeeNumerator, hostFeeDenominator, curveType);\n            transaction.add(instruction);\n            return [4\n            /*yield*/\n            , sendAndConfirmTransaction('createAccount and InitializeSwap', connection, transaction, payer, tokenSwapAccount)];\n\n          case 2:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , tokenSwap];\n        }\n      });\n    });\n  };\n  /**\n   * Swap token A for token B\n   *\n   * @param userSource User's source token account\n   * @param poolSource Pool's source token account\n   * @param poolDestination Pool's destination token account\n   * @param userDestination User's destination token account\n   * @param hostFeeAccount Host account to gather fees\n   * @param userTransferAuthority Account delegated to transfer user's tokens\n   * @param amountIn Amount to transfer from source account\n   * @param minimumAmountOut Minimum amount of tokens the user will receive\n   */\n\n\n  TokenSwap.prototype.swap = function (userSource, poolSource, poolDestination, userDestination, hostFeeAccount, userTransferAuthority, amountIn, minimumAmountOut) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , sendAndConfirmTransaction('swap', this.connection, new Transaction().add(TokenSwap.swapInstruction(this.tokenSwap, this.authority, userTransferAuthority.publicKey, userSource, poolSource, poolDestination, userDestination, this.poolToken, this.feeAccount, hostFeeAccount, this.swapProgramId, this.tokenProgramId, amountIn, minimumAmountOut)), this.payer, userTransferAuthority)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n\n  TokenSwap.swapInstruction = function (tokenSwap, authority, userTransferAuthority, userSource, poolSource, poolDestination, userDestination, poolMint, feeAccount, hostFeeAccount, swapProgramId, tokenProgramId, amountIn, minimumAmountOut) {\n    var dataLayout = BufferLayout.struct([BufferLayout.u8('instruction'), Layout.uint64('amountIn'), Layout.uint64('minimumAmountOut')]);\n    var data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode({\n      instruction: 1,\n      amountIn: new Numberu64(amountIn).toBuffer(),\n      minimumAmountOut: new Numberu64(minimumAmountOut).toBuffer()\n    }, data);\n    var keys = [{\n      pubkey: tokenSwap,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: authority,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: userTransferAuthority,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: userSource,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: poolSource,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: poolDestination,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: userDestination,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: poolMint,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: feeAccount,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: tokenProgramId,\n      isSigner: false,\n      isWritable: false\n    }];\n\n    if (hostFeeAccount !== null) {\n      keys.push({\n        pubkey: hostFeeAccount,\n        isSigner: false,\n        isWritable: true\n      });\n    }\n\n    return new TransactionInstruction({\n      keys: keys,\n      programId: swapProgramId,\n      data: data\n    });\n  };\n  /**\n   * Deposit tokens into the pool\n   * @param userAccountA User account for token A\n   * @param userAccountB User account for token B\n   * @param poolAccount User account for pool token\n   * @param userTransferAuthority Account delegated to transfer user's tokens\n   * @param poolTokenAmount Amount of pool tokens to mint\n   * @param maximumTokenA The maximum amount of token A to deposit\n   * @param maximumTokenB The maximum amount of token B to deposit\n   */\n\n\n  TokenSwap.prototype.depositAllTokenTypes = function (userAccountA, userAccountB, poolAccount, userTransferAuthority, poolTokenAmount, maximumTokenA, maximumTokenB) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , sendAndConfirmTransaction('depositAllTokenTypes', this.connection, new Transaction().add(TokenSwap.depositAllTokenTypesInstruction(this.tokenSwap, this.authority, userTransferAuthority.publicKey, userAccountA, userAccountB, this.tokenAccountA, this.tokenAccountB, this.poolToken, poolAccount, this.swapProgramId, this.tokenProgramId, poolTokenAmount, maximumTokenA, maximumTokenB)), this.payer, userTransferAuthority)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n\n  TokenSwap.depositAllTokenTypesInstruction = function (tokenSwap, authority, userTransferAuthority, sourceA, sourceB, intoA, intoB, poolToken, poolAccount, swapProgramId, tokenProgramId, poolTokenAmount, maximumTokenA, maximumTokenB) {\n    var dataLayout = BufferLayout.struct([BufferLayout.u8('instruction'), Layout.uint64('poolTokenAmount'), Layout.uint64('maximumTokenA'), Layout.uint64('maximumTokenB')]);\n    var data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode({\n      instruction: 2,\n      poolTokenAmount: new Numberu64(poolTokenAmount).toBuffer(),\n      maximumTokenA: new Numberu64(maximumTokenA).toBuffer(),\n      maximumTokenB: new Numberu64(maximumTokenB).toBuffer()\n    }, data);\n    var keys = [{\n      pubkey: tokenSwap,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: authority,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: userTransferAuthority,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: sourceA,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: sourceB,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: intoA,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: intoB,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: poolToken,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: poolAccount,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: tokenProgramId,\n      isSigner: false,\n      isWritable: false\n    }];\n    return new TransactionInstruction({\n      keys: keys,\n      programId: swapProgramId,\n      data: data\n    });\n  };\n  /**\n   * Withdraw tokens from the pool\n   *\n   * @param userAccountA User account for token A\n   * @param userAccountB User account for token B\n   * @param poolAccount User account for pool token\n   * @param userTransferAuthority Account delegated to transfer user's tokens\n   * @param poolTokenAmount Amount of pool tokens to burn\n   * @param minimumTokenA The minimum amount of token A to withdraw\n   * @param minimumTokenB The minimum amount of token B to withdraw\n   */\n\n\n  TokenSwap.prototype.withdrawAllTokenTypes = function (userAccountA, userAccountB, poolAccount, userTransferAuthority, poolTokenAmount, minimumTokenA, minimumTokenB) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , sendAndConfirmTransaction('withdraw', this.connection, new Transaction().add(TokenSwap.withdrawAllTokenTypesInstruction(this.tokenSwap, this.authority, userTransferAuthority.publicKey, this.poolToken, this.feeAccount, poolAccount, this.tokenAccountA, this.tokenAccountB, userAccountA, userAccountB, this.swapProgramId, this.tokenProgramId, poolTokenAmount, minimumTokenA, minimumTokenB)), this.payer, userTransferAuthority)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n\n  TokenSwap.withdrawAllTokenTypesInstruction = function (tokenSwap, authority, userTransferAuthority, poolMint, feeAccount, sourcePoolAccount, fromA, fromB, userAccountA, userAccountB, swapProgramId, tokenProgramId, poolTokenAmount, minimumTokenA, minimumTokenB) {\n    var dataLayout = BufferLayout.struct([BufferLayout.u8('instruction'), Layout.uint64('poolTokenAmount'), Layout.uint64('minimumTokenA'), Layout.uint64('minimumTokenB')]);\n    var data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode({\n      instruction: 3,\n      poolTokenAmount: new Numberu64(poolTokenAmount).toBuffer(),\n      minimumTokenA: new Numberu64(minimumTokenA).toBuffer(),\n      minimumTokenB: new Numberu64(minimumTokenB).toBuffer()\n    }, data);\n    var keys = [{\n      pubkey: tokenSwap,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: authority,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: userTransferAuthority,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: poolMint,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: sourcePoolAccount,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: fromA,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: fromB,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: userAccountA,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: userAccountB,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: feeAccount,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: tokenProgramId,\n      isSigner: false,\n      isWritable: false\n    }];\n    return new TransactionInstruction({\n      keys: keys,\n      programId: swapProgramId,\n      data: data\n    });\n  };\n  /**\n   * Deposit one side of tokens into the pool\n   * @param userAccount User account to deposit token A or B\n   * @param poolAccount User account to receive pool tokens\n   * @param userTransferAuthority Account delegated to transfer user's tokens\n   * @param sourceTokenAmount The amount of token A or B to deposit\n   * @param minimumPoolTokenAmount Minimum amount of pool tokens to mint\n   */\n\n\n  TokenSwap.prototype.depositSingleTokenTypeExactAmountIn = function (userAccount, poolAccount, userTransferAuthority, sourceTokenAmount, minimumPoolTokenAmount) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , sendAndConfirmTransaction('depositSingleTokenTypeExactAmountIn', this.connection, new Transaction().add(TokenSwap.depositSingleTokenTypeExactAmountInInstruction(this.tokenSwap, this.authority, userTransferAuthority.publicKey, userAccount, this.tokenAccountA, this.tokenAccountB, this.poolToken, poolAccount, this.swapProgramId, this.tokenProgramId, sourceTokenAmount, minimumPoolTokenAmount)), this.payer, userTransferAuthority)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n\n  TokenSwap.depositSingleTokenTypeExactAmountInInstruction = function (tokenSwap, authority, userTransferAuthority, source, intoA, intoB, poolToken, poolAccount, swapProgramId, tokenProgramId, sourceTokenAmount, minimumPoolTokenAmount) {\n    var dataLayout = BufferLayout.struct([BufferLayout.u8('instruction'), Layout.uint64('sourceTokenAmount'), Layout.uint64('minimumPoolTokenAmount')]);\n    var data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode({\n      instruction: 4,\n      sourceTokenAmount: new Numberu64(sourceTokenAmount).toBuffer(),\n      minimumPoolTokenAmount: new Numberu64(minimumPoolTokenAmount).toBuffer()\n    }, data);\n    var keys = [{\n      pubkey: tokenSwap,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: authority,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: userTransferAuthority,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: source,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: intoA,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: intoB,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: poolToken,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: poolAccount,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: tokenProgramId,\n      isSigner: false,\n      isWritable: false\n    }];\n    return new TransactionInstruction({\n      keys: keys,\n      programId: swapProgramId,\n      data: data\n    });\n  };\n  /**\n   * Withdraw tokens from the pool\n   *\n   * @param userAccount User account to receive token A or B\n   * @param poolAccount User account to burn pool token\n   * @param userTransferAuthority Account delegated to transfer user's tokens\n   * @param destinationTokenAmount The amount of token A or B to withdraw\n   * @param maximumPoolTokenAmount Maximum amount of pool tokens to burn\n   */\n\n\n  TokenSwap.prototype.withdrawSingleTokenTypeExactAmountOut = function (userAccount, poolAccount, userTransferAuthority, destinationTokenAmount, maximumPoolTokenAmount) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , sendAndConfirmTransaction('withdrawSingleTokenTypeExactAmountOut', this.connection, new Transaction().add(TokenSwap.withdrawSingleTokenTypeExactAmountOutInstruction(this.tokenSwap, this.authority, userTransferAuthority.publicKey, this.poolToken, this.feeAccount, poolAccount, this.tokenAccountA, this.tokenAccountB, userAccount, this.swapProgramId, this.tokenProgramId, destinationTokenAmount, maximumPoolTokenAmount)), this.payer, userTransferAuthority)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n\n  TokenSwap.withdrawSingleTokenTypeExactAmountOutInstruction = function (tokenSwap, authority, userTransferAuthority, poolMint, feeAccount, sourcePoolAccount, fromA, fromB, userAccount, swapProgramId, tokenProgramId, destinationTokenAmount, maximumPoolTokenAmount) {\n    var dataLayout = BufferLayout.struct([BufferLayout.u8('instruction'), Layout.uint64('destinationTokenAmount'), Layout.uint64('maximumPoolTokenAmount')]);\n    var data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode({\n      instruction: 5,\n      destinationTokenAmount: new Numberu64(destinationTokenAmount).toBuffer(),\n      maximumPoolTokenAmount: new Numberu64(maximumPoolTokenAmount).toBuffer()\n    }, data);\n    var keys = [{\n      pubkey: tokenSwap,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: authority,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: userTransferAuthority,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: poolMint,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: sourcePoolAccount,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: fromA,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: fromB,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: userAccount,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: feeAccount,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: tokenProgramId,\n      isSigner: false,\n      isWritable: false\n    }];\n    return new TransactionInstruction({\n      keys: keys,\n      programId: swapProgramId,\n      data: data\n    });\n  };\n\n  return TokenSwap;\n}();\n\nexport { TokenSwap };","map":{"version":3,"sources":["/Users/mikovainio/FyFy/token-swap/node_modules/@solana/spl-token-swap/dist.browser/index.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","__generator","body","_","label","sent","t","trys","ops","f","y","g","verb","Symbol","iterator","n","v","op","pop","length","push","__read","o","m","i","r","ar","error","__spreadArray","to","from","il","j","assert","BN","Buffer","BufferLayout","PublicKey","SystemProgram","Transaction","TransactionInstruction","Layout","sendAndConfirmTransaction","loadAccount","TOKEN_SWAP_PROGRAM_ID","Numberu64","_super","arguments","toBuffer","a","toArray","reverse","zeroPad","alloc","copy","fromBuffer","buffer","map","toString","slice","join","TokenSwapLayout","struct","u8","publicKey","uint64","blob","CurveType","freeze","ConstantProduct","ConstantPrice","Offset","TokenSwap","connection","tokenSwap","swapProgramId","tokenProgramId","poolToken","feeAccount","authority","tokenAccountA","tokenAccountB","mintA","mintB","tradeFeeNumerator","tradeFeeDenominator","ownerTradeFeeNumerator","ownerTradeFeeDenominator","ownerWithdrawFeeNumerator","ownerWithdrawFeeDenominator","hostFeeNumerator","hostFeeDenominator","curveType","payer","getMinBalanceRentForExemptTokenSwap","_a","getMinimumBalanceForRentExemption","span","createInitSwapInstruction","tokenSwapAccount","tokenPool","tokenAccountPool","nonce","keys","pubkey","isSigner","isWritable","commandDataLayout","nu64","data","encodeLength","encode","instruction","programId","loadTokenSwap","address","tokenSwapData","_b","decode","isInitialized","Error","findProgramAddress","createTokenSwap","transaction","balanceNeeded","add","createAccount","fromPubkey","newAccountPubkey","lamports","space","swap","userSource","poolSource","poolDestination","userDestination","hostFeeAccount","userTransferAuthority","amountIn","minimumAmountOut","swapInstruction","poolMint","dataLayout","depositAllTokenTypes","userAccountA","userAccountB","poolAccount","poolTokenAmount","maximumTokenA","maximumTokenB","depositAllTokenTypesInstruction","sourceA","sourceB","intoA","intoB","withdrawAllTokenTypes","minimumTokenA","minimumTokenB","withdrawAllTokenTypesInstruction","sourcePoolAccount","fromA","fromB","depositSingleTokenTypeExactAmountIn","userAccount","sourceTokenAmount","minimumPoolTokenAmount","depositSingleTokenTypeExactAmountInInstruction","source","withdrawSingleTokenTypeExactAmountOut","destinationTokenAmount","maximumPoolTokenAmount","withdrawSingleTokenTypeExactAmountOutInstruction"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from) {\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\n        to[j] = from[i];\n    return to;\n};\nimport assert from 'assert';\nimport BN from 'bn.js';\nimport { Buffer } from 'buffer';\nimport * as BufferLayout from 'buffer-layout';\nimport { PublicKey, SystemProgram, Transaction, TransactionInstruction, } from '@solana/web3.js';\nimport * as Layout from './layout';\nimport { sendAndConfirmTransaction } from './util/send-and-confirm-transaction';\nimport { loadAccount } from './util/account';\nexport var TOKEN_SWAP_PROGRAM_ID = new PublicKey('SwaPpA9LAaLfeLi3a68M4DjnLqgtticKg6CnyNwgAC8');\n/**\n * Some amount of tokens\n */\nvar Numberu64 = /** @class */ (function (_super) {\n    __extends(Numberu64, _super);\n    function Numberu64() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Convert to Buffer representation\n     */\n    Numberu64.prototype.toBuffer = function () {\n        var a = _super.prototype.toArray.call(this).reverse();\n        var b = Buffer.from(a);\n        if (b.length === 8) {\n            return b;\n        }\n        assert(b.length < 8, 'Numberu64 too large');\n        var zeroPad = Buffer.alloc(8);\n        b.copy(zeroPad);\n        return zeroPad;\n    };\n    /**\n     * Construct a Numberu64 from Buffer representation\n     */\n    Numberu64.fromBuffer = function (buffer) {\n        assert(buffer.length === 8, \"Invalid buffer length: \" + buffer.length);\n        return new Numberu64(__spreadArray([], __read(buffer)).reverse()\n            .map(function (i) { return (\"00\" + i.toString(16)).slice(-2); })\n            .join(''), 16);\n    };\n    return Numberu64;\n}(BN));\nexport { Numberu64 };\nexport var TokenSwapLayout = BufferLayout.struct([\n    BufferLayout.u8('version'),\n    BufferLayout.u8('isInitialized'),\n    BufferLayout.u8('nonce'),\n    Layout.publicKey('tokenProgramId'),\n    Layout.publicKey('tokenAccountA'),\n    Layout.publicKey('tokenAccountB'),\n    Layout.publicKey('tokenPool'),\n    Layout.publicKey('mintA'),\n    Layout.publicKey('mintB'),\n    Layout.publicKey('feeAccount'),\n    Layout.uint64('tradeFeeNumerator'),\n    Layout.uint64('tradeFeeDenominator'),\n    Layout.uint64('ownerTradeFeeNumerator'),\n    Layout.uint64('ownerTradeFeeDenominator'),\n    Layout.uint64('ownerWithdrawFeeNumerator'),\n    Layout.uint64('ownerWithdrawFeeDenominator'),\n    Layout.uint64('hostFeeNumerator'),\n    Layout.uint64('hostFeeDenominator'),\n    BufferLayout.u8('curveType'),\n    BufferLayout.blob(32, 'curveParameters'),\n]);\nexport var CurveType = Object.freeze({\n    ConstantProduct: 0,\n    ConstantPrice: 1,\n    Offset: 3, // Offset curve, like Uniswap, but with an additional offset on the token B side\n});\n/**\n * A program to exchange tokens against a pool of liquidity\n */\nvar TokenSwap = /** @class */ (function () {\n    /**\n     * Create a Token object attached to the specific token\n     *\n     * @param connection The connection to use\n     * @param tokenSwap The token swap account\n     * @param swapProgramId The program ID of the token-swap program\n     * @param tokenProgramId The program ID of the token program\n     * @param poolToken The pool token\n     * @param authority The authority over the swap and accounts\n     * @param tokenAccountA The token swap's Token A account\n     * @param tokenAccountB The token swap's Token B account\n     * @param mintA The mint of Token A\n     * @param mintB The mint of Token B\n     * @param tradeFeeNumerator The trade fee numerator\n     * @param tradeFeeDenominator The trade fee denominator\n     * @param ownerTradeFeeNumerator The owner trade fee numerator\n     * @param ownerTradeFeeDenominator The owner trade fee denominator\n     * @param ownerWithdrawFeeNumerator The owner withdraw fee numerator\n     * @param ownerWithdrawFeeDenominator The owner withdraw fee denominator\n     * @param hostFeeNumerator The host fee numerator\n     * @param hostFeeDenominator The host fee denominator\n     * @param curveType The curve type\n     * @param payer Pays for the transaction\n     */\n    function TokenSwap(connection, tokenSwap, swapProgramId, tokenProgramId, poolToken, feeAccount, authority, tokenAccountA, tokenAccountB, mintA, mintB, tradeFeeNumerator, tradeFeeDenominator, ownerTradeFeeNumerator, ownerTradeFeeDenominator, ownerWithdrawFeeNumerator, ownerWithdrawFeeDenominator, hostFeeNumerator, hostFeeDenominator, curveType, payer) {\n        this.connection = connection;\n        this.tokenSwap = tokenSwap;\n        this.swapProgramId = swapProgramId;\n        this.tokenProgramId = tokenProgramId;\n        this.poolToken = poolToken;\n        this.feeAccount = feeAccount;\n        this.authority = authority;\n        this.tokenAccountA = tokenAccountA;\n        this.tokenAccountB = tokenAccountB;\n        this.mintA = mintA;\n        this.mintB = mintB;\n        this.tradeFeeNumerator = tradeFeeNumerator;\n        this.tradeFeeDenominator = tradeFeeDenominator;\n        this.ownerTradeFeeNumerator = ownerTradeFeeNumerator;\n        this.ownerTradeFeeDenominator = ownerTradeFeeDenominator;\n        this.ownerWithdrawFeeNumerator = ownerWithdrawFeeNumerator;\n        this.ownerWithdrawFeeDenominator = ownerWithdrawFeeDenominator;\n        this.hostFeeNumerator = hostFeeNumerator;\n        this.hostFeeDenominator = hostFeeDenominator;\n        this.curveType = curveType;\n        this.payer = payer;\n        this.connection = connection;\n        this.tokenSwap = tokenSwap;\n        this.swapProgramId = swapProgramId;\n        this.tokenProgramId = tokenProgramId;\n        this.poolToken = poolToken;\n        this.feeAccount = feeAccount;\n        this.authority = authority;\n        this.tokenAccountA = tokenAccountA;\n        this.tokenAccountB = tokenAccountB;\n        this.mintA = mintA;\n        this.mintB = mintB;\n        this.tradeFeeNumerator = tradeFeeNumerator;\n        this.tradeFeeDenominator = tradeFeeDenominator;\n        this.ownerTradeFeeNumerator = ownerTradeFeeNumerator;\n        this.ownerTradeFeeDenominator = ownerTradeFeeDenominator;\n        this.ownerWithdrawFeeNumerator = ownerWithdrawFeeNumerator;\n        this.ownerWithdrawFeeDenominator = ownerWithdrawFeeDenominator;\n        this.hostFeeNumerator = hostFeeNumerator;\n        this.hostFeeDenominator = hostFeeDenominator;\n        this.curveType = curveType;\n        this.payer = payer;\n    }\n    /**\n     * Get the minimum balance for the token swap account to be rent exempt\n     *\n     * @return Number of lamports required\n     */\n    TokenSwap.getMinBalanceRentForExemptTokenSwap = function (connection) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, connection.getMinimumBalanceForRentExemption(TokenSwapLayout.span)];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    TokenSwap.createInitSwapInstruction = function (tokenSwapAccount, authority, tokenAccountA, tokenAccountB, tokenPool, feeAccount, tokenAccountPool, tokenProgramId, swapProgramId, nonce, tradeFeeNumerator, tradeFeeDenominator, ownerTradeFeeNumerator, ownerTradeFeeDenominator, ownerWithdrawFeeNumerator, ownerWithdrawFeeDenominator, hostFeeNumerator, hostFeeDenominator, curveType) {\n        var keys = [\n            { pubkey: tokenSwapAccount.publicKey, isSigner: false, isWritable: true },\n            { pubkey: authority, isSigner: false, isWritable: false },\n            { pubkey: tokenAccountA, isSigner: false, isWritable: false },\n            { pubkey: tokenAccountB, isSigner: false, isWritable: false },\n            { pubkey: tokenPool, isSigner: false, isWritable: true },\n            { pubkey: feeAccount, isSigner: false, isWritable: false },\n            { pubkey: tokenAccountPool, isSigner: false, isWritable: true },\n            { pubkey: tokenProgramId, isSigner: false, isWritable: false },\n        ];\n        var commandDataLayout = BufferLayout.struct([\n            BufferLayout.u8('instruction'),\n            BufferLayout.u8('nonce'),\n            BufferLayout.nu64('tradeFeeNumerator'),\n            BufferLayout.nu64('tradeFeeDenominator'),\n            BufferLayout.nu64('ownerTradeFeeNumerator'),\n            BufferLayout.nu64('ownerTradeFeeDenominator'),\n            BufferLayout.nu64('ownerWithdrawFeeNumerator'),\n            BufferLayout.nu64('ownerWithdrawFeeDenominator'),\n            BufferLayout.nu64('hostFeeNumerator'),\n            BufferLayout.nu64('hostFeeDenominator'),\n            BufferLayout.u8('curveType'),\n            BufferLayout.blob(32, 'curveParameters'),\n        ]);\n        var data = Buffer.alloc(1024);\n        {\n            var encodeLength = commandDataLayout.encode({\n                instruction: 0,\n                nonce: nonce,\n                tradeFeeNumerator: tradeFeeNumerator,\n                tradeFeeDenominator: tradeFeeDenominator,\n                ownerTradeFeeNumerator: ownerTradeFeeNumerator,\n                ownerTradeFeeDenominator: ownerTradeFeeDenominator,\n                ownerWithdrawFeeNumerator: ownerWithdrawFeeNumerator,\n                ownerWithdrawFeeDenominator: ownerWithdrawFeeDenominator,\n                hostFeeNumerator: hostFeeNumerator,\n                hostFeeDenominator: hostFeeDenominator,\n                curveType: curveType,\n            }, data);\n            data = data.slice(0, encodeLength);\n        }\n        return new TransactionInstruction({\n            keys: keys,\n            programId: swapProgramId,\n            data: data,\n        });\n    };\n    TokenSwap.loadTokenSwap = function (connection, address, programId, payer) {\n        return __awaiter(this, void 0, void 0, function () {\n            var data, tokenSwapData, _a, authority, poolToken, feeAccount, tokenAccountA, tokenAccountB, mintA, mintB, tokenProgramId, tradeFeeNumerator, tradeFeeDenominator, ownerTradeFeeNumerator, ownerTradeFeeDenominator, ownerWithdrawFeeNumerator, ownerWithdrawFeeDenominator, hostFeeNumerator, hostFeeDenominator, curveType;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, loadAccount(connection, address, programId)];\n                    case 1:\n                        data = _b.sent();\n                        tokenSwapData = TokenSwapLayout.decode(data);\n                        if (!tokenSwapData.isInitialized) {\n                            throw new Error(\"Invalid token swap state\");\n                        }\n                        return [4 /*yield*/, PublicKey.findProgramAddress([address.toBuffer()], programId)];\n                    case 2:\n                        _a = __read.apply(void 0, [_b.sent(), 1]), authority = _a[0];\n                        poolToken = new PublicKey(tokenSwapData.tokenPool);\n                        feeAccount = new PublicKey(tokenSwapData.feeAccount);\n                        tokenAccountA = new PublicKey(tokenSwapData.tokenAccountA);\n                        tokenAccountB = new PublicKey(tokenSwapData.tokenAccountB);\n                        mintA = new PublicKey(tokenSwapData.mintA);\n                        mintB = new PublicKey(tokenSwapData.mintB);\n                        tokenProgramId = new PublicKey(tokenSwapData.tokenProgramId);\n                        tradeFeeNumerator = Numberu64.fromBuffer(tokenSwapData.tradeFeeNumerator);\n                        tradeFeeDenominator = Numberu64.fromBuffer(tokenSwapData.tradeFeeDenominator);\n                        ownerTradeFeeNumerator = Numberu64.fromBuffer(tokenSwapData.ownerTradeFeeNumerator);\n                        ownerTradeFeeDenominator = Numberu64.fromBuffer(tokenSwapData.ownerTradeFeeDenominator);\n                        ownerWithdrawFeeNumerator = Numberu64.fromBuffer(tokenSwapData.ownerWithdrawFeeNumerator);\n                        ownerWithdrawFeeDenominator = Numberu64.fromBuffer(tokenSwapData.ownerWithdrawFeeDenominator);\n                        hostFeeNumerator = Numberu64.fromBuffer(tokenSwapData.hostFeeNumerator);\n                        hostFeeDenominator = Numberu64.fromBuffer(tokenSwapData.hostFeeDenominator);\n                        curveType = tokenSwapData.curveType;\n                        return [2 /*return*/, new TokenSwap(connection, address, programId, tokenProgramId, poolToken, feeAccount, authority, tokenAccountA, tokenAccountB, mintA, mintB, tradeFeeNumerator, tradeFeeDenominator, ownerTradeFeeNumerator, ownerTradeFeeDenominator, ownerWithdrawFeeNumerator, ownerWithdrawFeeDenominator, hostFeeNumerator, hostFeeDenominator, curveType, payer)];\n                }\n            });\n        });\n    };\n    /**\n     * Create a new Token Swap\n     *\n     * @param connection The connection to use\n     * @param payer Pays for the transaction\n     * @param tokenSwapAccount The token swap account\n     * @param authority The authority over the swap and accounts\n     * @param nonce The nonce used to generate the authority\n     * @param tokenAccountA: The token swap's Token A account\n     * @param tokenAccountB: The token swap's Token B account\n     * @param poolToken The pool token\n     * @param tokenAccountPool The token swap's pool token account\n     * @param tokenProgramId The program ID of the token program\n     * @param swapProgramId The program ID of the token-swap program\n     * @param feeNumerator Numerator of the fee ratio\n     * @param feeDenominator Denominator of the fee ratio\n     * @return Token object for the newly minted token, Public key of the account holding the total supply of new tokens\n     */\n    TokenSwap.createTokenSwap = function (connection, payer, tokenSwapAccount, authority, tokenAccountA, tokenAccountB, poolToken, mintA, mintB, feeAccount, tokenAccountPool, swapProgramId, tokenProgramId, nonce, tradeFeeNumerator, tradeFeeDenominator, ownerTradeFeeNumerator, ownerTradeFeeDenominator, ownerWithdrawFeeNumerator, ownerWithdrawFeeDenominator, hostFeeNumerator, hostFeeDenominator, curveType) {\n        return __awaiter(this, void 0, void 0, function () {\n            var transaction, tokenSwap, balanceNeeded, instruction;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        tokenSwap = new TokenSwap(connection, tokenSwapAccount.publicKey, swapProgramId, tokenProgramId, poolToken, feeAccount, authority, tokenAccountA, tokenAccountB, mintA, mintB, new Numberu64(tradeFeeNumerator), new Numberu64(tradeFeeDenominator), new Numberu64(ownerTradeFeeNumerator), new Numberu64(ownerTradeFeeDenominator), new Numberu64(ownerWithdrawFeeNumerator), new Numberu64(ownerWithdrawFeeDenominator), new Numberu64(hostFeeNumerator), new Numberu64(hostFeeDenominator), curveType, payer);\n                        return [4 /*yield*/, TokenSwap.getMinBalanceRentForExemptTokenSwap(connection)];\n                    case 1:\n                        balanceNeeded = _a.sent();\n                        transaction = new Transaction();\n                        transaction.add(SystemProgram.createAccount({\n                            fromPubkey: payer.publicKey,\n                            newAccountPubkey: tokenSwapAccount.publicKey,\n                            lamports: balanceNeeded,\n                            space: TokenSwapLayout.span,\n                            programId: swapProgramId,\n                        }));\n                        instruction = TokenSwap.createInitSwapInstruction(tokenSwapAccount, authority, tokenAccountA, tokenAccountB, poolToken, feeAccount, tokenAccountPool, tokenProgramId, swapProgramId, nonce, tradeFeeNumerator, tradeFeeDenominator, ownerTradeFeeNumerator, ownerTradeFeeDenominator, ownerWithdrawFeeNumerator, ownerWithdrawFeeDenominator, hostFeeNumerator, hostFeeDenominator, curveType);\n                        transaction.add(instruction);\n                        return [4 /*yield*/, sendAndConfirmTransaction('createAccount and InitializeSwap', connection, transaction, payer, tokenSwapAccount)];\n                    case 2:\n                        _a.sent();\n                        return [2 /*return*/, tokenSwap];\n                }\n            });\n        });\n    };\n    /**\n     * Swap token A for token B\n     *\n     * @param userSource User's source token account\n     * @param poolSource Pool's source token account\n     * @param poolDestination Pool's destination token account\n     * @param userDestination User's destination token account\n     * @param hostFeeAccount Host account to gather fees\n     * @param userTransferAuthority Account delegated to transfer user's tokens\n     * @param amountIn Amount to transfer from source account\n     * @param minimumAmountOut Minimum amount of tokens the user will receive\n     */\n    TokenSwap.prototype.swap = function (userSource, poolSource, poolDestination, userDestination, hostFeeAccount, userTransferAuthority, amountIn, minimumAmountOut) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, sendAndConfirmTransaction('swap', this.connection, new Transaction().add(TokenSwap.swapInstruction(this.tokenSwap, this.authority, userTransferAuthority.publicKey, userSource, poolSource, poolDestination, userDestination, this.poolToken, this.feeAccount, hostFeeAccount, this.swapProgramId, this.tokenProgramId, amountIn, minimumAmountOut)), this.payer, userTransferAuthority)];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    TokenSwap.swapInstruction = function (tokenSwap, authority, userTransferAuthority, userSource, poolSource, poolDestination, userDestination, poolMint, feeAccount, hostFeeAccount, swapProgramId, tokenProgramId, amountIn, minimumAmountOut) {\n        var dataLayout = BufferLayout.struct([\n            BufferLayout.u8('instruction'),\n            Layout.uint64('amountIn'),\n            Layout.uint64('minimumAmountOut'),\n        ]);\n        var data = Buffer.alloc(dataLayout.span);\n        dataLayout.encode({\n            instruction: 1,\n            amountIn: new Numberu64(amountIn).toBuffer(),\n            minimumAmountOut: new Numberu64(minimumAmountOut).toBuffer(),\n        }, data);\n        var keys = [\n            { pubkey: tokenSwap, isSigner: false, isWritable: false },\n            { pubkey: authority, isSigner: false, isWritable: false },\n            { pubkey: userTransferAuthority, isSigner: true, isWritable: false },\n            { pubkey: userSource, isSigner: false, isWritable: true },\n            { pubkey: poolSource, isSigner: false, isWritable: true },\n            { pubkey: poolDestination, isSigner: false, isWritable: true },\n            { pubkey: userDestination, isSigner: false, isWritable: true },\n            { pubkey: poolMint, isSigner: false, isWritable: true },\n            { pubkey: feeAccount, isSigner: false, isWritable: true },\n            { pubkey: tokenProgramId, isSigner: false, isWritable: false },\n        ];\n        if (hostFeeAccount !== null) {\n            keys.push({ pubkey: hostFeeAccount, isSigner: false, isWritable: true });\n        }\n        return new TransactionInstruction({\n            keys: keys,\n            programId: swapProgramId,\n            data: data,\n        });\n    };\n    /**\n     * Deposit tokens into the pool\n     * @param userAccountA User account for token A\n     * @param userAccountB User account for token B\n     * @param poolAccount User account for pool token\n     * @param userTransferAuthority Account delegated to transfer user's tokens\n     * @param poolTokenAmount Amount of pool tokens to mint\n     * @param maximumTokenA The maximum amount of token A to deposit\n     * @param maximumTokenB The maximum amount of token B to deposit\n     */\n    TokenSwap.prototype.depositAllTokenTypes = function (userAccountA, userAccountB, poolAccount, userTransferAuthority, poolTokenAmount, maximumTokenA, maximumTokenB) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, sendAndConfirmTransaction('depositAllTokenTypes', this.connection, new Transaction().add(TokenSwap.depositAllTokenTypesInstruction(this.tokenSwap, this.authority, userTransferAuthority.publicKey, userAccountA, userAccountB, this.tokenAccountA, this.tokenAccountB, this.poolToken, poolAccount, this.swapProgramId, this.tokenProgramId, poolTokenAmount, maximumTokenA, maximumTokenB)), this.payer, userTransferAuthority)];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    TokenSwap.depositAllTokenTypesInstruction = function (tokenSwap, authority, userTransferAuthority, sourceA, sourceB, intoA, intoB, poolToken, poolAccount, swapProgramId, tokenProgramId, poolTokenAmount, maximumTokenA, maximumTokenB) {\n        var dataLayout = BufferLayout.struct([\n            BufferLayout.u8('instruction'),\n            Layout.uint64('poolTokenAmount'),\n            Layout.uint64('maximumTokenA'),\n            Layout.uint64('maximumTokenB'),\n        ]);\n        var data = Buffer.alloc(dataLayout.span);\n        dataLayout.encode({\n            instruction: 2,\n            poolTokenAmount: new Numberu64(poolTokenAmount).toBuffer(),\n            maximumTokenA: new Numberu64(maximumTokenA).toBuffer(),\n            maximumTokenB: new Numberu64(maximumTokenB).toBuffer(),\n        }, data);\n        var keys = [\n            { pubkey: tokenSwap, isSigner: false, isWritable: false },\n            { pubkey: authority, isSigner: false, isWritable: false },\n            { pubkey: userTransferAuthority, isSigner: true, isWritable: false },\n            { pubkey: sourceA, isSigner: false, isWritable: true },\n            { pubkey: sourceB, isSigner: false, isWritable: true },\n            { pubkey: intoA, isSigner: false, isWritable: true },\n            { pubkey: intoB, isSigner: false, isWritable: true },\n            { pubkey: poolToken, isSigner: false, isWritable: true },\n            { pubkey: poolAccount, isSigner: false, isWritable: true },\n            { pubkey: tokenProgramId, isSigner: false, isWritable: false },\n        ];\n        return new TransactionInstruction({\n            keys: keys,\n            programId: swapProgramId,\n            data: data,\n        });\n    };\n    /**\n     * Withdraw tokens from the pool\n     *\n     * @param userAccountA User account for token A\n     * @param userAccountB User account for token B\n     * @param poolAccount User account for pool token\n     * @param userTransferAuthority Account delegated to transfer user's tokens\n     * @param poolTokenAmount Amount of pool tokens to burn\n     * @param minimumTokenA The minimum amount of token A to withdraw\n     * @param minimumTokenB The minimum amount of token B to withdraw\n     */\n    TokenSwap.prototype.withdrawAllTokenTypes = function (userAccountA, userAccountB, poolAccount, userTransferAuthority, poolTokenAmount, minimumTokenA, minimumTokenB) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, sendAndConfirmTransaction('withdraw', this.connection, new Transaction().add(TokenSwap.withdrawAllTokenTypesInstruction(this.tokenSwap, this.authority, userTransferAuthority.publicKey, this.poolToken, this.feeAccount, poolAccount, this.tokenAccountA, this.tokenAccountB, userAccountA, userAccountB, this.swapProgramId, this.tokenProgramId, poolTokenAmount, minimumTokenA, minimumTokenB)), this.payer, userTransferAuthority)];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    TokenSwap.withdrawAllTokenTypesInstruction = function (tokenSwap, authority, userTransferAuthority, poolMint, feeAccount, sourcePoolAccount, fromA, fromB, userAccountA, userAccountB, swapProgramId, tokenProgramId, poolTokenAmount, minimumTokenA, minimumTokenB) {\n        var dataLayout = BufferLayout.struct([\n            BufferLayout.u8('instruction'),\n            Layout.uint64('poolTokenAmount'),\n            Layout.uint64('minimumTokenA'),\n            Layout.uint64('minimumTokenB'),\n        ]);\n        var data = Buffer.alloc(dataLayout.span);\n        dataLayout.encode({\n            instruction: 3,\n            poolTokenAmount: new Numberu64(poolTokenAmount).toBuffer(),\n            minimumTokenA: new Numberu64(minimumTokenA).toBuffer(),\n            minimumTokenB: new Numberu64(minimumTokenB).toBuffer(),\n        }, data);\n        var keys = [\n            { pubkey: tokenSwap, isSigner: false, isWritable: false },\n            { pubkey: authority, isSigner: false, isWritable: false },\n            { pubkey: userTransferAuthority, isSigner: true, isWritable: false },\n            { pubkey: poolMint, isSigner: false, isWritable: true },\n            { pubkey: sourcePoolAccount, isSigner: false, isWritable: true },\n            { pubkey: fromA, isSigner: false, isWritable: true },\n            { pubkey: fromB, isSigner: false, isWritable: true },\n            { pubkey: userAccountA, isSigner: false, isWritable: true },\n            { pubkey: userAccountB, isSigner: false, isWritable: true },\n            { pubkey: feeAccount, isSigner: false, isWritable: true },\n            { pubkey: tokenProgramId, isSigner: false, isWritable: false },\n        ];\n        return new TransactionInstruction({\n            keys: keys,\n            programId: swapProgramId,\n            data: data,\n        });\n    };\n    /**\n     * Deposit one side of tokens into the pool\n     * @param userAccount User account to deposit token A or B\n     * @param poolAccount User account to receive pool tokens\n     * @param userTransferAuthority Account delegated to transfer user's tokens\n     * @param sourceTokenAmount The amount of token A or B to deposit\n     * @param minimumPoolTokenAmount Minimum amount of pool tokens to mint\n     */\n    TokenSwap.prototype.depositSingleTokenTypeExactAmountIn = function (userAccount, poolAccount, userTransferAuthority, sourceTokenAmount, minimumPoolTokenAmount) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, sendAndConfirmTransaction('depositSingleTokenTypeExactAmountIn', this.connection, new Transaction().add(TokenSwap.depositSingleTokenTypeExactAmountInInstruction(this.tokenSwap, this.authority, userTransferAuthority.publicKey, userAccount, this.tokenAccountA, this.tokenAccountB, this.poolToken, poolAccount, this.swapProgramId, this.tokenProgramId, sourceTokenAmount, minimumPoolTokenAmount)), this.payer, userTransferAuthority)];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    TokenSwap.depositSingleTokenTypeExactAmountInInstruction = function (tokenSwap, authority, userTransferAuthority, source, intoA, intoB, poolToken, poolAccount, swapProgramId, tokenProgramId, sourceTokenAmount, minimumPoolTokenAmount) {\n        var dataLayout = BufferLayout.struct([\n            BufferLayout.u8('instruction'),\n            Layout.uint64('sourceTokenAmount'),\n            Layout.uint64('minimumPoolTokenAmount'),\n        ]);\n        var data = Buffer.alloc(dataLayout.span);\n        dataLayout.encode({\n            instruction: 4,\n            sourceTokenAmount: new Numberu64(sourceTokenAmount).toBuffer(),\n            minimumPoolTokenAmount: new Numberu64(minimumPoolTokenAmount).toBuffer(),\n        }, data);\n        var keys = [\n            { pubkey: tokenSwap, isSigner: false, isWritable: false },\n            { pubkey: authority, isSigner: false, isWritable: false },\n            { pubkey: userTransferAuthority, isSigner: true, isWritable: false },\n            { pubkey: source, isSigner: false, isWritable: true },\n            { pubkey: intoA, isSigner: false, isWritable: true },\n            { pubkey: intoB, isSigner: false, isWritable: true },\n            { pubkey: poolToken, isSigner: false, isWritable: true },\n            { pubkey: poolAccount, isSigner: false, isWritable: true },\n            { pubkey: tokenProgramId, isSigner: false, isWritable: false },\n        ];\n        return new TransactionInstruction({\n            keys: keys,\n            programId: swapProgramId,\n            data: data,\n        });\n    };\n    /**\n     * Withdraw tokens from the pool\n     *\n     * @param userAccount User account to receive token A or B\n     * @param poolAccount User account to burn pool token\n     * @param userTransferAuthority Account delegated to transfer user's tokens\n     * @param destinationTokenAmount The amount of token A or B to withdraw\n     * @param maximumPoolTokenAmount Maximum amount of pool tokens to burn\n     */\n    TokenSwap.prototype.withdrawSingleTokenTypeExactAmountOut = function (userAccount, poolAccount, userTransferAuthority, destinationTokenAmount, maximumPoolTokenAmount) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, sendAndConfirmTransaction('withdrawSingleTokenTypeExactAmountOut', this.connection, new Transaction().add(TokenSwap.withdrawSingleTokenTypeExactAmountOutInstruction(this.tokenSwap, this.authority, userTransferAuthority.publicKey, this.poolToken, this.feeAccount, poolAccount, this.tokenAccountA, this.tokenAccountB, userAccount, this.swapProgramId, this.tokenProgramId, destinationTokenAmount, maximumPoolTokenAmount)), this.payer, userTransferAuthority)];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    TokenSwap.withdrawSingleTokenTypeExactAmountOutInstruction = function (tokenSwap, authority, userTransferAuthority, poolMint, feeAccount, sourcePoolAccount, fromA, fromB, userAccount, swapProgramId, tokenProgramId, destinationTokenAmount, maximumPoolTokenAmount) {\n        var dataLayout = BufferLayout.struct([\n            BufferLayout.u8('instruction'),\n            Layout.uint64('destinationTokenAmount'),\n            Layout.uint64('maximumPoolTokenAmount'),\n        ]);\n        var data = Buffer.alloc(dataLayout.span);\n        dataLayout.encode({\n            instruction: 5,\n            destinationTokenAmount: new Numberu64(destinationTokenAmount).toBuffer(),\n            maximumPoolTokenAmount: new Numberu64(maximumPoolTokenAmount).toBuffer(),\n        }, data);\n        var keys = [\n            { pubkey: tokenSwap, isSigner: false, isWritable: false },\n            { pubkey: authority, isSigner: false, isWritable: false },\n            { pubkey: userTransferAuthority, isSigner: true, isWritable: false },\n            { pubkey: poolMint, isSigner: false, isWritable: true },\n            { pubkey: sourcePoolAccount, isSigner: false, isWritable: true },\n            { pubkey: fromA, isSigner: false, isWritable: true },\n            { pubkey: fromB, isSigner: false, isWritable: true },\n            { pubkey: userAccount, isSigner: false, isWritable: true },\n            { pubkey: feeAccount, isSigner: false, isWritable: true },\n            { pubkey: tokenProgramId, isSigner: false, isWritable: false },\n        ];\n        return new TransactionInstruction({\n            keys: keys,\n            programId: swapProgramId,\n            data: data,\n        });\n    };\n    return TokenSwap;\n}());\nexport { TokenSwap };\n"]},"metadata":{},"sourceType":"module"}