{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/mikovainio/FyFy/token-swap/node_modules/@babel/runtime/regenerator/index.js\");\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getTokenCount = void 0;\n\nvar spl_token_1 = require(\"@solana/spl-token\");\n\nvar deserialize_account_1 = require(\"./deserialize-account\");\n\nfunction getTokenCount(connection, poolParams, inputPoolToken, outputPoolToken) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var accountInfos, tokens, inputTokenAccount, outputTokenAccount;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(poolParams.tokens[inputPoolToken.mint.toString()] == undefined)) {\n              _context.next = 2;\n              break;\n            }\n\n            throw new Error(\"Input token not part of pool\");\n\n          case 2:\n            if (!(poolParams.tokens[outputPoolToken.mint.toString()] == undefined)) {\n              _context.next = 4;\n              break;\n            }\n\n            throw new Error(\"Output token not part of pool\");\n\n          case 4:\n            _context.next = 6;\n            return connection.getMultipleAccountsInfo([inputPoolToken.addr, outputPoolToken.addr]);\n\n          case 6:\n            accountInfos = _context.sent;\n            tokens = accountInfos.map(function (info) {\n              return info != undefined ? (0, deserialize_account_1.deserializeAccount)(info.data) : undefined;\n            });\n            inputTokenAccount = tokens[0], outputTokenAccount = tokens[1];\n\n            if (!(inputTokenAccount === undefined || outputTokenAccount === undefined)) {\n              _context.next = 11;\n              break;\n            }\n\n            throw new Error(\"Unable to fetch accounts for specified tokens.\");\n\n          case 11:\n            return _context.abrupt(\"return\", {\n              inputTokenCount: new spl_token_1.u64(inputTokenAccount.amount),\n              outputTokenCount: new spl_token_1.u64(outputTokenAccount.amount)\n            });\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n}\n\nexports.getTokenCount = getTokenCount;","map":{"version":3,"sources":["/Users/mikovainio/FyFy/token-swap/node_modules/@orca-so/sdk/dist/public/utils/web3/get-token-count.js"],"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","getTokenCount","spl_token_1","require","deserialize_account_1","connection","poolParams","inputPoolToken","outputPoolToken","tokens","mint","toString","undefined","Error","getMultipleAccountsInfo","addr","accountInfos","map","info","deserializeAccount","data","inputTokenAccount","outputTokenAccount","inputTokenCount","u64","amount","outputTokenCount"],"mappings":"AAAA;;;;AACA,IAAIA,SAAS,GAAI,QAAQ,KAAKA,SAAd,IAA4B,UAAUC,OAAV,EAAmBC,UAAnB,EAA+BC,CAA/B,EAAkCC,SAAlC,EAA6C;AACrF,WAASC,KAAT,CAAeC,KAAf,EAAsB;AAAE,WAAOA,KAAK,YAAYH,CAAjB,GAAqBG,KAArB,GAA6B,IAAIH,CAAJ,CAAM,UAAUI,OAAV,EAAmB;AAAEA,MAAAA,OAAO,CAACD,KAAD,CAAP;AAAiB,KAA5C,CAApC;AAAoF;;AAC5G,SAAO,KAAKH,CAAC,KAAKA,CAAC,GAAGK,OAAT,CAAN,EAAyB,UAAUD,OAAV,EAAmBE,MAAnB,EAA2B;AACvD,aAASC,SAAT,CAAmBJ,KAAnB,EAA0B;AAAE,UAAI;AAAEK,QAAAA,IAAI,CAACP,SAAS,CAACQ,IAAV,CAAeN,KAAf,CAAD,CAAJ;AAA8B,OAApC,CAAqC,OAAOO,CAAP,EAAU;AAAEJ,QAAAA,MAAM,CAACI,CAAD,CAAN;AAAY;AAAE;;AAC3F,aAASC,QAAT,CAAkBR,KAAlB,EAAyB;AAAE,UAAI;AAAEK,QAAAA,IAAI,CAACP,SAAS,CAAC,OAAD,CAAT,CAAmBE,KAAnB,CAAD,CAAJ;AAAkC,OAAxC,CAAyC,OAAOO,CAAP,EAAU;AAAEJ,QAAAA,MAAM,CAACI,CAAD,CAAN;AAAY;AAAE;;AAC9F,aAASF,IAAT,CAAcI,MAAd,EAAsB;AAAEA,MAAAA,MAAM,CAACC,IAAP,GAAcT,OAAO,CAACQ,MAAM,CAACT,KAAR,CAArB,GAAsCD,KAAK,CAACU,MAAM,CAACT,KAAR,CAAL,CAAoBW,IAApB,CAAyBP,SAAzB,EAAoCI,QAApC,CAAtC;AAAsF;;AAC9GH,IAAAA,IAAI,CAAC,CAACP,SAAS,GAAGA,SAAS,CAACc,KAAV,CAAgBjB,OAAhB,EAAyBC,UAAU,IAAI,EAAvC,CAAb,EAAyDU,IAAzD,EAAD,CAAJ;AACH,GALM,CAAP;AAMH,CARD;;AASAO,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEf,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAe,OAAO,CAACC,aAAR,GAAwB,KAAK,CAA7B;;AACA,IAAMC,WAAW,GAAGC,OAAO,CAAC,mBAAD,CAA3B;;AACA,IAAMC,qBAAqB,GAAGD,OAAO,CAAC,uBAAD,CAArC;;AACA,SAASF,aAAT,CAAuBI,UAAvB,EAAmCC,UAAnC,EAA+CC,cAA/C,EAA+DC,eAA/D,EAAgF;AAC5E,SAAO7B,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,wCAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAC/B2B,UAAU,CAACG,MAAX,CAAkBF,cAAc,CAACG,IAAf,CAAoBC,QAApB,EAAlB,KAAqDC,SADtB;AAAA;AAAA;AAAA;;AAAA,kBAEzB,IAAIC,KAAJ,CAAU,8BAAV,CAFyB;;AAAA;AAAA,kBAI/BP,UAAU,CAACG,MAAX,CAAkBD,eAAe,CAACE,IAAhB,CAAqBC,QAArB,EAAlB,KAAsDC,SAJvB;AAAA;AAAA;AAAA;;AAAA,kBAKzB,IAAIC,KAAJ,CAAU,+BAAV,CALyB;;AAAA;AAAA;AAOd,mBAAMR,UAAU,CAACS,uBAAX,CAAmC,CAC1DP,cAAc,CAACQ,IAD2C,EAE1DP,eAAe,CAACO,IAF0C,CAAnC,CAAN;;AAPc;AAO7BC,YAAAA,YAP6B;AAW7BP,YAAAA,MAX6B,GAWpBO,YAAY,CAACC,GAAb,CAAiB,UAACC,IAAD;AAAA,qBAAUA,IAAI,IAAIN,SAAR,GAAoB,CAAC,GAAGR,qBAAqB,CAACe,kBAA1B,EAA8CD,IAAI,CAACE,IAAnD,CAApB,GAA+ER,SAAzF;AAAA,aAAjB,CAXoB;AAY7BS,YAAAA,iBAZ6B,GAYTZ,MAAM,CAAC,CAAD,CAZG,EAYEa,kBAZF,GAYuBb,MAAM,CAAC,CAAD,CAZ7B;;AAAA,kBAa/BY,iBAAiB,KAAKT,SAAtB,IAAmCU,kBAAkB,KAAKV,SAb3B;AAAA;AAAA;AAAA;;AAAA,kBAczB,IAAIC,KAAJ,CAAU,gDAAV,CAdyB;;AAAA;AAAA,6CAgB5B;AACHU,cAAAA,eAAe,EAAE,IAAIrB,WAAW,CAACsB,GAAhB,CAAoBH,iBAAiB,CAACI,MAAtC,CADd;AAEHC,cAAAA,gBAAgB,EAAE,IAAIxB,WAAW,CAACsB,GAAhB,CAAoBF,kBAAkB,CAACG,MAAvC;AAFf,aAhB4B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAvB,EAAhB;AAqBH;;AACDzB,OAAO,CAACC,aAAR,GAAwBA,aAAxB","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getTokenCount = void 0;\nconst spl_token_1 = require(\"@solana/spl-token\");\nconst deserialize_account_1 = require(\"./deserialize-account\");\nfunction getTokenCount(connection, poolParams, inputPoolToken, outputPoolToken) {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (poolParams.tokens[inputPoolToken.mint.toString()] == undefined) {\n            throw new Error(\"Input token not part of pool\");\n        }\n        if (poolParams.tokens[outputPoolToken.mint.toString()] == undefined) {\n            throw new Error(\"Output token not part of pool\");\n        }\n        const accountInfos = yield connection.getMultipleAccountsInfo([\n            inputPoolToken.addr,\n            outputPoolToken.addr,\n        ]);\n        const tokens = accountInfos.map((info) => info != undefined ? (0, deserialize_account_1.deserializeAccount)(info.data) : undefined);\n        const inputTokenAccount = tokens[0], outputTokenAccount = tokens[1];\n        if (inputTokenAccount === undefined || outputTokenAccount === undefined) {\n            throw new Error(\"Unable to fetch accounts for specified tokens.\");\n        }\n        return {\n            inputTokenCount: new spl_token_1.u64(inputTokenAccount.amount),\n            outputTokenCount: new spl_token_1.u64(outputTokenAccount.amount),\n        };\n    });\n}\nexports.getTokenCount = getTokenCount;\n"]},"metadata":{},"sourceType":"script"}