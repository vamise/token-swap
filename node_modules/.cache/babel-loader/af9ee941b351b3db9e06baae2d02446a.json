{"ast":null,"code":"import _classCallCheck from \"/Users/mikovainio/FyFy/token-swap/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/mikovainio/FyFy/token-swap/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/mikovainio/FyFy/token-swap/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/mikovainio/FyFy/token-swap/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport EventEmitter from 'eventemitter3';\nexport { EventEmitter };\n/**\n * A wallet's readiness describes a series of states that the wallet can be in,\n * depending on what kind of wallet it is. An installable wallet (eg. a browser\n * extension like Phantom) might be `Installed` if we've found the Phantom API\n * in the global scope, or `NotDetected` otherwise. A loadable, zero-install\n * runtime (eg. Torus Wallet) might simply signal that it's `Loadable`. Use this\n * metadata to personalize the wallet list for each user (eg. to show their\n * installed wallets first).\n */\n\nexport var WalletReadyState;\n\n(function (WalletReadyState) {\n  /**\n   * User-installable wallets can typically be detected by scanning for an API\n   * that they've injected into the global context. If such an API is present,\n   * we consider the wallet to have been installed.\n   */\n  WalletReadyState[\"Installed\"] = \"Installed\";\n  WalletReadyState[\"NotDetected\"] = \"NotDetected\";\n  /**\n   * Loadable wallets are always available to you. Since you can load them at\n   * any time, it's meaningless to say that they have been detected.\n   */\n\n  WalletReadyState[\"Loadable\"] = \"Loadable\";\n  /**\n   * If a wallet is not supported on a given platform (eg. server-rendering, or\n   * mobile) then it will stay in the `Unsupported` state.\n   */\n\n  WalletReadyState[\"Unsupported\"] = \"Unsupported\";\n})(WalletReadyState || (WalletReadyState = {}));\n\nexport var BaseWalletAdapter = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(BaseWalletAdapter, _EventEmitter);\n\n  var _super = _createSuper(BaseWalletAdapter);\n\n  function BaseWalletAdapter() {\n    _classCallCheck(this, BaseWalletAdapter);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(BaseWalletAdapter, [{\n    key: \"connected\",\n    get: function get() {\n      return !!this.publicKey;\n    }\n  }]);\n\n  return BaseWalletAdapter;\n}(EventEmitter);\nexport function scopePollingDetectionStrategy(performDetection) {\n  if (typeof window === 'undefined' || typeof document === 'undefined') return;\n\n  if (document.readyState === 'complete') {\n    performDetection();\n    return;\n  }\n\n  function listener() {\n    window.removeEventListener('load', listener);\n    performDetection();\n  }\n\n  window.addEventListener('load', listener);\n}","map":{"version":3,"sources":["../../src/adapter.ts"],"names":[],"mappings":";;;;AACA,OAAO,YAAP,MAAyB,eAAzB;AAGA,SAAS,YAAT;AAqCA;;;;;;;;AAQG;;AACH,OAAA,IAAY,gBAAZ;;AAAA,CAAA,UAAY,gBAAZ,EAA4B;AACxB;;;;AAIG;AACH,EAAA,gBAAA,CAAA,WAAA,CAAA,GAAA,WAAA;AACA,EAAA,gBAAA,CAAA,aAAA,CAAA,GAAA,aAAA;AACA;;;AAGG;;AACH,EAAA,gBAAA,CAAA,UAAA,CAAA,GAAA,UAAA;AACA;;;AAGG;;AACH,EAAA,gBAAA,CAAA,aAAA,CAAA,GAAA,aAAA;AACH,CAlBD,EAAY,gBAAgB,KAAhB,gBAAgB,GAAA,EAAA,CAA5B;;AAoBA,WAAsB,iBAAtB;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,SAQI,eAAa;AACT,aAAO,CAAC,CAAC,KAAK,SAAd;AACH;AAVL;;AAAA;AAAA,EAAgD,YAAhD;AAqBA,OAAM,SAAU,6BAAV,CAAwC,gBAAxC,EAAuE;AACzE,MAAI,OAAO,MAAP,KAAkB,WAAlB,IAAiC,OAAO,QAAP,KAAoB,WAAzD,EAAsE;;AACtE,MAAI,QAAQ,CAAC,UAAT,KAAwB,UAA5B,EAAwC;AACpC,IAAA,gBAAgB;AAChB;AACH;;AACD,WAAS,QAAT,GAAiB;AACb,IAAA,MAAM,CAAC,mBAAP,CAA2B,MAA3B,EAAmC,QAAnC;AACA,IAAA,gBAAgB;AACnB;;AACD,EAAA,MAAM,CAAC,gBAAP,CAAwB,MAAxB,EAAgC,QAAhC;AACH","sourceRoot":"","sourcesContent":["import EventEmitter from 'eventemitter3';\nexport { EventEmitter };\n/**\n * A wallet's readiness describes a series of states that the wallet can be in,\n * depending on what kind of wallet it is. An installable wallet (eg. a browser\n * extension like Phantom) might be `Installed` if we've found the Phantom API\n * in the global scope, or `NotDetected` otherwise. A loadable, zero-install\n * runtime (eg. Torus Wallet) might simply signal that it's `Loadable`. Use this\n * metadata to personalize the wallet list for each user (eg. to show their\n * installed wallets first).\n */\nexport var WalletReadyState;\n(function (WalletReadyState) {\n    /**\n     * User-installable wallets can typically be detected by scanning for an API\n     * that they've injected into the global context. If such an API is present,\n     * we consider the wallet to have been installed.\n     */\n    WalletReadyState[\"Installed\"] = \"Installed\";\n    WalletReadyState[\"NotDetected\"] = \"NotDetected\";\n    /**\n     * Loadable wallets are always available to you. Since you can load them at\n     * any time, it's meaningless to say that they have been detected.\n     */\n    WalletReadyState[\"Loadable\"] = \"Loadable\";\n    /**\n     * If a wallet is not supported on a given platform (eg. server-rendering, or\n     * mobile) then it will stay in the `Unsupported` state.\n     */\n    WalletReadyState[\"Unsupported\"] = \"Unsupported\";\n})(WalletReadyState || (WalletReadyState = {}));\nexport class BaseWalletAdapter extends EventEmitter {\n    get connected() {\n        return !!this.publicKey;\n    }\n}\nexport function scopePollingDetectionStrategy(performDetection) {\n    if (typeof window === 'undefined' || typeof document === 'undefined')\n        return;\n    if (document.readyState === 'complete') {\n        performDetection();\n        return;\n    }\n    function listener() {\n        window.removeEventListener('load', listener);\n        performDetection();\n    }\n    window.addEventListener('load', listener);\n}\n//# sourceMappingURL=adapter.js.map"]},"metadata":{},"sourceType":"module"}