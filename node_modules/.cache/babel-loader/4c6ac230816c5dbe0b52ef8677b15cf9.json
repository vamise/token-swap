{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/mikovainio/FyFy/token-swap/node_modules/@babel/runtime/regenerator/index.js\");\n\nvar _slicedToArray = require(\"/Users/mikovainio/FyFy/token-swap/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createWithdrawInstruction = exports.createDepositInstruction = exports.createSwapInstruction = exports.createApprovalInstruction = void 0;\n\nvar spl_token_1 = require(\"@solana/spl-token\");\n\nvar spl_token_swap_1 = require(\"@solana/spl-token-swap\");\n\nvar web3_js_1 = require(\"@solana/web3.js\");\n\nvar createApprovalInstruction = function createApprovalInstruction(ownerAddress, approveAmount, tokenUserAddress, userTransferAuthority) {\n  userTransferAuthority = userTransferAuthority || new web3_js_1.Keypair();\n  var approvalInstruction = spl_token_1.Token.createApproveInstruction(spl_token_1.TOKEN_PROGRAM_ID, tokenUserAddress, userTransferAuthority.publicKey, ownerAddress, [], approveAmount);\n  var revokeInstruction = spl_token_1.Token.createRevokeInstruction(spl_token_1.TOKEN_PROGRAM_ID, tokenUserAddress, ownerAddress, []);\n  return {\n    userTransferAuthority: userTransferAuthority,\n    instructions: [approvalInstruction],\n    cleanupInstructions: [revokeInstruction],\n    signers: [userTransferAuthority]\n  };\n};\n\nexports.createApprovalInstruction = createApprovalInstruction;\n\nvar createSwapInstruction = function createSwapInstruction(poolParams, owner, inputToken, inputTokenUserAddress, outputToken, outputTokenUserAddress, amountIn, minimumAmountOut, userTransferAuthority, orcaTokenSwapId) {\n  return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var amountInU64, minimumAmountOutU64, _yield$web3_js_1$Publ, _yield$web3_js_1$Publ2, authorityForPoolAddress, swapInstruction;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            amountInU64 = amountIn;\n            minimumAmountOutU64 = minimumAmountOut;\n            _context.next = 4;\n            return web3_js_1.PublicKey.findProgramAddress([poolParams.address.toBuffer()], orcaTokenSwapId);\n\n          case 4:\n            _yield$web3_js_1$Publ = _context.sent;\n            _yield$web3_js_1$Publ2 = _slicedToArray(_yield$web3_js_1$Publ, 1);\n            authorityForPoolAddress = _yield$web3_js_1$Publ2[0];\n            swapInstruction = spl_token_swap_1.TokenSwap.swapInstruction(poolParams.address, authorityForPoolAddress, userTransferAuthority, inputTokenUserAddress, inputToken.addr, outputToken.addr, outputTokenUserAddress, poolParams.poolTokenMint, poolParams.feeAccount, null, orcaTokenSwapId, spl_token_1.TOKEN_PROGRAM_ID, amountInU64, minimumAmountOutU64);\n            return _context.abrupt(\"return\", {\n              instructions: [swapInstruction],\n              cleanupInstructions: [],\n              signers: owner.signer ? [owner.signer] : []\n            });\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n};\n\nexports.createSwapInstruction = createSwapInstruction;\n\nvar createDepositInstruction = function createDepositInstruction(poolParams, userTransferAuthorityPublicKey, userTokenAPublicKey, userTokenBPublicKey, userPoolTokenPublicKey, poolTokenAmount, maximumTokenA, maximumTokenB, tokenAPublicKey, tokenBPublicKey, orcaTokenSwapId, owner) {\n  return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var depositInstruction;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            depositInstruction = spl_token_swap_1.TokenSwap.depositAllTokenTypesInstruction(poolParams.address, poolParams.authority, userTransferAuthorityPublicKey, userTokenAPublicKey, userTokenBPublicKey, tokenAPublicKey, tokenBPublicKey, poolParams.poolTokenMint, userPoolTokenPublicKey, orcaTokenSwapId, spl_token_1.TOKEN_PROGRAM_ID, poolTokenAmount, maximumTokenA, maximumTokenB);\n            return _context2.abrupt(\"return\", {\n              instructions: [depositInstruction],\n              cleanupInstructions: [],\n              signers: owner.signer ? [owner.signer] : []\n            });\n\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n};\n\nexports.createDepositInstruction = createDepositInstruction;\n\nvar createWithdrawInstruction = function createWithdrawInstruction(poolParams, userTransferAuthorityPublicKey, userTokenAPublicKey, userTokenBPublicKey, userPoolTokenPublicKey, poolTokenAmount, minimumTokenA, minimumTokenB, tokenAPublicKey, tokenBPublicKey, orcaTokenSwapId, owner) {\n  return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n    var withdrawInstruction;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            withdrawInstruction = spl_token_swap_1.TokenSwap.withdrawAllTokenTypesInstruction(poolParams.address, poolParams.authority, userTransferAuthorityPublicKey, poolParams.poolTokenMint, poolParams.feeAccount, userPoolTokenPublicKey, tokenAPublicKey, tokenBPublicKey, userTokenAPublicKey, userTokenBPublicKey, orcaTokenSwapId, spl_token_1.TOKEN_PROGRAM_ID, poolTokenAmount, minimumTokenA, minimumTokenB);\n            return _context3.abrupt(\"return\", {\n              instructions: [withdrawInstruction],\n              cleanupInstructions: [],\n              signers: owner.signer ? [owner.signer] : []\n            });\n\n          case 2:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n};\n\nexports.createWithdrawInstruction = createWithdrawInstruction;","map":{"version":3,"sources":["/Users/mikovainio/FyFy/token-swap/node_modules/@orca-so/sdk/dist/public/utils/web3/instructions/pool-instructions.js"],"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","createWithdrawInstruction","createDepositInstruction","createSwapInstruction","createApprovalInstruction","spl_token_1","require","spl_token_swap_1","web3_js_1","ownerAddress","approveAmount","tokenUserAddress","userTransferAuthority","Keypair","approvalInstruction","Token","createApproveInstruction","TOKEN_PROGRAM_ID","publicKey","revokeInstruction","createRevokeInstruction","instructions","cleanupInstructions","signers","poolParams","owner","inputToken","inputTokenUserAddress","outputToken","outputTokenUserAddress","amountIn","minimumAmountOut","orcaTokenSwapId","amountInU64","minimumAmountOutU64","PublicKey","findProgramAddress","address","toBuffer","authorityForPoolAddress","swapInstruction","TokenSwap","addr","poolTokenMint","feeAccount","signer","userTransferAuthorityPublicKey","userTokenAPublicKey","userTokenBPublicKey","userPoolTokenPublicKey","poolTokenAmount","maximumTokenA","maximumTokenB","tokenAPublicKey","tokenBPublicKey","depositInstruction","depositAllTokenTypesInstruction","authority","minimumTokenA","minimumTokenB","withdrawInstruction","withdrawAllTokenTypesInstruction"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createWithdrawInstruction = exports.createDepositInstruction = exports.createSwapInstruction = exports.createApprovalInstruction = void 0;\nconst spl_token_1 = require(\"@solana/spl-token\");\nconst spl_token_swap_1 = require(\"@solana/spl-token-swap\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst createApprovalInstruction = (ownerAddress, approveAmount, tokenUserAddress, userTransferAuthority) => {\n    userTransferAuthority = userTransferAuthority || new web3_js_1.Keypair();\n    const approvalInstruction = spl_token_1.Token.createApproveInstruction(spl_token_1.TOKEN_PROGRAM_ID, tokenUserAddress, userTransferAuthority.publicKey, ownerAddress, [], approveAmount);\n    const revokeInstruction = spl_token_1.Token.createRevokeInstruction(spl_token_1.TOKEN_PROGRAM_ID, tokenUserAddress, ownerAddress, []);\n    return {\n        userTransferAuthority: userTransferAuthority,\n        instructions: [approvalInstruction],\n        cleanupInstructions: [revokeInstruction],\n        signers: [userTransferAuthority],\n    };\n};\nexports.createApprovalInstruction = createApprovalInstruction;\nconst createSwapInstruction = (poolParams, owner, inputToken, inputTokenUserAddress, outputToken, outputTokenUserAddress, amountIn, minimumAmountOut, userTransferAuthority, orcaTokenSwapId) => __awaiter(void 0, void 0, void 0, function* () {\n    const amountInU64 = amountIn;\n    const minimumAmountOutU64 = minimumAmountOut;\n    const [authorityForPoolAddress] = yield web3_js_1.PublicKey.findProgramAddress([poolParams.address.toBuffer()], orcaTokenSwapId);\n    const swapInstruction = spl_token_swap_1.TokenSwap.swapInstruction(poolParams.address, authorityForPoolAddress, userTransferAuthority, inputTokenUserAddress, inputToken.addr, outputToken.addr, outputTokenUserAddress, poolParams.poolTokenMint, poolParams.feeAccount, null, orcaTokenSwapId, spl_token_1.TOKEN_PROGRAM_ID, amountInU64, minimumAmountOutU64);\n    return {\n        instructions: [swapInstruction],\n        cleanupInstructions: [],\n        signers: owner.signer ? [owner.signer] : [],\n    };\n});\nexports.createSwapInstruction = createSwapInstruction;\nconst createDepositInstruction = (poolParams, userTransferAuthorityPublicKey, userTokenAPublicKey, userTokenBPublicKey, userPoolTokenPublicKey, poolTokenAmount, maximumTokenA, maximumTokenB, tokenAPublicKey, tokenBPublicKey, orcaTokenSwapId, owner) => __awaiter(void 0, void 0, void 0, function* () {\n    const depositInstruction = spl_token_swap_1.TokenSwap.depositAllTokenTypesInstruction(poolParams.address, poolParams.authority, userTransferAuthorityPublicKey, userTokenAPublicKey, userTokenBPublicKey, tokenAPublicKey, tokenBPublicKey, poolParams.poolTokenMint, userPoolTokenPublicKey, orcaTokenSwapId, spl_token_1.TOKEN_PROGRAM_ID, poolTokenAmount, maximumTokenA, maximumTokenB);\n    return {\n        instructions: [depositInstruction],\n        cleanupInstructions: [],\n        signers: owner.signer ? [owner.signer] : [],\n    };\n});\nexports.createDepositInstruction = createDepositInstruction;\nconst createWithdrawInstruction = (poolParams, userTransferAuthorityPublicKey, userTokenAPublicKey, userTokenBPublicKey, userPoolTokenPublicKey, poolTokenAmount, minimumTokenA, minimumTokenB, tokenAPublicKey, tokenBPublicKey, orcaTokenSwapId, owner) => __awaiter(void 0, void 0, void 0, function* () {\n    const withdrawInstruction = spl_token_swap_1.TokenSwap.withdrawAllTokenTypesInstruction(poolParams.address, poolParams.authority, userTransferAuthorityPublicKey, poolParams.poolTokenMint, poolParams.feeAccount, userPoolTokenPublicKey, tokenAPublicKey, tokenBPublicKey, userTokenAPublicKey, userTokenBPublicKey, orcaTokenSwapId, spl_token_1.TOKEN_PROGRAM_ID, poolTokenAmount, minimumTokenA, minimumTokenB);\n    return {\n        instructions: [withdrawInstruction],\n        cleanupInstructions: [],\n        signers: owner.signer ? [owner.signer] : [],\n    };\n});\nexports.createWithdrawInstruction = createWithdrawInstruction;\n"]},"metadata":{},"sourceType":"script"}