{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/mikovainio/FyFy/token-swap/node_modules/@babel/runtime/regenerator/index.js\");\n\nvar _classCallCheck = require(\"/Users/mikovainio/FyFy/token-swap/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/Users/mikovainio/FyFy/token-swap/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OrcaFarmImpl = void 0;\n\nvar aquafarm_1 = require(\"@orca-so/aquafarm\");\n\nvar spl_token_1 = require(\"@solana/spl-token\");\n\nvar decimal_js_1 = __importDefault(require(\"decimal.js\"));\n\nvar __1 = require(\"../../..\");\n\nvar public_1 = require(\"../../../public/\");\n\nvar farm_instructions_1 = require(\"../../../public/utils/web3/instructions/farm-instructions\");\n\nvar pool_instructions_1 = require(\"../../../public/utils/web3/instructions/pool-instructions\");\n\nvar key_utils_1 = require(\"../../../public/utils/web3/key-utils\");\n\nvar OrcaFarmImpl = /*#__PURE__*/function () {\n  function OrcaFarmImpl(connection, config) {\n    _classCallCheck(this, OrcaFarmImpl);\n\n    this.connection = connection;\n    this.farmParams = config;\n  }\n\n  _createClass(OrcaFarmImpl, [{\n    key: \"getFarmBalance\",\n    value: function getFarmBalance(owner) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var address, accountInfo, result;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return (0, __1.deriveAssociatedTokenAddress)(owner, this.farmParams.farmTokenMint);\n\n              case 2:\n                address = _context.sent;\n                _context.next = 5;\n                return this.connection.getAccountInfo(address);\n\n              case 5:\n                accountInfo = _context.sent;\n\n                if (!(accountInfo == undefined)) {\n                  _context.next = 8;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", __1.OrcaU64.fromNumber(0, this.farmParams.baseTokenDecimals));\n\n              case 8:\n                result = (0, __1.deserializeAccount)(accountInfo === null || accountInfo === void 0 ? void 0 : accountInfo.data);\n\n                if (!(result == undefined)) {\n                  _context.next = 11;\n                  break;\n                }\n\n                throw new Error(\"Failed to parse user account for LP token.\");\n\n              case 11:\n                return _context.abrupt(\"return\", __1.OrcaU64.fromU64(result.amount, this.farmParams.baseTokenDecimals));\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n  }, {\n    key: \"getFarmSupply\",\n    value: function getFarmSupply() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var context, amt;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.connection.getTokenSupply(this.farmParams.farmTokenMint);\n\n              case 2:\n                context = _context2.sent;\n                amt = new spl_token_1.u64(context.value.amount);\n                return _context2.abrupt(\"return\", __1.OrcaU64.fromU64(amt, this.farmParams.baseTokenDecimals));\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }\n  }, {\n    key: \"deposit\",\n    value: function deposit(owner, baseTokenAmount) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var _owner, ownerAddress, baseTokenAmount_U64, _this$farmParams, farmAddress, rewardTokenMint, userFarmPublicKey, globalFarms, userFarms, farm, initUserFarmInstruction, _a, userFarmTokenPublicKey, resolveFarmTokenInstructions, _b, userRewardTokenPublicKey, resolveRewardTokenInstructions, _c, userBaseTokenPublicKey, resolveBaseTokenInstructions, _d, userTransferAuthority, transferBaseTokenInstruction, convertToFarmTokens;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _owner = new key_utils_1.Owner(owner);\n                ownerAddress = _owner.publicKey;\n                baseTokenAmount_U64 = __1.U64Utils.toFarmU64(baseTokenAmount, this.farmParams, \"baseTokenAmount\");\n                _this$farmParams = this.farmParams, farmAddress = _this$farmParams.address, rewardTokenMint = _this$farmParams.rewardTokenMint;\n                _context3.next = 6;\n                return (0, aquafarm_1.getUserFarmAddress)(farmAddress, ownerAddress, spl_token_1.TOKEN_PROGRAM_ID, __1.ORCA_FARM_ID);\n\n              case 6:\n                userFarmPublicKey = _context3.sent[0];\n                _context3.next = 9;\n                return (0, aquafarm_1.fetchGlobalFarms)(this.connection, [farmAddress], __1.ORCA_FARM_ID);\n\n              case 9:\n                globalFarms = _context3.sent;\n                _context3.next = 12;\n                return (0, aquafarm_1.fetchUserFarms)(this.connection, ownerAddress, [farmAddress], __1.ORCA_FARM_ID);\n\n              case 12:\n                userFarms = _context3.sent;\n\n                if (globalFarms) {\n                  _context3.next = 15;\n                  break;\n                }\n\n                throw new Error(\"Failed to get globalFarms information\");\n\n              case 15:\n                farm = new aquafarm_1.Aquafarm(globalFarms[0], __1.ORCA_FARM_ID, userFarms && userFarms[0]); // If the user lacks the user farm, create it\n\n                _context3.next = 18;\n                return (0, farm_instructions_1.createInitUserFarmInstruction)(farm, userFarmPublicKey, _owner);\n\n              case 18:\n                initUserFarmInstruction = _context3.sent;\n                _context3.next = 21;\n                return (0, __1.resolveOrCreateAssociatedTokenAddress)(this.connection, _owner, farm.globalFarm.farmTokenMint);\n\n              case 21:\n                _a = _context3.sent;\n                userFarmTokenPublicKey = _a.address;\n                resolveFarmTokenInstructions = __rest(_a, [\"address\"]);\n                _context3.next = 26;\n                return (0, __1.resolveOrCreateAssociatedTokenAddress)(this.connection, _owner, rewardTokenMint);\n\n              case 26:\n                _b = _context3.sent;\n                userRewardTokenPublicKey = _b.address;\n                resolveRewardTokenInstructions = __rest(_b, [\"address\"]);\n                _context3.next = 31;\n                return (0, __1.resolveOrCreateAssociatedTokenAddress)(this.connection, _owner, this.farmParams.baseTokenMint);\n\n              case 31:\n                _c = _context3.sent;\n                userBaseTokenPublicKey = _c.address;\n                resolveBaseTokenInstructions = __rest(_c, [\"address\"]);\n                // Approve transfer of base token to be converted to farm tokens\n                _d = (0, pool_instructions_1.createApprovalInstruction)(ownerAddress, baseTokenAmount_U64, userBaseTokenPublicKey), userTransferAuthority = _d.userTransferAuthority, transferBaseTokenInstruction = __rest(_d, [\"userTransferAuthority\"]); // Convert base tokens to farm tokens\n\n                _context3.next = 37;\n                return (0, farm_instructions_1.createFarmConvertTokensInstruction)(farm, userTransferAuthority.publicKey, userBaseTokenPublicKey, userFarmTokenPublicKey, userRewardTokenPublicKey, baseTokenAmount_U64, userFarmPublicKey, _owner);\n\n              case 37:\n                convertToFarmTokens = _context3.sent;\n                _context3.next = 40;\n                return new __1.TransactionBuilder(this.connection, ownerAddress, _owner).addInstruction(initUserFarmInstruction).addInstruction(resolveFarmTokenInstructions).addInstruction(resolveBaseTokenInstructions).addInstruction(resolveRewardTokenInstructions).addInstruction(transferBaseTokenInstruction).addInstruction(convertToFarmTokens).build();\n\n              case 40:\n                return _context3.abrupt(\"return\", _context3.sent);\n\n              case 41:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    }\n  }, {\n    key: \"withdraw\",\n    value: function withdraw(owner, baseTokenAmount) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var _owner, ownerAddress, baseTokenAmount_U64, _this$farmParams2, farmAddress, rewardTokenMint, userFarmPublicKey, globalFarms, userFarms, farm, _a, userFarmTokenPublicKey, resolveFarmTokenInstructions, _b, userRewardTokenPublicKey, resolveRewardTokenInstructions, _c, userBaseTokenPublicKey, resolveBaseTokenInstructions, _d, userTransferAuthority, transferFarmTokenInstruction, revertFromFarmTokens;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _owner = new key_utils_1.Owner(owner);\n                ownerAddress = _owner.publicKey;\n                baseTokenAmount_U64 = __1.U64Utils.toFarmU64(baseTokenAmount, this.farmParams, \"baseTokenAmount\");\n                _this$farmParams2 = this.farmParams, farmAddress = _this$farmParams2.address, rewardTokenMint = _this$farmParams2.rewardTokenMint;\n                _context4.next = 6;\n                return (0, aquafarm_1.getUserFarmAddress)(farmAddress, ownerAddress, spl_token_1.TOKEN_PROGRAM_ID, __1.ORCA_FARM_ID);\n\n              case 6:\n                userFarmPublicKey = _context4.sent[0];\n                _context4.next = 9;\n                return (0, aquafarm_1.fetchGlobalFarms)(this.connection, [farmAddress], __1.ORCA_FARM_ID);\n\n              case 9:\n                globalFarms = _context4.sent;\n                _context4.next = 12;\n                return (0, aquafarm_1.fetchUserFarms)(this.connection, ownerAddress, [farmAddress], __1.ORCA_FARM_ID);\n\n              case 12:\n                userFarms = _context4.sent;\n\n                if (globalFarms) {\n                  _context4.next = 15;\n                  break;\n                }\n\n                throw new Error(\"Failed to get globalFarms information\");\n\n              case 15:\n                farm = new aquafarm_1.Aquafarm(globalFarms[0], __1.ORCA_FARM_ID, userFarms && userFarms[0]);\n\n                if (farm.isUserFarmInitialized()) {\n                  _context4.next = 18;\n                  break;\n                }\n\n                throw new Error(\"Failed to get userFarm information. Warning: withdraw from deposit address\");\n\n              case 18:\n                _context4.next = 20;\n                return (0, __1.resolveOrCreateAssociatedTokenAddress)(this.connection, _owner, farm.globalFarm.farmTokenMint);\n\n              case 20:\n                _a = _context4.sent;\n                userFarmTokenPublicKey = _a.address;\n                resolveFarmTokenInstructions = __rest(_a, [\"address\"]);\n                _context4.next = 25;\n                return (0, __1.resolveOrCreateAssociatedTokenAddress)(this.connection, _owner, rewardTokenMint);\n\n              case 25:\n                _b = _context4.sent;\n                userRewardTokenPublicKey = _b.address;\n                resolveRewardTokenInstructions = __rest(_b, [\"address\"]);\n                _context4.next = 30;\n                return (0, __1.resolveOrCreateAssociatedTokenAddress)(this.connection, _owner, this.farmParams.baseTokenMint);\n\n              case 30:\n                _c = _context4.sent;\n                userBaseTokenPublicKey = _c.address;\n                resolveBaseTokenInstructions = __rest(_c, [\"address\"]);\n                // Approve transfer of farm tokens to be reverted to base tokens\n                _d = (0, pool_instructions_1.createApprovalInstruction)(ownerAddress, baseTokenAmount_U64, userFarmTokenPublicKey), userTransferAuthority = _d.userTransferAuthority, transferFarmTokenInstruction = __rest(_d, [\"userTransferAuthority\"]); // Revert farm tokens to base tokens\n\n                _context4.next = 36;\n                return (0, farm_instructions_1.createFarmRevertTokensInstruction)(farm, userTransferAuthority.publicKey, userBaseTokenPublicKey, userFarmTokenPublicKey, userRewardTokenPublicKey, baseTokenAmount_U64, _owner);\n\n              case 36:\n                revertFromFarmTokens = _context4.sent;\n                _context4.next = 39;\n                return new __1.TransactionBuilder(this.connection, ownerAddress, _owner).addInstruction(resolveFarmTokenInstructions).addInstruction(resolveRewardTokenInstructions).addInstruction(resolveBaseTokenInstructions).addInstruction(transferFarmTokenInstruction).addInstruction(revertFromFarmTokens).build();\n\n              case 39:\n                return _context4.abrupt(\"return\", _context4.sent);\n\n              case 40:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n    }\n  }, {\n    key: \"getHarvestableAmount\",\n    value: function getHarvestableAmount(ownerPublicKey) {\n      var _a;\n\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var _this$farmParams3, farmAddress, baseTokenDecimals, globalFarms, userFarms, farm, farmSupply, harvestableAmount;\n\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _this$farmParams3 = this.farmParams, farmAddress = _this$farmParams3.address, baseTokenDecimals = _this$farmParams3.baseTokenDecimals;\n                _context5.next = 3;\n                return (0, aquafarm_1.fetchGlobalFarms)(this.connection, [farmAddress], __1.ORCA_FARM_ID);\n\n              case 3:\n                globalFarms = _context5.sent;\n                _context5.next = 6;\n                return (0, aquafarm_1.fetchUserFarms)(this.connection, ownerPublicKey, [farmAddress], __1.ORCA_FARM_ID);\n\n              case 6:\n                userFarms = _context5.sent;\n\n                if (globalFarms) {\n                  _context5.next = 9;\n                  break;\n                }\n\n                throw new Error(\"Failed to get globalFarms information\");\n\n              case 9:\n                farm = new aquafarm_1.Aquafarm(globalFarms[0], __1.ORCA_FARM_ID, userFarms && userFarms[0]);\n\n                if (farm.isUserFarmInitialized()) {\n                  _context5.next = 12;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", __1.OrcaU64.fromU64(public_1.ZERO, baseTokenDecimals));\n\n              case 12:\n                _context5.next = 14;\n                return this.getFarmSupply();\n\n              case 14:\n                farmSupply = _context5.sent;\n                harvestableAmount = (_a = farm.getCurrentHarvestableAmount(farmSupply.toU64())) !== null && _a !== void 0 ? _a : public_1.ZERO;\n                return _context5.abrupt(\"return\", __1.OrcaU64.fromU64(harvestableAmount, baseTokenDecimals));\n\n              case 17:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n    }\n  }, {\n    key: \"harvest\",\n    value: function harvest(owner) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        var _owner, ownerAddress, _this$farmParams4, farmAddress, rewardTokenMint, globalFarms, userFarms, farm, _a, userRewardTokenPublicKey, resolveRewardTokenInstructions, harvestRewardInstruction;\n\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _owner = new key_utils_1.Owner(owner);\n                ownerAddress = _owner.publicKey;\n                _this$farmParams4 = this.farmParams, farmAddress = _this$farmParams4.address, rewardTokenMint = _this$farmParams4.rewardTokenMint;\n                _context6.next = 5;\n                return (0, aquafarm_1.fetchGlobalFarms)(this.connection, [farmAddress], __1.ORCA_FARM_ID);\n\n              case 5:\n                globalFarms = _context6.sent;\n                _context6.next = 8;\n                return (0, aquafarm_1.fetchUserFarms)(this.connection, ownerAddress, [farmAddress], __1.ORCA_FARM_ID);\n\n              case 8:\n                userFarms = _context6.sent;\n\n                if (globalFarms) {\n                  _context6.next = 11;\n                  break;\n                }\n\n                throw new Error(\"Failed to get globalFarms information\");\n\n              case 11:\n                farm = new aquafarm_1.Aquafarm(globalFarms[0], __1.ORCA_FARM_ID, userFarms && userFarms[0]);\n\n                if (farm.isUserFarmInitialized()) {\n                  _context6.next = 14;\n                  break;\n                }\n\n                throw new Error(\"Failed to get userFarm information\");\n\n              case 14:\n                _context6.next = 16;\n                return (0, __1.resolveOrCreateAssociatedTokenAddress)(this.connection, _owner, rewardTokenMint);\n\n              case 16:\n                _a = _context6.sent;\n                userRewardTokenPublicKey = _a.address;\n                resolveRewardTokenInstructions = __rest(_a, [\"address\"]);\n                _context6.next = 21;\n                return (0, farm_instructions_1.createFarmHarvestRewardInstruction)(farm, userRewardTokenPublicKey, _owner);\n\n              case 21:\n                harvestRewardInstruction = _context6.sent;\n                _context6.next = 24;\n                return new __1.TransactionBuilder(this.connection, ownerAddress, _owner).addInstruction(resolveRewardTokenInstructions).addInstruction(harvestRewardInstruction).build();\n\n              case 24:\n                return _context6.abrupt(\"return\", _context6.sent);\n\n              case 25:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n    }\n  }, {\n    key: \"getDailyEmissions\",\n    value: function getDailyEmissions() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n        var _this$farmParams5, address, rewardTokenDecimals, globalFarms, value;\n\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _this$farmParams5 = this.farmParams, address = _this$farmParams5.address, rewardTokenDecimals = _this$farmParams5.rewardTokenDecimals;\n                _context7.next = 3;\n                return (0, aquafarm_1.fetchGlobalFarms)(this.connection, [address], __1.ORCA_FARM_ID);\n\n              case 3:\n                globalFarms = _context7.sent;\n\n                if (globalFarms) {\n                  _context7.next = 6;\n                  break;\n                }\n\n                throw new Error(\"Failed to get globalFarms information\");\n\n              case 6:\n                value = new decimal_js_1.default(globalFarms[0].emissionsPerSecondNumerator.toString()).mul(60 * 60 * 24).div(globalFarms[0].emissionsPerSecondDenominator.toString()).div(new decimal_js_1.default(10).pow(rewardTokenDecimals));\n                return _context7.abrupt(\"return\", __1.OrcaU64.fromDecimal(value, rewardTokenDecimals));\n\n              case 8:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n    }\n  }]);\n\n  return OrcaFarmImpl;\n}();\n\nexports.OrcaFarmImpl = OrcaFarmImpl;","map":{"version":3,"sources":["/Users/mikovainio/FyFy/token-swap/node_modules/@orca-so/sdk/dist/model/orca/farm/orca-farm.js"],"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","__rest","s","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","__importDefault","mod","__esModule","defineProperty","exports","OrcaFarmImpl","aquafarm_1","require","spl_token_1","decimal_js_1","__1","public_1","farm_instructions_1","pool_instructions_1","key_utils_1","connection","config","farmParams","owner","deriveAssociatedTokenAddress","farmTokenMint","address","getAccountInfo","accountInfo","undefined","OrcaU64","fromNumber","baseTokenDecimals","deserializeAccount","data","Error","fromU64","amount","getTokenSupply","context","amt","u64","baseTokenAmount","_owner","Owner","ownerAddress","publicKey","baseTokenAmount_U64","U64Utils","toFarmU64","farmAddress","rewardTokenMint","getUserFarmAddress","TOKEN_PROGRAM_ID","ORCA_FARM_ID","userFarmPublicKey","fetchGlobalFarms","globalFarms","fetchUserFarms","userFarms","farm","Aquafarm","createInitUserFarmInstruction","initUserFarmInstruction","resolveOrCreateAssociatedTokenAddress","globalFarm","_a","userFarmTokenPublicKey","resolveFarmTokenInstructions","_b","userRewardTokenPublicKey","resolveRewardTokenInstructions","baseTokenMint","_c","userBaseTokenPublicKey","resolveBaseTokenInstructions","_d","createApprovalInstruction","userTransferAuthority","transferBaseTokenInstruction","createFarmConvertTokensInstruction","convertToFarmTokens","TransactionBuilder","addInstruction","build","isUserFarmInitialized","transferFarmTokenInstruction","createFarmRevertTokensInstruction","revertFromFarmTokens","ownerPublicKey","ZERO","getFarmSupply","farmSupply","harvestableAmount","getCurrentHarvestableAmount","toU64","createFarmHarvestRewardInstruction","harvestRewardInstruction","rewardTokenDecimals","default","emissionsPerSecondNumerator","toString","mul","div","emissionsPerSecondDenominator","pow","fromDecimal"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OrcaFarmImpl = void 0;\nconst aquafarm_1 = require(\"@orca-so/aquafarm\");\nconst spl_token_1 = require(\"@solana/spl-token\");\nconst decimal_js_1 = __importDefault(require(\"decimal.js\"));\nconst __1 = require(\"../../..\");\nconst public_1 = require(\"../../../public/\");\nconst farm_instructions_1 = require(\"../../../public/utils/web3/instructions/farm-instructions\");\nconst pool_instructions_1 = require(\"../../../public/utils/web3/instructions/pool-instructions\");\nconst key_utils_1 = require(\"../../../public/utils/web3/key-utils\");\nclass OrcaFarmImpl {\n    constructor(connection, config) {\n        this.connection = connection;\n        this.farmParams = config;\n    }\n    getFarmBalance(owner) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const address = yield (0, __1.deriveAssociatedTokenAddress)(owner, this.farmParams.farmTokenMint);\n            const accountInfo = yield this.connection.getAccountInfo(address);\n            // User does not have a balance for this account\n            if (accountInfo == undefined) {\n                return __1.OrcaU64.fromNumber(0, this.farmParams.baseTokenDecimals);\n            }\n            const result = (0, __1.deserializeAccount)(accountInfo === null || accountInfo === void 0 ? void 0 : accountInfo.data);\n            if (result == undefined) {\n                throw new Error(\"Failed to parse user account for LP token.\");\n            }\n            return __1.OrcaU64.fromU64(result.amount, this.farmParams.baseTokenDecimals);\n        });\n    }\n    getFarmSupply() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const context = yield this.connection.getTokenSupply(this.farmParams.farmTokenMint);\n            const amt = new spl_token_1.u64(context.value.amount);\n            return __1.OrcaU64.fromU64(amt, this.farmParams.baseTokenDecimals);\n        });\n    }\n    deposit(owner, baseTokenAmount) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const _owner = new key_utils_1.Owner(owner);\n            const ownerAddress = _owner.publicKey;\n            const baseTokenAmount_U64 = __1.U64Utils.toFarmU64(baseTokenAmount, this.farmParams, \"baseTokenAmount\");\n            const { address: farmAddress, rewardTokenMint } = this.farmParams;\n            const userFarmPublicKey = (yield (0, aquafarm_1.getUserFarmAddress)(farmAddress, ownerAddress, spl_token_1.TOKEN_PROGRAM_ID, __1.ORCA_FARM_ID))[0];\n            const globalFarms = yield (0, aquafarm_1.fetchGlobalFarms)(this.connection, [farmAddress], __1.ORCA_FARM_ID);\n            const userFarms = yield (0, aquafarm_1.fetchUserFarms)(this.connection, ownerAddress, [farmAddress], __1.ORCA_FARM_ID);\n            if (!globalFarms) {\n                throw new Error(\"Failed to get globalFarms information\");\n            }\n            const farm = new aquafarm_1.Aquafarm(globalFarms[0], __1.ORCA_FARM_ID, userFarms && userFarms[0]);\n            // If the user lacks the user farm, create it\n            const initUserFarmInstruction = yield (0, farm_instructions_1.createInitUserFarmInstruction)(farm, userFarmPublicKey, _owner);\n            // If the user lacks the farm token account, create it\n            const _a = yield (0, __1.resolveOrCreateAssociatedTokenAddress)(this.connection, _owner, farm.globalFarm.farmTokenMint), { address: userFarmTokenPublicKey } = _a, resolveFarmTokenInstructions = __rest(_a, [\"address\"]);\n            // If the user lacks the reward token account, create it\n            const _b = yield (0, __1.resolveOrCreateAssociatedTokenAddress)(this.connection, _owner, rewardTokenMint), { address: userRewardTokenPublicKey } = _b, resolveRewardTokenInstructions = __rest(_b, [\"address\"]);\n            // If the user lacks the base token account, create it\n            const _c = yield (0, __1.resolveOrCreateAssociatedTokenAddress)(this.connection, _owner, this.farmParams.baseTokenMint), { address: userBaseTokenPublicKey } = _c, resolveBaseTokenInstructions = __rest(_c, [\"address\"]);\n            // Approve transfer of base token to be converted to farm tokens\n            const _d = (0, pool_instructions_1.createApprovalInstruction)(ownerAddress, baseTokenAmount_U64, userBaseTokenPublicKey), { userTransferAuthority } = _d, transferBaseTokenInstruction = __rest(_d, [\"userTransferAuthority\"]);\n            // Convert base tokens to farm tokens\n            const convertToFarmTokens = yield (0, farm_instructions_1.createFarmConvertTokensInstruction)(farm, userTransferAuthority.publicKey, userBaseTokenPublicKey, userFarmTokenPublicKey, userRewardTokenPublicKey, baseTokenAmount_U64, userFarmPublicKey, _owner);\n            return yield new __1.TransactionBuilder(this.connection, ownerAddress, _owner)\n                .addInstruction(initUserFarmInstruction)\n                .addInstruction(resolveFarmTokenInstructions)\n                .addInstruction(resolveBaseTokenInstructions)\n                .addInstruction(resolveRewardTokenInstructions)\n                .addInstruction(transferBaseTokenInstruction)\n                .addInstruction(convertToFarmTokens)\n                .build();\n        });\n    }\n    withdraw(owner, baseTokenAmount) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const _owner = new key_utils_1.Owner(owner);\n            const ownerAddress = _owner.publicKey;\n            const baseTokenAmount_U64 = __1.U64Utils.toFarmU64(baseTokenAmount, this.farmParams, \"baseTokenAmount\");\n            const { address: farmAddress, rewardTokenMint } = this.farmParams;\n            const userFarmPublicKey = (yield (0, aquafarm_1.getUserFarmAddress)(farmAddress, ownerAddress, spl_token_1.TOKEN_PROGRAM_ID, __1.ORCA_FARM_ID))[0];\n            const globalFarms = yield (0, aquafarm_1.fetchGlobalFarms)(this.connection, [farmAddress], __1.ORCA_FARM_ID);\n            const userFarms = yield (0, aquafarm_1.fetchUserFarms)(this.connection, ownerAddress, [farmAddress], __1.ORCA_FARM_ID);\n            if (!globalFarms) {\n                throw new Error(\"Failed to get globalFarms information\");\n            }\n            const farm = new aquafarm_1.Aquafarm(globalFarms[0], __1.ORCA_FARM_ID, userFarms && userFarms[0]);\n            if (!farm.isUserFarmInitialized()) {\n                throw new Error(\"Failed to get userFarm information. Warning: withdraw from deposit address\");\n            }\n            // If the user lacks the farm token account, create it\n            const _a = yield (0, __1.resolveOrCreateAssociatedTokenAddress)(this.connection, _owner, farm.globalFarm.farmTokenMint), { address: userFarmTokenPublicKey } = _a, resolveFarmTokenInstructions = __rest(_a, [\"address\"]);\n            // If the user lacks the reward token account, create it\n            const _b = yield (0, __1.resolveOrCreateAssociatedTokenAddress)(this.connection, _owner, rewardTokenMint), { address: userRewardTokenPublicKey } = _b, resolveRewardTokenInstructions = __rest(_b, [\"address\"]);\n            // Get user's baseToken token account\n            const _c = yield (0, __1.resolveOrCreateAssociatedTokenAddress)(this.connection, _owner, this.farmParams.baseTokenMint), { address: userBaseTokenPublicKey } = _c, resolveBaseTokenInstructions = __rest(_c, [\"address\"]);\n            // Approve transfer of farm tokens to be reverted to base tokens\n            const _d = (0, pool_instructions_1.createApprovalInstruction)(ownerAddress, baseTokenAmount_U64, userFarmTokenPublicKey), { userTransferAuthority } = _d, transferFarmTokenInstruction = __rest(_d, [\"userTransferAuthority\"]);\n            // Revert farm tokens to base tokens\n            const revertFromFarmTokens = yield (0, farm_instructions_1.createFarmRevertTokensInstruction)(farm, userTransferAuthority.publicKey, userBaseTokenPublicKey, userFarmTokenPublicKey, userRewardTokenPublicKey, baseTokenAmount_U64, _owner);\n            return yield new __1.TransactionBuilder(this.connection, ownerAddress, _owner)\n                .addInstruction(resolveFarmTokenInstructions)\n                .addInstruction(resolveRewardTokenInstructions)\n                .addInstruction(resolveBaseTokenInstructions)\n                .addInstruction(transferFarmTokenInstruction)\n                .addInstruction(revertFromFarmTokens)\n                .build();\n        });\n    }\n    getHarvestableAmount(ownerPublicKey) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const { address: farmAddress, baseTokenDecimals } = this.farmParams;\n            const globalFarms = yield (0, aquafarm_1.fetchGlobalFarms)(this.connection, [farmAddress], __1.ORCA_FARM_ID);\n            const userFarms = yield (0, aquafarm_1.fetchUserFarms)(this.connection, ownerPublicKey, [farmAddress], __1.ORCA_FARM_ID);\n            if (!globalFarms) {\n                throw new Error(\"Failed to get globalFarms information\");\n            }\n            const farm = new aquafarm_1.Aquafarm(globalFarms[0], __1.ORCA_FARM_ID, userFarms && userFarms[0]);\n            if (!farm.isUserFarmInitialized()) {\n                return __1.OrcaU64.fromU64(public_1.ZERO, baseTokenDecimals);\n            }\n            const farmSupply = yield this.getFarmSupply();\n            const harvestableAmount = (_a = farm.getCurrentHarvestableAmount(farmSupply.toU64())) !== null && _a !== void 0 ? _a : public_1.ZERO;\n            return __1.OrcaU64.fromU64(harvestableAmount, baseTokenDecimals);\n        });\n    }\n    harvest(owner) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const _owner = new key_utils_1.Owner(owner);\n            const ownerAddress = _owner.publicKey;\n            const { address: farmAddress, rewardTokenMint } = this.farmParams;\n            const globalFarms = yield (0, aquafarm_1.fetchGlobalFarms)(this.connection, [farmAddress], __1.ORCA_FARM_ID);\n            const userFarms = yield (0, aquafarm_1.fetchUserFarms)(this.connection, ownerAddress, [farmAddress], __1.ORCA_FARM_ID);\n            if (!globalFarms) {\n                throw new Error(\"Failed to get globalFarms information\");\n            }\n            const farm = new aquafarm_1.Aquafarm(globalFarms[0], __1.ORCA_FARM_ID, userFarms && userFarms[0]);\n            if (!farm.isUserFarmInitialized()) {\n                throw new Error(\"Failed to get userFarm information\");\n            }\n            // If the user lacks the reward token account, create it\n            const _a = yield (0, __1.resolveOrCreateAssociatedTokenAddress)(this.connection, _owner, rewardTokenMint), { address: userRewardTokenPublicKey } = _a, resolveRewardTokenInstructions = __rest(_a, [\"address\"]);\n            const harvestRewardInstruction = yield (0, farm_instructions_1.createFarmHarvestRewardInstruction)(farm, userRewardTokenPublicKey, _owner);\n            return yield new __1.TransactionBuilder(this.connection, ownerAddress, _owner)\n                .addInstruction(resolveRewardTokenInstructions)\n                .addInstruction(harvestRewardInstruction)\n                .build();\n        });\n    }\n    getDailyEmissions() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { address, rewardTokenDecimals } = this.farmParams;\n            const globalFarms = yield (0, aquafarm_1.fetchGlobalFarms)(this.connection, [address], __1.ORCA_FARM_ID);\n            if (!globalFarms) {\n                throw new Error(\"Failed to get globalFarms information\");\n            }\n            const value = new decimal_js_1.default(globalFarms[0].emissionsPerSecondNumerator.toString())\n                .mul(60 * 60 * 24)\n                .div(globalFarms[0].emissionsPerSecondDenominator.toString())\n                .div(new decimal_js_1.default(10).pow(rewardTokenDecimals));\n            return __1.OrcaU64.fromDecimal(value, rewardTokenDecimals);\n        });\n    }\n}\nexports.OrcaFarmImpl = OrcaFarmImpl;\n"]},"metadata":{},"sourceType":"script"}