{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/mikovainio/FyFy/token-swap/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _slicedToArray from \"/Users/mikovainio/FyFy/token-swap/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _asyncToGenerator from \"/Users/mikovainio/FyFy/token-swap/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _wrapNativeSuper from \"/Users/mikovainio/FyFy/token-swap/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js\";\nimport _classCallCheck from \"/Users/mikovainio/FyFy/token-swap/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/mikovainio/FyFy/token-swap/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/mikovainio/FyFy/token-swap/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/mikovainio/FyFy/token-swap/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/mikovainio/FyFy/token-swap/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _regeneratorRuntime from \"/Users/mikovainio/FyFy/token-swap/node_modules/@babel/runtime/regenerator/index.js\";\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { Duplex } from 'readable-stream';\nimport { randomId } from '@toruslabs/openlogin-utils';\nimport { EventEmitter } from 'events';\nimport stringify from 'fast-safe-stringify';\nimport eos from 'end-of-stream';\nimport once from 'once';\nimport pump from 'pump';\n\nfunction noop() {\n  return undefined;\n}\n\nvar SYN = \"SYN\";\nvar ACK = \"ACK\";\nvar BRK = \"BRK\";\n\nvar BasePostMessageStream = /*#__PURE__*/function (_Duplex) {\n  _inherits(BasePostMessageStream, _Duplex);\n\n  var _super = _createSuper(BasePostMessageStream);\n\n  function BasePostMessageStream(_ref) {\n    var _this;\n\n    _classCallCheck(this, BasePostMessageStream);\n\n    var name = _ref.name,\n        target = _ref.target,\n        _ref$targetWindow = _ref.targetWindow,\n        targetWindow = _ref$targetWindow === void 0 ? window : _ref$targetWindow,\n        _ref$targetOrigin = _ref.targetOrigin,\n        targetOrigin = _ref$targetOrigin === void 0 ? \"*\" : _ref$targetOrigin;\n    _this = _super.call(this, {\n      objectMode: true\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_init\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_haveSyn\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_name\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_target\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_targetWindow\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_targetOrigin\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_onMessage\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_synIntervalId\", void 0);\n\n    if (!name || !target) {\n      throw new Error(\"Invalid input.\");\n    }\n\n    _this._init = false;\n    _this._haveSyn = false;\n    _this._name = name;\n    _this._target = target; // target origin\n\n    _this._targetWindow = targetWindow;\n    _this._targetOrigin = targetOrigin;\n    _this._onMessage = _this.onMessage.bind(_assertThisInitialized(_this));\n    _this._synIntervalId = null;\n    window.addEventListener(\"message\", _this._onMessage, false);\n\n    _this._handShake();\n\n    return _this;\n  }\n\n  _createClass(BasePostMessageStream, [{\n    key: \"_break\",\n    value: function _break() {\n      this.cork();\n\n      this._write(BRK, null, noop);\n\n      this._haveSyn = false;\n      this._init = false;\n    }\n  }, {\n    key: \"_handShake\",\n    value: function _handShake() {\n      this._write(SYN, null, noop);\n\n      this.cork();\n    }\n  }, {\n    key: \"_onData\",\n    value: function _onData(data) {\n      if (!this._init) {\n        // listen for handshake\n        if (data === SYN) {\n          this._haveSyn = true;\n\n          this._write(ACK, null, noop);\n        } else if (data === ACK) {\n          this._init = true;\n\n          if (!this._haveSyn) {\n            this._write(ACK, null, noop);\n          }\n\n          this.uncork();\n        }\n      } else if (data === BRK) {\n        this._break();\n      } else {\n        // forward message\n        try {\n          this.push(data);\n        } catch (err) {\n          this.emit(\"error\", err);\n        }\n      }\n    }\n  }, {\n    key: \"_postMessage\",\n    value: function _postMessage(data) {\n      var originConstraint = this._targetOrigin;\n\n      this._targetWindow.postMessage({\n        target: this._target,\n        data: data\n      }, originConstraint);\n    }\n  }, {\n    key: \"onMessage\",\n    value: function onMessage(event) {\n      var message = event.data; // validate message\n\n      if (this._targetOrigin !== \"*\" && event.origin !== this._targetOrigin || event.source !== this._targetWindow || typeof message !== \"object\" || message.target !== this._name || !message.data) {\n        return;\n      }\n\n      this._onData(message.data);\n    }\n  }, {\n    key: \"_read\",\n    value: function _read() {\n      return undefined;\n    }\n  }, {\n    key: \"_write\",\n    value: function _write(data, _, cb) {\n      this._postMessage(data);\n\n      cb();\n    }\n  }, {\n    key: \"_destroy\",\n    value: function _destroy() {\n      window.removeEventListener(\"message\", this._onMessage, false);\n    }\n  }]);\n\n  return BasePostMessageStream;\n}(Duplex);\n\nfunction safeApply(handler, context, args) {\n  try {\n    Reflect.apply(handler, context, args);\n  } catch (err) {\n    // Throw error after timeout so as not to interrupt the stack\n    setTimeout(function () {\n      throw err;\n    });\n  }\n}\n\nfunction arrayClone(arr) {\n  var n = arr.length;\n  var copy = new Array(n);\n\n  for (var i = 0; i < n; i += 1) {\n    copy[i] = arr[i];\n  }\n\n  return copy;\n}\n\nvar SafeEventEmitter = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(SafeEventEmitter, _EventEmitter);\n\n  var _super2 = _createSuper(SafeEventEmitter);\n\n  function SafeEventEmitter() {\n    _classCallCheck(this, SafeEventEmitter);\n\n    return _super2.apply(this, arguments);\n  }\n\n  _createClass(SafeEventEmitter, [{\n    key: \"emit\",\n    value: function emit(type) {\n      var doError = type === \"error\";\n      var events = this._events;\n\n      if (events !== undefined) {\n        doError = doError && events.error === undefined;\n      } else if (!doError) {\n        return false;\n      } // If there is no 'error' event listener then throw.\n\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      if (doError) {\n        var er;\n\n        if (args.length > 0) {\n          er = args[0];\n        }\n\n        if (er instanceof Error) {\n          // Note: The comments on the `throw` lines are intentional, they show\n          // up in Node's output if this results in an unhandled exception.\n          throw er; // Unhandled 'error' event\n        } // At least give some kind of context to the user\n\n\n        var err = new Error(\"Unhandled error.\".concat(er ? \" (\".concat(er.message, \")\") : \"\"));\n        err.context = er;\n        throw err; // Unhandled 'error' event\n      }\n\n      var handler = events[type];\n\n      if (handler === undefined) {\n        return false;\n      }\n\n      if (typeof handler === \"function\") {\n        safeApply(handler, this, args);\n      } else {\n        var len = handler.length;\n        var listeners = arrayClone(handler);\n\n        for (var i = 0; i < len; i += 1) {\n          safeApply(listeners[i], this, args);\n        }\n      }\n\n      return true;\n    }\n  }]);\n\n  return SafeEventEmitter;\n}(EventEmitter);\n\nvar SerializableError = /*#__PURE__*/function (_Error) {\n  _inherits(SerializableError, _Error);\n\n  var _super3 = _createSuper(SerializableError);\n\n  function SerializableError(_ref) {\n    var _this2;\n\n    _classCallCheck(this, SerializableError);\n\n    var code = _ref.code,\n        message = _ref.message,\n        data = _ref.data;\n\n    if (!Number.isInteger(code)) {\n      throw new Error(\"code must be an integer\");\n    }\n\n    if (!message || typeof message !== \"string\") {\n      throw new Error(\"message must be string\");\n    }\n\n    _this2 = _super3.call(this, message);\n\n    _defineProperty(_assertThisInitialized(_this2), \"code\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this2), \"data\", void 0);\n\n    _this2.code = code;\n\n    if (data !== undefined) {\n      _this2.data = data;\n    }\n\n    return _this2;\n  }\n\n  _createClass(SerializableError, [{\n    key: \"toString\",\n    value: function toString() {\n      return stringify({\n        code: this.code,\n        message: this.message,\n        data: this.data,\n        stack: this.stack\n      });\n    }\n  }]);\n\n  return SerializableError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nfunction serializeError(error) {\n  return error.toString();\n}\n\nvar getRpcPromiseCallback = function getRpcPromiseCallback(resolve, reject) {\n  var unwrapResult = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  return function (error, response) {\n    if (error || response.error) {\n      reject(error || response.error);\n    } else if (!unwrapResult || Array.isArray(response)) {\n      resolve(response);\n    } else {\n      resolve(response.result);\n    }\n  };\n};\n\nfunction createErrorMiddleware(log) {\n  return function (req, res, next, end) {\n    try {\n      // json-rpc-engine will terminate the request when it notices this error\n      if (typeof req.method !== \"string\" || !req.method) {\n        res.error = new SerializableError({\n          code: -32603,\n          message: \"invalid method\"\n        });\n        end();\n        return;\n      }\n\n      next(function (done) {\n        var error = res.error;\n\n        if (!error) {\n          return done();\n        }\n\n        log.error(\"OpenLogin - RPC Error: \".concat(error.message), error);\n        return done();\n      });\n    } catch (error) {\n      log.error(\"OpenLogin - RPC Error thrown: \".concat(error.message), error);\n      res.error = new SerializableError({\n        code: -32603,\n        message: error.message\n      });\n      end();\n    }\n  };\n}\n\nfunction createStreamMiddleware() {\n  var idMap = {};\n\n  function readNoop() {\n    return false;\n  }\n\n  var events = new SafeEventEmitter();\n\n  function processResponse(res) {\n    var context = idMap[res.id];\n\n    if (!context) {\n      throw new Error(\"StreamMiddleware - Unknown response id \\\"\".concat(res.id, \"\\\"\"));\n    }\n\n    delete idMap[res.id]; // copy whole res onto original res\n\n    Object.assign(context.res, res); // run callback on empty stack,\n    // prevent internal stream-handler from catching errors\n\n    setTimeout(context.end);\n  }\n\n  function processNotification(res) {\n    events.emit(\"notification\", res);\n  }\n\n  function processMessage(res, _encoding, cb) {\n    var err;\n\n    try {\n      var isNotification = !res.id;\n\n      if (isNotification) {\n        processNotification(res);\n      } else {\n        processResponse(res);\n      }\n    } catch (_err) {\n      err = _err;\n    } // continue processing stream\n\n\n    cb(err);\n  }\n\n  var stream = new Duplex({\n    objectMode: true,\n    read: readNoop,\n    write: processMessage\n  });\n\n  var middleware = function middleware(req, res, next, end) {\n    // write req to stream\n    stream.push(req); // register request on id map\n\n    idMap[req.id] = {\n      req: req,\n      res: res,\n      next: next,\n      end: end\n    };\n  };\n\n  return {\n    events: events,\n    middleware: middleware,\n    stream: stream\n  };\n}\n\nfunction createScaffoldMiddleware(handlers) {\n  return function (req, res, next, end) {\n    var handler = handlers[req.method]; // if no handler, return\n\n    if (handler === undefined) {\n      return next();\n    } // if handler is fn, call as middleware\n\n\n    if (typeof handler === \"function\") {\n      return handler(req, res, next, end);\n    } // if handler is some other value, use as result\n\n\n    res.result = handler;\n    return end();\n  };\n}\n\nfunction createIdRemapMiddleware() {\n  return function (req, res, next, _end) {\n    var originalId = req.id;\n    var newId = randomId();\n    req.id = newId;\n    res.id = newId;\n    next(function (done) {\n      req.id = originalId;\n      res.id = originalId;\n      done();\n    });\n  };\n}\n\nfunction createLoggerMiddleware(logger) {\n  return function (req, res, next, _) {\n    logger.debug(\"REQ\", req, \"RES\", res);\n    next();\n  };\n}\n\nfunction createAsyncMiddleware(asyncMiddleware) {\n  return /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(req, res, next, end) {\n      var resolveNextPromise, nextPromise, returnHandlerCallback, nextWasCalled, asyncNext;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              // nextPromise is the key to the implementation\n              // it is resolved by the return handler passed to the\n              // \"next\" function\n              nextPromise = new Promise(function (resolve) {\n                resolveNextPromise = resolve;\n              });\n              returnHandlerCallback = null;\n              nextWasCalled = false; // This will be called by the consumer's async middleware.\n\n              asyncNext = /*#__PURE__*/function () {\n                var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          nextWasCalled = true; // We pass a return handler to next(). When it is called by the engine,\n                          // the consumer's async middleware will resume executing.\n\n                          next(function (runReturnHandlersCallback) {\n                            // This callback comes from JRPCEngine._runReturnHandlers\n                            returnHandlerCallback = runReturnHandlersCallback;\n                            resolveNextPromise();\n                          });\n                          _context.next = 4;\n                          return nextPromise;\n\n                        case 4:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }));\n\n                return function asyncNext() {\n                  return _ref3.apply(this, arguments);\n                };\n              }();\n\n              _context2.prev = 4;\n              _context2.next = 7;\n              return asyncMiddleware(req, res, asyncNext);\n\n            case 7:\n              if (!nextWasCalled) {\n                _context2.next = 13;\n                break;\n              }\n\n              _context2.next = 10;\n              return nextPromise;\n\n            case 10:\n              // we must wait until the return handler is called\n              returnHandlerCallback(null);\n              _context2.next = 14;\n              break;\n\n            case 13:\n              end(null);\n\n            case 14:\n              _context2.next = 19;\n              break;\n\n            case 16:\n              _context2.prev = 16;\n              _context2.t0 = _context2[\"catch\"](4);\n\n              if (returnHandlerCallback) {\n                returnHandlerCallback(_context2.t0);\n              } else {\n                end(_context2.t0);\n              }\n\n            case 19:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[4, 16]]);\n    }));\n\n    return function (_x, _x2, _x3, _x4) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n}\n\nfunction ownKeys$1(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$1(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n/**\n * A JSON-RPC request and response processor.\n * Give it a stack of middleware, pass it requests, and get back responses.\n */\n\n\nvar JRPCEngine = /*#__PURE__*/function (_SafeEventEmitter) {\n  _inherits(JRPCEngine, _SafeEventEmitter);\n\n  var _super4 = _createSuper(JRPCEngine);\n\n  function JRPCEngine() {\n    var _this3;\n\n    _classCallCheck(this, JRPCEngine);\n\n    _this3 = _super4.call(this);\n\n    _defineProperty(_assertThisInitialized(_this3), \"_middleware\", void 0);\n\n    _this3._middleware = [];\n    return _this3;\n  }\n  /**\n   * Serially executes the given stack of middleware.\n   *\n   * @returns An array of any error encountered during middleware execution,\n   * a boolean indicating whether the request was completed, and an array of\n   * middleware-defined return handlers.\n   */\n\n\n  _createClass(JRPCEngine, [{\n    key: \"push\",\n    value:\n    /**\n     * Add a middleware function to the engine's middleware stack.\n     *\n     * @param middleware - The middleware function to add.\n     */\n    function push(middleware) {\n      this._middleware.push(middleware);\n    }\n  }, {\n    key: \"handle\",\n    value: function handle(req, cb) {\n      if (cb && typeof cb !== \"function\") {\n        throw new Error('\"callback\" must be a function if provided.');\n      }\n\n      if (Array.isArray(req)) {\n        if (cb) {\n          return this._handleBatch(req, cb);\n        }\n\n        return this._handleBatch(req);\n      }\n\n      if (cb) {\n        return this._handle(req, cb);\n      }\n\n      return this._promiseHandle(req);\n    }\n    /**\n     * Returns this engine as a middleware function that can be pushed to other\n     * engines.\n     *\n     * @returns This engine as a middleware function.\n     */\n\n  }, {\n    key: \"asMiddleware\",\n    value: function asMiddleware() {\n      var _this4 = this;\n\n      return /*#__PURE__*/function () {\n        var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(req, res, next, end) {\n          var _yield$JRPCEngine$_ru, _yield$JRPCEngine$_ru2, middlewareError, isComplete, returnHandlers;\n\n          return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n            while (1) {\n              switch (_context4.prev = _context4.next) {\n                case 0:\n                  _context4.prev = 0;\n                  _context4.next = 3;\n                  return JRPCEngine._runAllMiddleware(req, res, _this4._middleware);\n\n                case 3:\n                  _yield$JRPCEngine$_ru = _context4.sent;\n                  _yield$JRPCEngine$_ru2 = _slicedToArray(_yield$JRPCEngine$_ru, 3);\n                  middlewareError = _yield$JRPCEngine$_ru2[0];\n                  isComplete = _yield$JRPCEngine$_ru2[1];\n                  returnHandlers = _yield$JRPCEngine$_ru2[2];\n\n                  if (!isComplete) {\n                    _context4.next = 12;\n                    break;\n                  }\n\n                  _context4.next = 11;\n                  return JRPCEngine._runReturnHandlers(returnHandlers);\n\n                case 11:\n                  return _context4.abrupt(\"return\", end(middlewareError));\n\n                case 12:\n                  return _context4.abrupt(\"return\", next( /*#__PURE__*/function () {\n                    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(handlerCallback) {\n                      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                        while (1) {\n                          switch (_context3.prev = _context3.next) {\n                            case 0:\n                              _context3.prev = 0;\n                              _context3.next = 3;\n                              return JRPCEngine._runReturnHandlers(returnHandlers);\n\n                            case 3:\n                              _context3.next = 8;\n                              break;\n\n                            case 5:\n                              _context3.prev = 5;\n                              _context3.t0 = _context3[\"catch\"](0);\n                              return _context3.abrupt(\"return\", handlerCallback(_context3.t0));\n\n                            case 8:\n                              return _context3.abrupt(\"return\", handlerCallback());\n\n                            case 9:\n                            case \"end\":\n                              return _context3.stop();\n                          }\n                        }\n                      }, _callee3, null, [[0, 5]]);\n                    }));\n\n                    return function (_x9) {\n                      return _ref5.apply(this, arguments);\n                    };\n                  }()));\n\n                case 15:\n                  _context4.prev = 15;\n                  _context4.t0 = _context4[\"catch\"](0);\n                  return _context4.abrupt(\"return\", end(_context4.t0));\n\n                case 18:\n                case \"end\":\n                  return _context4.stop();\n              }\n            }\n          }, _callee4, null, [[0, 15]]);\n        }));\n\n        return function (_x5, _x6, _x7, _x8) {\n          return _ref4.apply(this, arguments);\n        };\n      }();\n    }\n  }, {\n    key: \"_handleBatch\",\n    value: function () {\n      var _handleBatch2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(reqs, cb) {\n        var responses;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.prev = 0;\n                _context5.next = 3;\n                return Promise.all( // 1. Begin executing each request in the order received\n                reqs.map(this._promiseHandle.bind(this)));\n\n              case 3:\n                responses = _context5.sent;\n\n                if (!cb) {\n                  _context5.next = 6;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", cb(null, responses));\n\n              case 6:\n                return _context5.abrupt(\"return\", responses);\n\n              case 9:\n                _context5.prev = 9;\n                _context5.t0 = _context5[\"catch\"](0);\n\n                if (!cb) {\n                  _context5.next = 13;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", cb(_context5.t0));\n\n              case 13:\n                throw _context5.t0;\n\n              case 14:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this, [[0, 9]]);\n      }));\n\n      function _handleBatch(_x10, _x11) {\n        return _handleBatch2.apply(this, arguments);\n      }\n\n      return _handleBatch;\n    }()\n    /**\n     * A promise-wrapped _handle.\n     */\n\n  }, {\n    key: \"_promiseHandle\",\n    value: function _promiseHandle(req) {\n      var _this5 = this;\n\n      return new Promise(function (resolve) {\n        _this5._handle(req, function (_err, res) {\n          // There will always be a response, and it will always have any error\n          // that is caught and propagated.\n          resolve(res);\n        });\n      });\n    }\n    /**\n     * Ensures that the request object is valid, processes it, and passes any\n     * error and the response object to the given callback.\n     *\n     * Does not reject.\n     */\n\n  }, {\n    key: \"_handle\",\n    value: function () {\n      var _handle2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(callerReq, cb) {\n        var _error2, _error3, req, res, error;\n\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                if (!(!callerReq || Array.isArray(callerReq) || typeof callerReq !== \"object\")) {\n                  _context6.next = 3;\n                  break;\n                }\n\n                _error2 = new SerializableError({\n                  code: -32603,\n                  message: \"request must be plain object\"\n                });\n                return _context6.abrupt(\"return\", cb(_error2, {\n                  id: undefined,\n                  jsonrpc: \"2.0\",\n                  error: _error2\n                }));\n\n              case 3:\n                if (!(typeof callerReq.method !== \"string\")) {\n                  _context6.next = 6;\n                  break;\n                }\n\n                _error3 = new SerializableError({\n                  code: -32603,\n                  message: \"method must be string\"\n                });\n                return _context6.abrupt(\"return\", cb(_error3, {\n                  id: callerReq.id,\n                  jsonrpc: \"2.0\",\n                  error: _error3\n                }));\n\n              case 6:\n                req = _objectSpread$1({}, callerReq);\n                res = {\n                  id: req.id,\n                  jsonrpc: req.jsonrpc\n                };\n                error = null;\n                _context6.prev = 9;\n                _context6.next = 12;\n                return this._processRequest(req, res);\n\n              case 12:\n                _context6.next = 17;\n                break;\n\n              case 14:\n                _context6.prev = 14;\n                _context6.t0 = _context6[\"catch\"](9);\n                // A request handler error, a re-thrown middleware error, or something\n                // unexpected.\n                error = _context6.t0;\n\n              case 17:\n                if (error) {\n                  // Ensure no result is present on an errored response\n                  delete res.result;\n\n                  if (!res.error) {\n                    res.error = serializeError(error);\n                  }\n                }\n\n                return _context6.abrupt(\"return\", cb(error, res));\n\n              case 19:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this, [[9, 14]]);\n      }));\n\n      function _handle(_x12, _x13) {\n        return _handle2.apply(this, arguments);\n      }\n\n      return _handle;\n    }()\n    /**\n     * For the given request and response, runs all middleware and their return\n     * handlers, if any, and ensures that internal request processing semantics\n     * are satisfied.\n     */\n\n  }, {\n    key: \"_processRequest\",\n    value: function () {\n      var _processRequest2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(req, res) {\n        var _yield$JRPCEngine$_ru3, _yield$JRPCEngine$_ru4, error, isComplete, returnHandlers;\n\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return JRPCEngine._runAllMiddleware(req, res, this._middleware);\n\n              case 2:\n                _yield$JRPCEngine$_ru3 = _context7.sent;\n                _yield$JRPCEngine$_ru4 = _slicedToArray(_yield$JRPCEngine$_ru3, 3);\n                error = _yield$JRPCEngine$_ru4[0];\n                isComplete = _yield$JRPCEngine$_ru4[1];\n                returnHandlers = _yield$JRPCEngine$_ru4[2];\n\n                // Throw if \"end\" was not called, or if the response has neither a result\n                // nor an error.\n                JRPCEngine._checkForCompletion(req, res, isComplete); // The return handlers should run even if an error was encountered during\n                // middleware processing.\n\n\n                _context7.next = 10;\n                return JRPCEngine._runReturnHandlers(returnHandlers);\n\n              case 10:\n                if (!error) {\n                  _context7.next = 12;\n                  break;\n                }\n\n                throw error;\n\n              case 12:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function _processRequest(_x14, _x15) {\n        return _processRequest2.apply(this, arguments);\n      }\n\n      return _processRequest;\n    }()\n  }], [{\n    key: \"_runAllMiddleware\",\n    value: function () {\n      var _runAllMiddleware2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(req, res, middlewareStack) {\n        var returnHandlers, error, isComplete, _iterator, _step, middleware, _yield$JRPCEngine$_ru5, _yield$JRPCEngine$_ru6;\n\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                returnHandlers = [];\n                error = null;\n                isComplete = false; // Go down stack of middleware, call and collect optional returnHandlers\n\n                _iterator = _createForOfIteratorHelper(middlewareStack);\n                _context8.prev = 4;\n\n                _iterator.s();\n\n              case 6:\n                if ((_step = _iterator.n()).done) {\n                  _context8.next = 18;\n                  break;\n                }\n\n                middleware = _step.value;\n                _context8.next = 10;\n                return JRPCEngine._runMiddleware(req, res, middleware, returnHandlers);\n\n              case 10:\n                _yield$JRPCEngine$_ru5 = _context8.sent;\n                _yield$JRPCEngine$_ru6 = _slicedToArray(_yield$JRPCEngine$_ru5, 2);\n                error = _yield$JRPCEngine$_ru6[0];\n                isComplete = _yield$JRPCEngine$_ru6[1];\n\n                if (!isComplete) {\n                  _context8.next = 16;\n                  break;\n                }\n\n                return _context8.abrupt(\"break\", 18);\n\n              case 16:\n                _context8.next = 6;\n                break;\n\n              case 18:\n                _context8.next = 23;\n                break;\n\n              case 20:\n                _context8.prev = 20;\n                _context8.t0 = _context8[\"catch\"](4);\n\n                _iterator.e(_context8.t0);\n\n              case 23:\n                _context8.prev = 23;\n\n                _iterator.f();\n\n                return _context8.finish(23);\n\n              case 26:\n                return _context8.abrupt(\"return\", [error, isComplete, returnHandlers.reverse()]);\n\n              case 27:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, null, [[4, 20, 23, 26]]);\n      }));\n\n      function _runAllMiddleware(_x16, _x17, _x18) {\n        return _runAllMiddleware2.apply(this, arguments);\n      }\n\n      return _runAllMiddleware;\n    }()\n    /**\n     * Runs an individual middleware.\n     *\n     * @returns An array of any error encountered during middleware exection,\n     * and a boolean indicating whether the request should end.\n     */\n\n  }, {\n    key: \"_runMiddleware\",\n    value: function _runMiddleware(req, res, middleware, returnHandlers) {\n      return new Promise(function (resolve) {\n        var end = function end(err) {\n          var error = err || res.error;\n\n          if (error) {\n            res.error = serializeError(error);\n          } // True indicates that the request should end\n\n\n          resolve([error, true]);\n        };\n\n        var next = function next(returnHandler) {\n          if (res.error) {\n            end(res.error);\n          } else {\n            if (returnHandler) {\n              if (typeof returnHandler !== \"function\") {\n                end(new SerializableError({\n                  code: -32603,\n                  message: \"JRPCEngine: 'next' return handlers must be functions\"\n                }));\n              }\n\n              returnHandlers.push(returnHandler);\n            } // False indicates that the request should not end\n\n\n            resolve([null, false]);\n          }\n        };\n\n        try {\n          middleware(req, res, next, end);\n        } catch (error) {\n          end(error);\n        }\n      });\n    }\n    /**\n     * Serially executes array of return handlers. The request and response are\n     * assumed to be in their scope.\n     */\n\n  }, {\n    key: \"_runReturnHandlers\",\n    value: function () {\n      var _runReturnHandlers2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(handlers) {\n        var _iterator2, _step2, _loop;\n\n        return _regeneratorRuntime.wrap(function _callee9$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _iterator2 = _createForOfIteratorHelper(handlers);\n                _context10.prev = 1;\n                _loop = /*#__PURE__*/_regeneratorRuntime.mark(function _loop() {\n                  var handler;\n                  return _regeneratorRuntime.wrap(function _loop$(_context9) {\n                    while (1) {\n                      switch (_context9.prev = _context9.next) {\n                        case 0:\n                          handler = _step2.value;\n                          _context9.next = 3;\n                          return new Promise(function (resolve, reject) {\n                            handler(function (err) {\n                              return err ? reject(err) : resolve();\n                            });\n                          });\n\n                        case 3:\n                        case \"end\":\n                          return _context9.stop();\n                      }\n                    }\n                  }, _loop);\n                });\n\n                _iterator2.s();\n\n              case 4:\n                if ((_step2 = _iterator2.n()).done) {\n                  _context10.next = 8;\n                  break;\n                }\n\n                return _context10.delegateYield(_loop(), \"t0\", 6);\n\n              case 6:\n                _context10.next = 4;\n                break;\n\n              case 8:\n                _context10.next = 13;\n                break;\n\n              case 10:\n                _context10.prev = 10;\n                _context10.t1 = _context10[\"catch\"](1);\n\n                _iterator2.e(_context10.t1);\n\n              case 13:\n                _context10.prev = 13;\n\n                _iterator2.f();\n\n                return _context10.finish(13);\n\n              case 16:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee9, null, [[1, 10, 13, 16]]);\n      }));\n\n      function _runReturnHandlers(_x19) {\n        return _runReturnHandlers2.apply(this, arguments);\n      }\n\n      return _runReturnHandlers;\n    }()\n    /**\n     * Throws an error if the response has neither a result nor an error, or if\n     * the \"isComplete\" flag is falsy.\n     */\n\n  }, {\n    key: \"_checkForCompletion\",\n    value: function _checkForCompletion(req, res, isComplete) {\n      if (!(\"result\" in res) && !(\"error\" in res)) {\n        throw new SerializableError({\n          code: -32603,\n          message: \"Response has no error or result for request\"\n        });\n      }\n\n      if (!isComplete) {\n        throw new SerializableError({\n          code: -32603,\n          message: \"Nothing ended request\"\n        });\n      }\n    }\n  }]);\n\n  return JRPCEngine;\n}(SafeEventEmitter);\n\nfunction mergeMiddleware(middlewareStack) {\n  var engine = new JRPCEngine();\n  middlewareStack.forEach(function (middleware) {\n    return engine.push(middleware);\n  });\n  return engine.asMiddleware();\n}\n\nfunction createEngineStream(opts) {\n  if (!opts || !opts.engine) {\n    throw new Error(\"Missing engine parameter!\");\n  }\n\n  var engine = opts.engine; // eslint-disable-next-line prefer-const\n\n  var stream;\n\n  function read() {\n    return undefined;\n  }\n\n  function write(req, _encoding, cb) {\n    engine.handle(req, function (_err, res) {\n      stream.push(res);\n    });\n    cb();\n  }\n\n  stream = new Duplex({\n    objectMode: true,\n    read: read,\n    write: write\n  }); // forward notifications\n\n  if (engine.on) {\n    engine.on(\"notification\", function (message) {\n      stream.push(message);\n    });\n  }\n\n  return stream;\n}\n\nvar Substream = /*#__PURE__*/function (_Duplex2) {\n  _inherits(Substream, _Duplex2);\n\n  var _super5 = _createSuper(Substream);\n\n  function Substream(_ref) {\n    var _this6;\n\n    _classCallCheck(this, Substream);\n\n    var parent = _ref.parent,\n        name = _ref.name;\n    _this6 = _super5.call(this, {\n      objectMode: true\n    });\n\n    _defineProperty(_assertThisInitialized(_this6), \"_parent\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this6), \"_name\", void 0);\n\n    _this6._parent = parent;\n    _this6._name = name;\n    return _this6;\n  }\n  /**\n   * Explicitly sets read operations to a no-op.\n   */\n\n\n  _createClass(Substream, [{\n    key: \"_read\",\n    value: function _read() {\n      return undefined;\n    }\n    /**\n     * Called when data should be written to this writable stream.\n     *\n     * @param chunk - Arbitrary object to write\n     * @param encoding - Encoding to use when writing payload\n     * @param callback - Called when writing is complete or an error occurs\n     */\n\n  }, {\n    key: \"_write\",\n    value: function _write(chunk, _encoding, callback) {\n      this._parent.push({\n        name: this._name,\n        data: chunk\n      });\n\n      callback();\n    }\n  }]);\n\n  return Substream;\n}(Duplex);\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nvar IGNORE_SUBSTREAM = Symbol(\"IGNORE_SUBSTREAM\");\n\nvar ObjectMultiplex = /*#__PURE__*/function (_Duplex3) {\n  _inherits(ObjectMultiplex, _Duplex3);\n\n  var _super6 = _createSuper(ObjectMultiplex);\n\n  function ObjectMultiplex() {\n    var _this7;\n\n    _classCallCheck(this, ObjectMultiplex);\n\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _this7 = _super6.call(this, _objectSpread(_objectSpread({}, opts), {}, {\n      objectMode: true\n    }));\n\n    _defineProperty(_assertThisInitialized(_this7), \"_substreams\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this7), \"getStream\", void 0);\n\n    _this7._substreams = {};\n    return _this7;\n  }\n\n  _createClass(ObjectMultiplex, [{\n    key: \"createStream\",\n    value: function createStream(name) {\n      // validate name\n      if (!name) {\n        throw new Error(\"ObjectMultiplex - name must not be empty\");\n      }\n\n      if (this._substreams[name]) {\n        throw new Error(\"ObjectMultiplex - Substream for name \\\"\".concat(name, \"\\\" already exists\"));\n      } // create substream\n\n\n      var substream = new Substream({\n        parent: this,\n        name: name\n      });\n      this._substreams[name] = substream; // listen for parent stream to end\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n\n      anyStreamEnd(this, function (_error) {\n        return substream.destroy(_error || undefined);\n      });\n      return substream;\n    } // ignore streams (dont display orphaned data warning)\n\n  }, {\n    key: \"ignoreStream\",\n    value: function ignoreStream(name) {\n      // validate name\n      if (!name) {\n        throw new Error(\"ObjectMultiplex - name must not be empty\");\n      }\n\n      if (this._substreams[name]) {\n        throw new Error(\"ObjectMultiplex - Substream for name \\\"\".concat(name, \"\\\" already exists\"));\n      } // set\n\n\n      this._substreams[name] = IGNORE_SUBSTREAM;\n    }\n  }, {\n    key: \"_read\",\n    value: function _read() {\n      return undefined;\n    }\n  }, {\n    key: \"_write\",\n    value: function _write(chunk, _encoding, callback) {\n      var name = chunk.name,\n          data = chunk.data;\n\n      if (!name) {\n        window.console.warn(\"ObjectMultiplex - malformed chunk without name \\\"\".concat(chunk, \"\\\"\"));\n        return callback();\n      } // get corresponding substream\n\n\n      var substream = this._substreams[name];\n\n      if (!substream) {\n        window.console.warn(\"ObjectMultiplex - orphaned data for stream \\\"\".concat(name, \"\\\"\"));\n        return callback();\n      } // push data into substream\n\n\n      if (substream !== IGNORE_SUBSTREAM) {\n        substream.push(data);\n      }\n\n      return callback();\n    }\n  }]);\n\n  return ObjectMultiplex;\n}(Duplex); // util\n\n\nfunction anyStreamEnd(stream, _cb) {\n  var cb = once(_cb);\n  eos(stream, {\n    readable: false\n  }, cb);\n  eos(stream, {\n    writable: false\n  }, cb);\n}\n\nfunction setupMultiplex(stream) {\n  var mux = new ObjectMultiplex();\n\n  mux.getStream = function streamHelper(name) {\n    if (this._substreams[name]) {\n      return this._substreams[name];\n    }\n\n    return this.createStream(name);\n  };\n\n  pump(stream, mux, stream, function (err) {\n    if (err) window.console.error(err);\n  });\n  return mux;\n}\n\nvar PostMessageStream = /*#__PURE__*/function (_BasePostMessageStrea) {\n  _inherits(PostMessageStream, _BasePostMessageStrea);\n\n  var _super7 = _createSuper(PostMessageStream);\n\n  function PostMessageStream() {\n    _classCallCheck(this, PostMessageStream);\n\n    return _super7.apply(this, arguments);\n  }\n\n  _createClass(PostMessageStream, [{\n    key: \"_postMessage\",\n    value: function _postMessage(data) {\n      var originConstraint = this._targetOrigin;\n\n      if (typeof data === \"object\") {\n        var dataObj = data;\n\n        if (typeof dataObj.data === \"object\") {\n          var dataObjData = dataObj.data;\n\n          if (Array.isArray(dataObjData.params) && dataObjData.params.length > 0) {\n            var dataObjDataParam = dataObjData.params[0];\n\n            if (dataObjDataParam._origin) {\n              originConstraint = dataObjDataParam._origin;\n            } // add a constraint for the response\n\n\n            dataObjDataParam._origin = window.location.origin;\n          }\n        }\n      }\n\n      this._targetWindow.postMessage({\n        target: this._target,\n        data: data\n      }, originConstraint);\n    }\n  }]);\n\n  return PostMessageStream;\n}(BasePostMessageStream);\n\nexport { BasePostMessageStream, IGNORE_SUBSTREAM, JRPCEngine, ObjectMultiplex, PostMessageStream, SafeEventEmitter, SerializableError, Substream, createAsyncMiddleware, createEngineStream, createErrorMiddleware, createIdRemapMiddleware, createLoggerMiddleware, createScaffoldMiddleware, createStreamMiddleware, getRpcPromiseCallback, mergeMiddleware, serializeError, setupMultiplex };","map":{"version":3,"sources":["../src/basePostMessageStream.ts","../src/safeEventEmitter.ts","../src/serializableError.ts","../src/jrpc.ts","../src/jrpcEngine.ts","../src/substream.ts","../src/mux.ts","../src/postMessageStream.ts"],"names":["SYN","ACK","BRK","BasePostMessageStream","Duplex","constructor","targetWindow","targetOrigin","objectMode","window","_break","_handShake","_onData","data","_postMessage","originConstraint","target","onMessage","message","event","_read","_write","cb","_destroy","Reflect","setTimeout","n","arr","copy","i","SafeEventEmitter","EventEmitter","emit","args","doError","type","events","er","err","handler","safeApply","len","listeners","arrayClone","SerializableError","Error","Number","toString","stringify","code","stack","serializeError","error","getRpcPromiseCallback","unwrapResult","response","reject","Array","resolve","createErrorMiddleware","log","req","res","end","next","done","createStreamMiddleware","idMap","context","Object","isNotification","processNotification","processResponse","stream","read","write","processMessage","middleware","createScaffoldMiddleware","handlers","createIdRemapMiddleware","originalId","newId","randomId","createLoggerMiddleware","logger","createAsyncMiddleware","asyncMiddleware","nextPromise","resolveNextPromise","returnHandlerCallback","nextWasCalled","asyncNext","runReturnHandlersCallback","JRPCEngine","_runAllMiddleware","returnHandlers","isComplete","_runMiddleware","returnHandler","_runReturnHandlers","_checkForCompletion","push","handle","asMiddleware","handlerCallback","_handleBatch","responses","Promise","reqs","_promiseHandle","_handle","id","jsonrpc","callerReq","_processRequest","mergeMiddleware","middlewareStack","engine","createEngineStream","opts","Substream","name","chunk","callback","IGNORE_SUBSTREAM","Symbol","ObjectMultiplex","createStream","substream","parent","anyStreamEnd","_error","ignoreStream","once","eos","readable","writable","setupMultiplex","mux","pump","PostMessageStream","dataObj","dataObjData","dataObjDataParam"],"mappings":"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","sourcesContent":["import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { Duplex } from 'readable-stream';\nimport { randomId } from '@toruslabs/openlogin-utils';\nimport { EventEmitter } from 'events';\nimport stringify from 'fast-safe-stringify';\nimport eos from 'end-of-stream';\nimport once from 'once';\nimport pump from 'pump';\n\nfunction noop() {\n  return undefined;\n}\n\nconst SYN = \"SYN\";\nconst ACK = \"ACK\";\nconst BRK = \"BRK\";\nclass BasePostMessageStream extends Duplex {\n  constructor(_ref) {\n    let {\n      name,\n      target,\n      targetWindow = window,\n      targetOrigin = \"*\"\n    } = _ref;\n    super({\n      objectMode: true\n    });\n\n    _defineProperty(this, \"_init\", void 0);\n\n    _defineProperty(this, \"_haveSyn\", void 0);\n\n    _defineProperty(this, \"_name\", void 0);\n\n    _defineProperty(this, \"_target\", void 0);\n\n    _defineProperty(this, \"_targetWindow\", void 0);\n\n    _defineProperty(this, \"_targetOrigin\", void 0);\n\n    _defineProperty(this, \"_onMessage\", void 0);\n\n    _defineProperty(this, \"_synIntervalId\", void 0);\n\n    if (!name || !target) {\n      throw new Error(\"Invalid input.\");\n    }\n\n    this._init = false;\n    this._haveSyn = false;\n    this._name = name;\n    this._target = target; // target origin\n\n    this._targetWindow = targetWindow;\n    this._targetOrigin = targetOrigin;\n    this._onMessage = this.onMessage.bind(this);\n    this._synIntervalId = null;\n    window.addEventListener(\"message\", this._onMessage, false);\n\n    this._handShake();\n  }\n\n  _break() {\n    this.cork();\n\n    this._write(BRK, null, noop);\n\n    this._haveSyn = false;\n    this._init = false;\n  }\n\n  _handShake() {\n    this._write(SYN, null, noop);\n\n    this.cork();\n  }\n\n  _onData(data) {\n    if (!this._init) {\n      // listen for handshake\n      if (data === SYN) {\n        this._haveSyn = true;\n\n        this._write(ACK, null, noop);\n      } else if (data === ACK) {\n        this._init = true;\n\n        if (!this._haveSyn) {\n          this._write(ACK, null, noop);\n        }\n\n        this.uncork();\n      }\n    } else if (data === BRK) {\n      this._break();\n    } else {\n      // forward message\n      try {\n        this.push(data);\n      } catch (err) {\n        this.emit(\"error\", err);\n      }\n    }\n  }\n\n  _postMessage(data) {\n    const originConstraint = this._targetOrigin;\n\n    this._targetWindow.postMessage({\n      target: this._target,\n      data\n    }, originConstraint);\n  }\n\n  onMessage(event) {\n    const message = event.data; // validate message\n\n    if (this._targetOrigin !== \"*\" && event.origin !== this._targetOrigin || event.source !== this._targetWindow || typeof message !== \"object\" || message.target !== this._name || !message.data) {\n      return;\n    }\n\n    this._onData(message.data);\n  }\n\n  _read() {\n    return undefined;\n  }\n\n  _write(data, _, cb) {\n    this._postMessage(data);\n\n    cb();\n  }\n\n  _destroy() {\n    window.removeEventListener(\"message\", this._onMessage, false);\n  }\n\n}\n\nfunction safeApply(handler, context, args) {\n  try {\n    Reflect.apply(handler, context, args);\n  } catch (err) {\n    // Throw error after timeout so as not to interrupt the stack\n    setTimeout(() => {\n      throw err;\n    });\n  }\n}\n\nfunction arrayClone(arr) {\n  const n = arr.length;\n  const copy = new Array(n);\n\n  for (let i = 0; i < n; i += 1) {\n    copy[i] = arr[i];\n  }\n\n  return copy;\n}\n\nclass SafeEventEmitter extends EventEmitter {\n  emit(type) {\n    let doError = type === \"error\";\n    const events = this._events;\n\n    if (events !== undefined) {\n      doError = doError && events.error === undefined;\n    } else if (!doError) {\n      return false;\n    } // If there is no 'error' event listener then throw.\n\n\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    if (doError) {\n      let er;\n\n      if (args.length > 0) {\n        [er] = args;\n      }\n\n      if (er instanceof Error) {\n        // Note: The comments on the `throw` lines are intentional, they show\n        // up in Node's output if this results in an unhandled exception.\n        throw er; // Unhandled 'error' event\n      } // At least give some kind of context to the user\n\n\n      const err = new Error(\"Unhandled error.\".concat(er ? \" (\".concat(er.message, \")\") : \"\"));\n      err.context = er;\n      throw err; // Unhandled 'error' event\n    }\n\n    const handler = events[type];\n\n    if (handler === undefined) {\n      return false;\n    }\n\n    if (typeof handler === \"function\") {\n      safeApply(handler, this, args);\n    } else {\n      const len = handler.length;\n      const listeners = arrayClone(handler);\n\n      for (let i = 0; i < len; i += 1) {\n        safeApply(listeners[i], this, args);\n      }\n    }\n\n    return true;\n  }\n\n}\n\nclass SerializableError extends Error {\n  constructor(_ref) {\n    let {\n      code,\n      message,\n      data\n    } = _ref;\n\n    if (!Number.isInteger(code)) {\n      throw new Error(\"code must be an integer\");\n    }\n\n    if (!message || typeof message !== \"string\") {\n      throw new Error(\"message must be string\");\n    }\n\n    super(message);\n\n    _defineProperty(this, \"code\", void 0);\n\n    _defineProperty(this, \"data\", void 0);\n\n    this.code = code;\n\n    if (data !== undefined) {\n      this.data = data;\n    }\n  }\n\n  toString() {\n    return stringify({\n      code: this.code,\n      message: this.message,\n      data: this.data,\n      stack: this.stack\n    });\n  }\n\n}\n\nfunction serializeError(error) {\n  return error.toString();\n}\nconst getRpcPromiseCallback = function (resolve, reject) {\n  let unwrapResult = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  return (error, response) => {\n    if (error || response.error) {\n      reject(error || response.error);\n    } else if (!unwrapResult || Array.isArray(response)) {\n      resolve(response);\n    } else {\n      resolve(response.result);\n    }\n  };\n};\nfunction createErrorMiddleware(log) {\n  return (req, res, next, end) => {\n    try {\n      // json-rpc-engine will terminate the request when it notices this error\n      if (typeof req.method !== \"string\" || !req.method) {\n        res.error = new SerializableError({\n          code: -32603,\n          message: \"invalid method\"\n        });\n        end();\n        return;\n      }\n\n      next(done => {\n        const {\n          error\n        } = res;\n\n        if (!error) {\n          return done();\n        }\n\n        log.error(\"OpenLogin - RPC Error: \".concat(error.message), error);\n        return done();\n      });\n    } catch (error) {\n      log.error(\"OpenLogin - RPC Error thrown: \".concat(error.message), error);\n      res.error = new SerializableError({\n        code: -32603,\n        message: error.message\n      });\n      end();\n    }\n  };\n}\nfunction createStreamMiddleware() {\n  const idMap = {};\n\n  function readNoop() {\n    return false;\n  }\n\n  const events = new SafeEventEmitter();\n\n  function processResponse(res) {\n    const context = idMap[res.id];\n\n    if (!context) {\n      throw new Error(\"StreamMiddleware - Unknown response id \\\"\".concat(res.id, \"\\\"\"));\n    }\n\n    delete idMap[res.id]; // copy whole res onto original res\n\n    Object.assign(context.res, res); // run callback on empty stack,\n    // prevent internal stream-handler from catching errors\n\n    setTimeout(context.end);\n  }\n\n  function processNotification(res) {\n    events.emit(\"notification\", res);\n  }\n\n  function processMessage(res, _encoding, cb) {\n    let err;\n\n    try {\n      const isNotification = !res.id;\n\n      if (isNotification) {\n        processNotification(res);\n      } else {\n        processResponse(res);\n      }\n    } catch (_err) {\n      err = _err;\n    } // continue processing stream\n\n\n    cb(err);\n  }\n\n  const stream = new Duplex({\n    objectMode: true,\n    read: readNoop,\n    write: processMessage\n  });\n\n  const middleware = (req, res, next, end) => {\n    // write req to stream\n    stream.push(req); // register request on id map\n\n    idMap[req.id] = {\n      req,\n      res,\n      next,\n      end\n    };\n  };\n\n  return {\n    events,\n    middleware,\n    stream\n  };\n}\nfunction createScaffoldMiddleware(handlers) {\n  return (req, res, next, end) => {\n    const handler = handlers[req.method]; // if no handler, return\n\n    if (handler === undefined) {\n      return next();\n    } // if handler is fn, call as middleware\n\n\n    if (typeof handler === \"function\") {\n      return handler(req, res, next, end);\n    } // if handler is some other value, use as result\n\n\n    res.result = handler;\n    return end();\n  };\n}\nfunction createIdRemapMiddleware() {\n  return (req, res, next, _end) => {\n    const originalId = req.id;\n    const newId = randomId();\n    req.id = newId;\n    res.id = newId;\n    next(done => {\n      req.id = originalId;\n      res.id = originalId;\n      done();\n    });\n  };\n}\nfunction createLoggerMiddleware(logger) {\n  return (req, res, next, _) => {\n    logger.debug(\"REQ\", req, \"RES\", res);\n    next();\n  };\n}\nfunction createAsyncMiddleware(asyncMiddleware) {\n  return async (req, res, next, end) => {\n    // nextPromise is the key to the implementation\n    // it is resolved by the return handler passed to the\n    // \"next\" function\n    let resolveNextPromise;\n    const nextPromise = new Promise(resolve => {\n      resolveNextPromise = resolve;\n    });\n    let returnHandlerCallback = null;\n    let nextWasCalled = false; // This will be called by the consumer's async middleware.\n\n    const asyncNext = async () => {\n      nextWasCalled = true; // We pass a return handler to next(). When it is called by the engine,\n      // the consumer's async middleware will resume executing.\n\n      next(runReturnHandlersCallback => {\n        // This callback comes from JRPCEngine._runReturnHandlers\n        returnHandlerCallback = runReturnHandlersCallback;\n        resolveNextPromise();\n      });\n      await nextPromise;\n    };\n\n    try {\n      await asyncMiddleware(req, res, asyncNext);\n\n      if (nextWasCalled) {\n        await nextPromise; // we must wait until the return handler is called\n\n        returnHandlerCallback(null);\n      } else {\n        end(null);\n      }\n    } catch (error) {\n      if (returnHandlerCallback) {\n        returnHandlerCallback(error);\n      } else {\n        end(error);\n      }\n    }\n  };\n}\n\nfunction ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n/**\n * A JSON-RPC request and response processor.\n * Give it a stack of middleware, pass it requests, and get back responses.\n */\n\nclass JRPCEngine extends SafeEventEmitter {\n  constructor() {\n    super();\n\n    _defineProperty(this, \"_middleware\", void 0);\n\n    this._middleware = [];\n  }\n  /**\n   * Serially executes the given stack of middleware.\n   *\n   * @returns An array of any error encountered during middleware execution,\n   * a boolean indicating whether the request was completed, and an array of\n   * middleware-defined return handlers.\n   */\n\n\n  static async _runAllMiddleware(req, res, middlewareStack) {\n    const returnHandlers = [];\n    let error = null;\n    let isComplete = false; // Go down stack of middleware, call and collect optional returnHandlers\n\n    for (const middleware of middlewareStack) {\n      [error, isComplete] = await JRPCEngine._runMiddleware(req, res, middleware, returnHandlers);\n\n      if (isComplete) {\n        break;\n      }\n    }\n\n    return [error, isComplete, returnHandlers.reverse()];\n  }\n  /**\n   * Runs an individual middleware.\n   *\n   * @returns An array of any error encountered during middleware exection,\n   * and a boolean indicating whether the request should end.\n   */\n\n\n  static _runMiddleware(req, res, middleware, returnHandlers) {\n    return new Promise(resolve => {\n      const end = err => {\n        const error = err || res.error;\n\n        if (error) {\n          res.error = serializeError(error);\n        } // True indicates that the request should end\n\n\n        resolve([error, true]);\n      };\n\n      const next = returnHandler => {\n        if (res.error) {\n          end(res.error);\n        } else {\n          if (returnHandler) {\n            if (typeof returnHandler !== \"function\") {\n              end(new SerializableError({\n                code: -32603,\n                message: \"JRPCEngine: 'next' return handlers must be functions\"\n              }));\n            }\n\n            returnHandlers.push(returnHandler);\n          } // False indicates that the request should not end\n\n\n          resolve([null, false]);\n        }\n      };\n\n      try {\n        middleware(req, res, next, end);\n      } catch (error) {\n        end(error);\n      }\n    });\n  }\n  /**\n   * Serially executes array of return handlers. The request and response are\n   * assumed to be in their scope.\n   */\n\n\n  static async _runReturnHandlers(handlers) {\n    for (const handler of handlers) {\n      await new Promise((resolve, reject) => {\n        handler(err => err ? reject(err) : resolve());\n      });\n    }\n  }\n  /**\n   * Throws an error if the response has neither a result nor an error, or if\n   * the \"isComplete\" flag is falsy.\n   */\n\n\n  static _checkForCompletion(req, res, isComplete) {\n    if (!(\"result\" in res) && !(\"error\" in res)) {\n      throw new SerializableError({\n        code: -32603,\n        message: \"Response has no error or result for request\"\n      });\n    }\n\n    if (!isComplete) {\n      throw new SerializableError({\n        code: -32603,\n        message: \"Nothing ended request\"\n      });\n    }\n  }\n  /**\n   * Add a middleware function to the engine's middleware stack.\n   *\n   * @param middleware - The middleware function to add.\n   */\n\n\n  push(middleware) {\n    this._middleware.push(middleware);\n  }\n\n  handle(req, cb) {\n    if (cb && typeof cb !== \"function\") {\n      throw new Error('\"callback\" must be a function if provided.');\n    }\n\n    if (Array.isArray(req)) {\n      if (cb) {\n        return this._handleBatch(req, cb);\n      }\n\n      return this._handleBatch(req);\n    }\n\n    if (cb) {\n      return this._handle(req, cb);\n    }\n\n    return this._promiseHandle(req);\n  }\n  /**\n   * Returns this engine as a middleware function that can be pushed to other\n   * engines.\n   *\n   * @returns This engine as a middleware function.\n   */\n\n\n  asMiddleware() {\n    return async (req, res, next, end) => {\n      try {\n        const [middlewareError, isComplete, returnHandlers] = await JRPCEngine._runAllMiddleware(req, res, this._middleware);\n\n        if (isComplete) {\n          await JRPCEngine._runReturnHandlers(returnHandlers);\n          return end(middlewareError);\n        }\n\n        return next(async handlerCallback => {\n          try {\n            await JRPCEngine._runReturnHandlers(returnHandlers);\n          } catch (error) {\n            return handlerCallback(error);\n          }\n\n          return handlerCallback();\n        });\n      } catch (error) {\n        return end(error);\n      }\n    };\n  }\n\n  async _handleBatch(reqs, cb) {\n    // The order here is important\n    try {\n      // 2. Wait for all requests to finish, or throw on some kind of fatal\n      // error\n      const responses = await Promise.all( // 1. Begin executing each request in the order received\n      reqs.map(this._promiseHandle.bind(this))); // 3. Return batch response\n\n      if (cb) {\n        return cb(null, responses);\n      }\n\n      return responses;\n    } catch (error) {\n      if (cb) {\n        return cb(error);\n      }\n\n      throw error;\n    }\n  }\n  /**\n   * A promise-wrapped _handle.\n   */\n\n\n  _promiseHandle(req) {\n    return new Promise(resolve => {\n      this._handle(req, (_err, res) => {\n        // There will always be a response, and it will always have any error\n        // that is caught and propagated.\n        resolve(res);\n      });\n    });\n  }\n  /**\n   * Ensures that the request object is valid, processes it, and passes any\n   * error and the response object to the given callback.\n   *\n   * Does not reject.\n   */\n\n\n  async _handle(callerReq, cb) {\n    if (!callerReq || Array.isArray(callerReq) || typeof callerReq !== \"object\") {\n      const error = new SerializableError({\n        code: -32603,\n        message: \"request must be plain object\"\n      });\n      return cb(error, {\n        id: undefined,\n        jsonrpc: \"2.0\",\n        error\n      });\n    }\n\n    if (typeof callerReq.method !== \"string\") {\n      const error = new SerializableError({\n        code: -32603,\n        message: \"method must be string\"\n      });\n      return cb(error, {\n        id: callerReq.id,\n        jsonrpc: \"2.0\",\n        error\n      });\n    }\n\n    const req = _objectSpread$1({}, callerReq);\n\n    const res = {\n      id: req.id,\n      jsonrpc: req.jsonrpc\n    };\n    let error = null;\n\n    try {\n      await this._processRequest(req, res);\n    } catch (_error) {\n      // A request handler error, a re-thrown middleware error, or something\n      // unexpected.\n      error = _error;\n    }\n\n    if (error) {\n      // Ensure no result is present on an errored response\n      delete res.result;\n\n      if (!res.error) {\n        res.error = serializeError(error);\n      }\n    }\n\n    return cb(error, res);\n  }\n  /**\n   * For the given request and response, runs all middleware and their return\n   * handlers, if any, and ensures that internal request processing semantics\n   * are satisfied.\n   */\n\n\n  async _processRequest(req, res) {\n    const [error, isComplete, returnHandlers] = await JRPCEngine._runAllMiddleware(req, res, this._middleware); // Throw if \"end\" was not called, or if the response has neither a result\n    // nor an error.\n\n    JRPCEngine._checkForCompletion(req, res, isComplete); // The return handlers should run even if an error was encountered during\n    // middleware processing.\n\n\n    await JRPCEngine._runReturnHandlers(returnHandlers); // Now we re-throw the middleware processing error, if any, to catch it\n    // further up the call chain.\n\n    if (error) {\n      throw error;\n    }\n  }\n\n}\nfunction mergeMiddleware(middlewareStack) {\n  const engine = new JRPCEngine();\n  middlewareStack.forEach(middleware => engine.push(middleware));\n  return engine.asMiddleware();\n}\nfunction createEngineStream(opts) {\n  if (!opts || !opts.engine) {\n    throw new Error(\"Missing engine parameter!\");\n  }\n\n  const {\n    engine\n  } = opts; // eslint-disable-next-line prefer-const\n\n  let stream;\n\n  function read() {\n    return undefined;\n  }\n\n  function write(req, _encoding, cb) {\n    engine.handle(req, (_err, res) => {\n      stream.push(res);\n    });\n    cb();\n  }\n\n  stream = new Duplex({\n    objectMode: true,\n    read,\n    write\n  }); // forward notifications\n\n  if (engine.on) {\n    engine.on(\"notification\", message => {\n      stream.push(message);\n    });\n  }\n\n  return stream;\n}\n\nclass Substream extends Duplex {\n  constructor(_ref) {\n    let {\n      parent,\n      name\n    } = _ref;\n    super({\n      objectMode: true\n    });\n\n    _defineProperty(this, \"_parent\", void 0);\n\n    _defineProperty(this, \"_name\", void 0);\n\n    this._parent = parent;\n    this._name = name;\n  }\n  /**\n   * Explicitly sets read operations to a no-op.\n   */\n\n\n  _read() {\n    return undefined;\n  }\n  /**\n   * Called when data should be written to this writable stream.\n   *\n   * @param chunk - Arbitrary object to write\n   * @param encoding - Encoding to use when writing payload\n   * @param callback - Called when writing is complete or an error occurs\n   */\n\n\n  _write(chunk, _encoding, callback) {\n    this._parent.push({\n      name: this._name,\n      data: chunk\n    });\n\n    callback();\n  }\n\n}\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nconst IGNORE_SUBSTREAM = Symbol(\"IGNORE_SUBSTREAM\");\nclass ObjectMultiplex extends Duplex {\n  constructor() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(_objectSpread(_objectSpread({}, opts), {}, {\n      objectMode: true\n    }));\n\n    _defineProperty(this, \"_substreams\", void 0);\n\n    _defineProperty(this, \"getStream\", void 0);\n\n    this._substreams = {};\n  }\n\n  createStream(name) {\n    // validate name\n    if (!name) {\n      throw new Error(\"ObjectMultiplex - name must not be empty\");\n    }\n\n    if (this._substreams[name]) {\n      throw new Error(\"ObjectMultiplex - Substream for name \\\"\".concat(name, \"\\\" already exists\"));\n    } // create substream\n\n\n    const substream = new Substream({\n      parent: this,\n      name\n    });\n    this._substreams[name] = substream; // listen for parent stream to end\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n\n    anyStreamEnd(this, _error => substream.destroy(_error || undefined));\n    return substream;\n  } // ignore streams (dont display orphaned data warning)\n\n\n  ignoreStream(name) {\n    // validate name\n    if (!name) {\n      throw new Error(\"ObjectMultiplex - name must not be empty\");\n    }\n\n    if (this._substreams[name]) {\n      throw new Error(\"ObjectMultiplex - Substream for name \\\"\".concat(name, \"\\\" already exists\"));\n    } // set\n\n\n    this._substreams[name] = IGNORE_SUBSTREAM;\n  }\n\n  _read() {\n    return undefined;\n  }\n\n  _write(chunk, _encoding, callback) {\n    const {\n      name,\n      data\n    } = chunk;\n\n    if (!name) {\n      window.console.warn(\"ObjectMultiplex - malformed chunk without name \\\"\".concat(chunk, \"\\\"\"));\n      return callback();\n    } // get corresponding substream\n\n\n    const substream = this._substreams[name];\n\n    if (!substream) {\n      window.console.warn(\"ObjectMultiplex - orphaned data for stream \\\"\".concat(name, \"\\\"\"));\n      return callback();\n    } // push data into substream\n\n\n    if (substream !== IGNORE_SUBSTREAM) {\n      substream.push(data);\n    }\n\n    return callback();\n  }\n\n} // util\n\nfunction anyStreamEnd(stream, _cb) {\n  const cb = once(_cb);\n  eos(stream, {\n    readable: false\n  }, cb);\n  eos(stream, {\n    writable: false\n  }, cb);\n}\n\nfunction setupMultiplex(stream) {\n  const mux = new ObjectMultiplex();\n\n  mux.getStream = function streamHelper(name) {\n    if (this._substreams[name]) {\n      return this._substreams[name];\n    }\n\n    return this.createStream(name);\n  };\n\n  pump(stream, mux, stream, err => {\n    if (err) window.console.error(err);\n  });\n  return mux;\n}\n\nclass PostMessageStream extends BasePostMessageStream {\n  _postMessage(data) {\n    let originConstraint = this._targetOrigin;\n\n    if (typeof data === \"object\") {\n      const dataObj = data;\n\n      if (typeof dataObj.data === \"object\") {\n        const dataObjData = dataObj.data;\n\n        if (Array.isArray(dataObjData.params) && dataObjData.params.length > 0) {\n          const dataObjDataParam = dataObjData.params[0];\n\n          if (dataObjDataParam._origin) {\n            originConstraint = dataObjDataParam._origin;\n          } // add a constraint for the response\n\n\n          dataObjDataParam._origin = window.location.origin;\n        }\n      }\n    }\n\n    this._targetWindow.postMessage({\n      target: this._target,\n      data\n    }, originConstraint);\n  }\n\n}\n\nexport { BasePostMessageStream, IGNORE_SUBSTREAM, JRPCEngine, ObjectMultiplex, PostMessageStream, SafeEventEmitter, SerializableError, Substream, createAsyncMiddleware, createEngineStream, createErrorMiddleware, createIdRemapMiddleware, createLoggerMiddleware, createScaffoldMiddleware, createStreamMiddleware, getRpcPromiseCallback, mergeMiddleware, serializeError, setupMultiplex };\n//# sourceMappingURL=openloginJrpc.esm.js.map\n"]},"metadata":{},"sourceType":"module"}