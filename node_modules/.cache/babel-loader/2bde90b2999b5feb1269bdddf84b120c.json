{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/mikovainio/FyFy/token-swap/node_modules/@babel/runtime/regenerator/index.js\");\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fetchUserFarms = exports.fetchGlobalFarms = exports.fetchBatchedAccountInfos = void 0;\n\nvar GlobalFarm_1 = __importStar(require(\"../models/GlobalFarm\"));\n\nvar layout_1 = require(\"../utils/layout\");\n\nvar UserFarm_1 = __importDefault(require(\"../models/UserFarm\"));\n\nvar UserFarm_2 = require(\"../models/UserFarm\");\n\nvar spl_token_1 = require(\"@solana/spl-token\");\n\nfunction fetchBatchedAccountInfos(connection, pubkeys) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var requests, results;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            requests = pubkeys.map(function (pubkey) {\n              return {\n                methodName: \"getAccountInfo\",\n                // Passing \"jsonParsed\" as the encoding allows the address to be treated as a base58 string\n                args: connection._buildArgs([pubkey.toBase58()], \"singleGossip\", \"jsonParsed\")\n              };\n            });\n            _context.next = 3;\n            return connection._rpcBatchRequest(requests);\n\n          case 3:\n            results = _context.sent;\n            return _context.abrupt(\"return\", results // Convert from RPC request response to AccountInfo<Buffer>\n            .map(function (res) {\n              return res.result.value ? Object.assign({}, res.result.value, {\n                // This Buffer conversion is based on\n                // https://github.com/solana-labs/solana-web3.js/blob/master/src/connection.ts#L57\n                // Below, data[0] is the actual data, data[1] is the format (base64)\n                data: Buffer.from(res.result.value.data[0], \"base64\")\n              }) : null;\n            }));\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n}\n\nexports.fetchBatchedAccountInfos = fetchBatchedAccountInfos;\n/**\n *\n * @param connection A Solana RPC connection\n * @param farmPubkeys The public keys for the GlobalFarm accounts\n * @returns An array of GlobalFarm models\n */\n\nfunction fetchGlobalFarms(connection, farmPubkeys, programId) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n    var _this = this;\n\n    var accountInfos;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return fetchBatchedAccountInfos(connection, farmPubkeys);\n\n          case 2:\n            accountInfos = _context3.sent;\n            return _context3.abrupt(\"return\", Promise.all(accountInfos.map(function (accountInfo, i) {\n              return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n                var decoded, publicKey, authority;\n                return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                  while (1) {\n                    switch (_context2.prev = _context2.next) {\n                      case 0:\n                        if (accountInfo) {\n                          _context2.next = 2;\n                          break;\n                        }\n\n                        throw new Error(\"GlobalFarm not found\");\n\n                      case 2:\n                        decoded = layout_1.decodeGlobalFarmBuffer(accountInfo);\n                        publicKey = farmPubkeys[i];\n                        _context2.next = 6;\n                        return GlobalFarm_1.getAuthorityAndNonce(publicKey, programId);\n\n                      case 6:\n                        authority = _context2.sent[0];\n                        return _context2.abrupt(\"return\", new GlobalFarm_1.default(Object.assign(Object.assign({}, decoded), {\n                          publicKey: publicKey,\n                          authority: authority\n                        })));\n\n                      case 8:\n                      case \"end\":\n                        return _context2.stop();\n                    }\n                  }\n                }, _callee2);\n              }));\n            })));\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n}\n\nexports.fetchGlobalFarms = fetchGlobalFarms;\n/**\n *\n * @param connection A Solana RPC connection\n * @param userPubkey The user's SOL address (UserFarm.owner)\n * @param farmPubkeys The public keys for the GlobalFarm accounts for which to fetch UserFarm accounts\n * @returns An array of GlobalFarm models\n */\n\nfunction fetchUserFarms(connection, userPubkey, farmPubkeys, programId) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n    var _this2 = this;\n\n    var addresses, accountInfos;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.next = 2;\n            return Promise.all(farmPubkeys.map(function (globalFarmPubkey) {\n              return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n                return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n                  while (1) {\n                    switch (_context4.prev = _context4.next) {\n                      case 0:\n                        _context4.next = 2;\n                        return UserFarm_2.getUserFarmAddress(globalFarmPubkey, userPubkey, spl_token_1.TOKEN_PROGRAM_ID, programId);\n\n                      case 2:\n                        return _context4.abrupt(\"return\", _context4.sent[0]);\n\n                      case 3:\n                      case \"end\":\n                        return _context4.stop();\n                    }\n                  }\n                }, _callee4);\n              }));\n            }));\n\n          case 2:\n            addresses = _context5.sent;\n            _context5.next = 5;\n            return fetchBatchedAccountInfos(connection, addresses);\n\n          case 5:\n            accountInfos = _context5.sent;\n            return _context5.abrupt(\"return\", accountInfos.map(function (accountInfo, i) {\n              if (!accountInfo) {\n                return null;\n              }\n\n              var decoded = layout_1.decodeUserFarmBuffer(accountInfo);\n              return new UserFarm_1.default(Object.assign(Object.assign({}, decoded), {\n                publicKey: addresses[i]\n              }));\n            }));\n\n          case 7:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n}\n\nexports.fetchUserFarms = fetchUserFarms;","map":{"version":3,"sources":["../../src/rpc/farms.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAA,YAAA,GAAA,YAAA,CAAA,OAAA,CAAA,sBAAA,CAAA,CAAA;;AACA,IAAA,QAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AACA,IAAA,UAAA,GAAA,eAAA,CAAA,OAAA,CAAA,oBAAA,CAAA,CAAA;;AACA,IAAA,UAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;AACA,IAAA,WAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AAEA,SAAsB,wBAAtB,CACE,UADF,EAEE,OAFF,EAEsB;;;;;;;AAEd,YAAA,Q,GAAW,OAAO,CAAC,GAAR,CAAY,UAAC,MAAD;AAAA,qBAAa;AACxC,gBAAA,UAAU,EAAE,gBAD4B;AAGxC;AACA,gBAAA,IAAI,EAAE,UAAU,CAAC,UAAX,CACJ,CAAC,MAAM,CAAC,QAAP,EAAD,CADI,EAEJ,cAFI,EAGJ,YAHI;AAJkC,eAAb;AAAA,aAAZ,C;;AAWI,mBAAM,UAAU,CAAC,gBAAX,CAA4B,QAA5B,CAAN;;;AAAf,YAAA,O;6CAGJ,OAAO,CACL;AADK,aAEJ,GAFH,CAEO,UAAC,GAAD;AAAA,qBACH,GAAG,CAAC,MAAJ,CAAW,KAAX,GACI,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,GAAG,CAAC,MAAJ,CAAW,KAA7B,EAAoC;AAClC;AACA;AACA;AACA,gBAAA,IAAI,EAAE,MAAM,CAAC,IAAP,CAAY,GAAG,CAAC,MAAJ,CAAW,KAAX,CAAiB,IAAjB,CAAsB,CAAtB,CAAZ,EAAsC,QAAtC;AAJ4B,eAApC,CADJ,GAOI,IARD;AAAA,aAFP,C;;;;;;;;;AAaH;;AA/BD,OAAA,CAAA,wBAAA,GAAA,wBAAA;AAiCA;;;;;AAKG;;AACH,SAAsB,gBAAtB,CACE,UADF,EAEE,WAFF,EAGE,SAHF,EAGsB;;;;;;;;;;AAEC,mBAAM,wBAAwB,CAAC,UAAD,EAAa,WAAb,CAA9B;;;AAAf,YAAA,Y;8CAEC,OAAO,CAAC,GAAR,CACL,YAAY,CAAC,GAAb,CACE,UAAO,WAAP,EAAgD,CAAhD;AAAA,qBAA6D,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,wCAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BACtD,WADsD;AAAA;AAAA;AAAA;;AAAA,8BAEnD,IAAI,KAAJ,CAAU,sBAAV,CAFmD;;AAAA;AAKrD,wBAAA,OALqD,GAK3C,QAAA,CAAA,sBAAA,CAAuB,WAAvB,CAL2C;AAMrD,wBAAA,SANqD,GAMzC,WAAW,CAAC,CAAD,CAN8B;AAAA;AAOxC,+BAAM,YAAA,CAAA,oBAAA,CAAqB,SAArB,EAAgC,SAAhC,CAAN;;AAPwC;AAOrD,wBAAA,SAPqD,kBAOU,CAPV;AAAA,0DAQpD,IAAI,YAAA,CAAA,OAAJ,CAAc,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAChB,OADgB,CAAA,EACT;AACV,0BAAA,SAAS,EAAT,SADU;AAEV,0BAAA,SAAS,EAAT;AAFU,yBADS,CAAd,CARoD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAA,EAA7D;AAAA,aADF,CADK,C;;;;;;;;;AAkBR;;AAzBD,OAAA,CAAA,gBAAA,GAAA,gBAAA;AA2BA;;;;;;AAMG;;AACH,SAAsB,cAAtB,CACE,UADF,EAEE,UAFF,EAGE,WAHF,EAIE,SAJF,EAIsB;;;;;;;;;;AAEW,mBAAM,OAAO,CAAC,GAAR,CACnC,WAAW,CAAC,GAAZ,CAAgB,UAAO,gBAAP;AAAA,qBAA+C,SAAA,CAAA,MAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,wCAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAE3D,+BAAM,UAAA,CAAA,kBAAA,CACJ,gBADI,EAEJ,UAFI,EAGJ,WAAA,CAAA,gBAHI,EAIJ,SAJI,CAAN;;AAF2D;AAAA,yEAQ3D,CAR2D;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAA,EAA/C;AAAA,aAAhB,CADmC,CAAN;;;AAAzB,YAAA,S;;AAae,mBAAM,wBAAwB,CAAC,UAAD,EAAa,SAAb,CAA9B;;;AAAf,YAAA,Y;8CAEC,YAAY,CAAC,GAAb,CACL,UAAC,WAAD,EAA0C,CAA1C,EAAuD;AACrD,kBAAI,CAAC,WAAL,EAAkB;AAChB,uBAAO,IAAP;AACD;;AAED,kBAAM,OAAO,GAAG,QAAA,CAAA,oBAAA,CAAqB,WAArB,CAAhB;AACA,qBAAO,IAAI,UAAA,CAAA,OAAJ,CAAY,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAM,OAAN,CAAA,EAAa;AAAE,gBAAA,SAAS,EAAE,SAAS,CAAC,CAAD;AAAtB,eAAb,CAAZ,CAAP;AACD,aARI,C;;;;;;;;;AAUR;;AA/BD,OAAA,CAAA,cAAA,GAAA,cAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.fetchUserFarms = exports.fetchGlobalFarms = exports.fetchBatchedAccountInfos = void 0;\nconst GlobalFarm_1 = __importStar(require(\"../models/GlobalFarm\"));\nconst layout_1 = require(\"../utils/layout\");\nconst UserFarm_1 = __importDefault(require(\"../models/UserFarm\"));\nconst UserFarm_2 = require(\"../models/UserFarm\");\nconst spl_token_1 = require(\"@solana/spl-token\");\nfunction fetchBatchedAccountInfos(connection, pubkeys) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const requests = pubkeys.map((pubkey) => ({\n            methodName: \"getAccountInfo\",\n            // Passing \"jsonParsed\" as the encoding allows the address to be treated as a base58 string\n            args: connection._buildArgs([pubkey.toBase58()], \"singleGossip\", \"jsonParsed\"),\n        }));\n        const results = yield connection._rpcBatchRequest(requests);\n        return (results\n            // Convert from RPC request response to AccountInfo<Buffer>\n            .map((res) => res.result.value\n            ? Object.assign({}, res.result.value, {\n                // This Buffer conversion is based on\n                // https://github.com/solana-labs/solana-web3.js/blob/master/src/connection.ts#L57\n                // Below, data[0] is the actual data, data[1] is the format (base64)\n                data: Buffer.from(res.result.value.data[0], \"base64\"),\n            })\n            : null));\n    });\n}\nexports.fetchBatchedAccountInfos = fetchBatchedAccountInfos;\n/**\n *\n * @param connection A Solana RPC connection\n * @param farmPubkeys The public keys for the GlobalFarm accounts\n * @returns An array of GlobalFarm models\n */\nfunction fetchGlobalFarms(connection, farmPubkeys, programId) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const accountInfos = yield fetchBatchedAccountInfos(connection, farmPubkeys);\n        return Promise.all(accountInfos.map((accountInfo, i) => __awaiter(this, void 0, void 0, function* () {\n            if (!accountInfo) {\n                throw new Error(\"GlobalFarm not found\");\n            }\n            const decoded = layout_1.decodeGlobalFarmBuffer(accountInfo);\n            const publicKey = farmPubkeys[i];\n            const authority = (yield GlobalFarm_1.getAuthorityAndNonce(publicKey, programId))[0];\n            return new GlobalFarm_1.default(Object.assign(Object.assign({}, decoded), { publicKey,\n                authority }));\n        })));\n    });\n}\nexports.fetchGlobalFarms = fetchGlobalFarms;\n/**\n *\n * @param connection A Solana RPC connection\n * @param userPubkey The user's SOL address (UserFarm.owner)\n * @param farmPubkeys The public keys for the GlobalFarm accounts for which to fetch UserFarm accounts\n * @returns An array of GlobalFarm models\n */\nfunction fetchUserFarms(connection, userPubkey, farmPubkeys, programId) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const addresses = yield Promise.all(farmPubkeys.map((globalFarmPubkey) => __awaiter(this, void 0, void 0, function* () {\n            return (yield UserFarm_2.getUserFarmAddress(globalFarmPubkey, userPubkey, spl_token_1.TOKEN_PROGRAM_ID, programId))[0];\n        })));\n        const accountInfos = yield fetchBatchedAccountInfos(connection, addresses);\n        return accountInfos.map((accountInfo, i) => {\n            if (!accountInfo) {\n                return null;\n            }\n            const decoded = layout_1.decodeUserFarmBuffer(accountInfo);\n            return new UserFarm_1.default(Object.assign(Object.assign({}, decoded), { publicKey: addresses[i] }));\n        });\n    });\n}\nexports.fetchUserFarms = fetchUserFarms;\n//# sourceMappingURL=farms.js.map"]},"metadata":{},"sourceType":"script"}