{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/mikovainio/FyFy/token-swap/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/Users/mikovainio/FyFy/token-swap/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _slicedToArray = require(\"/Users/mikovainio/FyFy/token-swap/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ConstantProductPoolQuoteBuilder = void 0;\n\nvar spl_token_1 = require(\"@solana/spl-token\");\n\nvar decimal_js_1 = __importDefault(require(\"decimal.js\"));\n\nvar tokens_1 = require(\"../../constants/tokens\");\n\nvar public_1 = require(\"../../public\");\n/**\n * ConstantProductPools\n *\n * Product price curve:\n * x = inputTokenCount\n * y = outputTokenCount\n * k =  x * y\n */\n\n\nfunction _getRate(inputTradeAmountU64, params) {\n  if (inputTradeAmountU64.eq(public_1.ZERO)) {\n    return new decimal_js_1.default(0);\n  }\n\n  var expectedOutputAmountU64 = _getExpectedOutputAmount(inputTradeAmountU64, params);\n\n  var inputTradeAmount = public_1.DecimalUtil.fromU64(inputTradeAmountU64, params.inputToken.scale);\n  var outputTradeAmount = public_1.DecimalUtil.fromU64(expectedOutputAmountU64, params.outputToken.scale);\n  return outputTradeAmount.div(inputTradeAmount).toDecimalPlaces(params.outputToken.scale);\n}\n\nfunction _getPriceImpact(inputTradeAmount, params) {\n  if (inputTradeAmount.eq(public_1.ZERO) || params.outputTokenCount.eq(public_1.ZERO)) {\n    return new decimal_js_1.default(0);\n  }\n\n  var noSlippageOutputCountU64 = getExpectedOutputAmountWithNoSlippage(inputTradeAmount, params);\n\n  var outputCountU64 = _getExpectedOutputAmount(inputTradeAmount, params);\n\n  var noSlippageOutputCount = public_1.DecimalUtil.fromU64(noSlippageOutputCountU64, params.outputToken.scale);\n  var outputCount = public_1.DecimalUtil.fromU64(outputCountU64, params.outputToken.scale);\n  var impact = noSlippageOutputCount.sub(outputCount).div(noSlippageOutputCount);\n  return impact.mul(100).toDecimalPlaces(params.outputToken.scale);\n}\n\nfunction _getLPFees(inputTradeAmount, params) {\n  var feeStructure = params.feeStructure;\n  var tradingFee = inputTradeAmount.mul(feeStructure.traderFee.numerator).div(feeStructure.traderFee.denominator);\n  var ownerFee = inputTradeAmount.mul(feeStructure.ownerFee.numerator).div(feeStructure.ownerFee.denominator);\n  return new spl_token_1.u64(tradingFee.add(ownerFee).toString());\n}\n\nfunction _getExpectedOutputAmount(inputTradeAmount, params) {\n  var inputTradeLessFees = inputTradeAmount.sub(_getLPFees(inputTradeAmount, params));\n  return getOutputAmount(inputTradeLessFees, params);\n}\n\nfunction getExpectedOutputAmountWithNoSlippage(inputTradeAmount, params) {\n  if (params.inputTokenCount.eq(public_1.ZERO)) {\n    return params.outputTokenCount;\n  }\n\n  var inputTradeLessFees = inputTradeAmount.sub(_getLPFees(inputTradeAmount, params));\n  return inputTradeLessFees.mul(params.outputTokenCount).div(params.inputTokenCount);\n}\n\nfunction getMinimumAmountOut(inputTradeAmount, params) {\n  var slippageTolerance = params.slippageTolerance;\n\n  var expectedOutputAmountFees = _getExpectedOutputAmount(inputTradeAmount, params);\n\n  var result = expectedOutputAmountFees.mul(slippageTolerance.denominator.sub(slippageTolerance.numerator)).div(slippageTolerance.denominator);\n  return result;\n} // Note: This function matches the calculation done on SERUM and on Web UI.\n// Given k = currInputTokenCount * currOutputTokenCount and k = newInputTokenCount * newOutputTokenCount,\n// solve for newOutputTokenCount\n\n\nfunction getOutputAmount(inputTradeAmount, params) {\n  var _ref = [params.inputTokenCount, params.outputTokenCount],\n      poolInputAmount = _ref[0],\n      poolOutputAmount = _ref[1];\n  var invariant = poolInputAmount.mul(poolOutputAmount);\n\n  var _public_1$U64Utils$ce = public_1.U64Utils.ceilingDivision(invariant, poolInputAmount.add(inputTradeAmount)),\n      _public_1$U64Utils$ce2 = _slicedToArray(_public_1$U64Utils$ce, 1),\n      newPoolOutputAmount = _public_1$U64Utils$ce2[0];\n\n  var outputAmount = poolOutputAmount.sub(newPoolOutputAmount);\n  return new spl_token_1.u64(outputAmount.toString());\n}\n\nfunction _getNetworkFees(params) {\n  var numSigs;\n\n  if (params.inputToken === tokens_1.solToken || params.outputToken === tokens_1.solToken) {\n    numSigs = 3;\n  } else {\n    numSigs = 2;\n  }\n\n  return params.lamportsPerSignature * numSigs;\n}\n\nvar ConstantProductPoolQuoteBuilder = /*#__PURE__*/function () {\n  function ConstantProductPoolQuoteBuilder() {\n    _classCallCheck(this, ConstantProductPoolQuoteBuilder);\n  }\n\n  _createClass(ConstantProductPoolQuoteBuilder, [{\n    key: \"buildQuote\",\n    value: function buildQuote(params, inputTradeAmount) {\n      return {\n        getRate: function getRate() {\n          return _getRate(inputTradeAmount, params);\n        },\n        getPriceImpact: function getPriceImpact() {\n          return _getPriceImpact(inputTradeAmount, params);\n        },\n        getLPFees: function getLPFees() {\n          return public_1.OrcaU64.fromU64(_getLPFees(inputTradeAmount, params), params.inputToken.scale);\n        },\n        getNetworkFees: function getNetworkFees() {\n          return public_1.OrcaU64.fromNumber(_getNetworkFees(params));\n        },\n        getExpectedOutputAmount: function getExpectedOutputAmount() {\n          return public_1.OrcaU64.fromU64(_getExpectedOutputAmount(inputTradeAmount, params), params.outputToken.scale);\n        },\n        getMinOutputAmount: function getMinOutputAmount() {\n          return public_1.OrcaU64.fromU64(getMinimumAmountOut(inputTradeAmount, params), params.outputToken.scale);\n        }\n      };\n    }\n  }]);\n\n  return ConstantProductPoolQuoteBuilder;\n}();\n\nexports.ConstantProductPoolQuoteBuilder = ConstantProductPoolQuoteBuilder;","map":{"version":3,"sources":["/Users/mikovainio/FyFy/token-swap/node_modules/@orca-so/sdk/dist/model/quote/constant-product-quote.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","ConstantProductPoolQuoteBuilder","spl_token_1","require","decimal_js_1","tokens_1","public_1","getRate","inputTradeAmountU64","params","eq","ZERO","default","expectedOutputAmountU64","getExpectedOutputAmount","inputTradeAmount","DecimalUtil","fromU64","inputToken","scale","outputTradeAmount","outputToken","div","toDecimalPlaces","getPriceImpact","outputTokenCount","noSlippageOutputCountU64","getExpectedOutputAmountWithNoSlippage","outputCountU64","noSlippageOutputCount","outputCount","impact","sub","mul","getLPFees","feeStructure","tradingFee","traderFee","numerator","denominator","ownerFee","u64","add","toString","inputTradeLessFees","getOutputAmount","inputTokenCount","getMinimumAmountOut","slippageTolerance","expectedOutputAmountFees","result","poolInputAmount","poolOutputAmount","invariant","U64Utils","ceilingDivision","newPoolOutputAmount","outputAmount","getNetworkFees","numSigs","solToken","lamportsPerSignature","OrcaU64","fromNumber","getMinOutputAmount"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ConstantProductPoolQuoteBuilder = void 0;\nconst spl_token_1 = require(\"@solana/spl-token\");\nconst decimal_js_1 = __importDefault(require(\"decimal.js\"));\nconst tokens_1 = require(\"../../constants/tokens\");\nconst public_1 = require(\"../../public\");\n/**\n * ConstantProductPools\n *\n * Product price curve:\n * x = inputTokenCount\n * y = outputTokenCount\n * k =  x * y\n */\nfunction getRate(inputTradeAmountU64, params) {\n    if (inputTradeAmountU64.eq(public_1.ZERO)) {\n        return new decimal_js_1.default(0);\n    }\n    const expectedOutputAmountU64 = getExpectedOutputAmount(inputTradeAmountU64, params);\n    const inputTradeAmount = public_1.DecimalUtil.fromU64(inputTradeAmountU64, params.inputToken.scale);\n    const outputTradeAmount = public_1.DecimalUtil.fromU64(expectedOutputAmountU64, params.outputToken.scale);\n    return outputTradeAmount.div(inputTradeAmount).toDecimalPlaces(params.outputToken.scale);\n}\nfunction getPriceImpact(inputTradeAmount, params) {\n    if (inputTradeAmount.eq(public_1.ZERO) || params.outputTokenCount.eq(public_1.ZERO)) {\n        return new decimal_js_1.default(0);\n    }\n    const noSlippageOutputCountU64 = getExpectedOutputAmountWithNoSlippage(inputTradeAmount, params);\n    const outputCountU64 = getExpectedOutputAmount(inputTradeAmount, params);\n    const noSlippageOutputCount = public_1.DecimalUtil.fromU64(noSlippageOutputCountU64, params.outputToken.scale);\n    const outputCount = public_1.DecimalUtil.fromU64(outputCountU64, params.outputToken.scale);\n    const impact = noSlippageOutputCount.sub(outputCount).div(noSlippageOutputCount);\n    return impact.mul(100).toDecimalPlaces(params.outputToken.scale);\n}\nfunction getLPFees(inputTradeAmount, params) {\n    const { feeStructure } = params;\n    const tradingFee = inputTradeAmount\n        .mul(feeStructure.traderFee.numerator)\n        .div(feeStructure.traderFee.denominator);\n    const ownerFee = inputTradeAmount\n        .mul(feeStructure.ownerFee.numerator)\n        .div(feeStructure.ownerFee.denominator);\n    return new spl_token_1.u64(tradingFee.add(ownerFee).toString());\n}\nfunction getExpectedOutputAmount(inputTradeAmount, params) {\n    const inputTradeLessFees = inputTradeAmount.sub(getLPFees(inputTradeAmount, params));\n    return getOutputAmount(inputTradeLessFees, params);\n}\nfunction getExpectedOutputAmountWithNoSlippage(inputTradeAmount, params) {\n    if (params.inputTokenCount.eq(public_1.ZERO)) {\n        return params.outputTokenCount;\n    }\n    const inputTradeLessFees = inputTradeAmount.sub(getLPFees(inputTradeAmount, params));\n    return inputTradeLessFees.mul(params.outputTokenCount).div(params.inputTokenCount);\n}\nfunction getMinimumAmountOut(inputTradeAmount, params) {\n    const slippageTolerance = params.slippageTolerance;\n    const expectedOutputAmountFees = getExpectedOutputAmount(inputTradeAmount, params);\n    const result = expectedOutputAmountFees\n        .mul(slippageTolerance.denominator.sub(slippageTolerance.numerator))\n        .div(slippageTolerance.denominator);\n    return result;\n}\n// Note: This function matches the calculation done on SERUM and on Web UI.\n// Given k = currInputTokenCount * currOutputTokenCount and k = newInputTokenCount * newOutputTokenCount,\n// solve for newOutputTokenCount\nfunction getOutputAmount(inputTradeAmount, params) {\n    const [poolInputAmount, poolOutputAmount] = [params.inputTokenCount, params.outputTokenCount];\n    const invariant = poolInputAmount.mul(poolOutputAmount);\n    const [newPoolOutputAmount] = public_1.U64Utils.ceilingDivision(invariant, poolInputAmount.add(inputTradeAmount));\n    const outputAmount = poolOutputAmount.sub(newPoolOutputAmount);\n    return new spl_token_1.u64(outputAmount.toString());\n}\nfunction getNetworkFees(params) {\n    let numSigs;\n    if (params.inputToken === tokens_1.solToken || params.outputToken === tokens_1.solToken) {\n        numSigs = 3;\n    }\n    else {\n        numSigs = 2;\n    }\n    return params.lamportsPerSignature * numSigs;\n}\nclass ConstantProductPoolQuoteBuilder {\n    buildQuote(params, inputTradeAmount) {\n        return {\n            getRate: () => getRate(inputTradeAmount, params),\n            getPriceImpact: () => getPriceImpact(inputTradeAmount, params),\n            getLPFees: () => public_1.OrcaU64.fromU64(getLPFees(inputTradeAmount, params), params.inputToken.scale),\n            getNetworkFees: () => public_1.OrcaU64.fromNumber(getNetworkFees(params)),\n            getExpectedOutputAmount: () => public_1.OrcaU64.fromU64(getExpectedOutputAmount(inputTradeAmount, params), params.outputToken.scale),\n            getMinOutputAmount: () => public_1.OrcaU64.fromU64(getMinimumAmountOut(inputTradeAmount, params), params.outputToken.scale),\n        };\n    }\n}\nexports.ConstantProductPoolQuoteBuilder = ConstantProductPoolQuoteBuilder;\n"]},"metadata":{},"sourceType":"script"}