{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/mikovainio/FyFy/token-swap/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/Users/mikovainio/FyFy/token-swap/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.U64Utils = exports.ONE = exports.ZERO = void 0;\n\nvar spl_token_1 = require(\"@solana/spl-token\");\n\nvar __1 = require(\"../..\");\n\nvar decimal_utils_1 = require(\"./decimal-utils\");\n\nexports.ZERO = new spl_token_1.u64(0);\nexports.ONE = new spl_token_1.u64(1);\n\nvar U64Utils = /*#__PURE__*/function () {\n  function U64Utils() {\n    _classCallCheck(this, U64Utils);\n  }\n\n  _createClass(U64Utils, null, [{\n    key: \"toTokenU64\",\n    value: function toTokenU64(input, token, varName) {\n      if (input instanceof __1.OrcaU64) {\n        if (input.scale !== token.scale) {\n          throw new Error(\"\".concat(varName, \"'s scale of \").concat(input.scale, \" does not match token's decimal of \").concat(token.scale));\n        }\n\n        return input.toU64();\n      }\n\n      return decimal_utils_1.DecimalUtil.toU64(input, token.scale);\n    }\n  }, {\n    key: \"toPoolU64\",\n    value: function toPoolU64(input, pool, varName) {\n      if (input instanceof __1.OrcaU64) {\n        if (input.scale !== pool.poolTokenDecimals) {\n          throw new Error(\"\".concat(varName, \"'s scale of \").concat(input.scale, \" does not match pool's decimal of \").concat(pool.poolTokenDecimals));\n        }\n\n        return input.toU64();\n      }\n\n      return decimal_utils_1.DecimalUtil.toU64(input, pool.poolTokenDecimals);\n    }\n  }, {\n    key: \"toFarmU64\",\n    value: function toFarmU64(input, farm, varName) {\n      if (input instanceof __1.OrcaU64) {\n        if (input.scale !== farm.baseTokenDecimals) {\n          throw new Error(\"\".concat(varName, \"'s scale of \").concat(input.scale, \" does not match baseToken's decimal of \").concat(farm.baseTokenDecimals));\n        }\n\n        return input.toU64();\n      }\n\n      return decimal_utils_1.DecimalUtil.toU64(input, farm.baseTokenDecimals);\n    } // Note: divisor input variable modified in place\n    // https://github.com/solana-labs/solana-program-library/blob/master/libraries/math/src/checked_ceil_div.rs#L5-L22\n\n  }, {\n    key: \"ceilingDivision\",\n    value: function ceilingDivision(dividend, divisor) {\n      var quotient = dividend.div(divisor);\n\n      if (quotient.eq(exports.ZERO)) {\n        return [exports.ZERO, divisor];\n      }\n\n      var remainder = dividend.mod(divisor);\n\n      if (remainder.gt(exports.ZERO)) {\n        quotient = quotient.add(exports.ONE);\n        divisor = dividend.div(quotient);\n        remainder = dividend.mod(quotient);\n\n        if (remainder.gt(exports.ZERO)) {\n          divisor = divisor.add(exports.ONE);\n        }\n      }\n\n      return [quotient, divisor];\n    }\n  }]);\n\n  return U64Utils;\n}();\n\nexports.U64Utils = U64Utils;","map":{"version":3,"sources":["/Users/mikovainio/FyFy/token-swap/node_modules/@orca-so/sdk/dist/public/utils/numbers/u64-utils.js"],"names":["Object","defineProperty","exports","value","U64Utils","ONE","ZERO","spl_token_1","require","__1","decimal_utils_1","u64","input","token","varName","OrcaU64","scale","Error","toU64","DecimalUtil","pool","poolTokenDecimals","farm","baseTokenDecimals","dividend","divisor","quotient","div","eq","remainder","mod","gt","add"],"mappings":"AAAA;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,QAAR,GAAmBF,OAAO,CAACG,GAAR,GAAcH,OAAO,CAACI,IAAR,GAAe,KAAK,CAArD;;AACA,IAAMC,WAAW,GAAGC,OAAO,CAAC,mBAAD,CAA3B;;AACA,IAAMC,GAAG,GAAGD,OAAO,CAAC,OAAD,CAAnB;;AACA,IAAME,eAAe,GAAGF,OAAO,CAAC,iBAAD,CAA/B;;AACAN,OAAO,CAACI,IAAR,GAAe,IAAIC,WAAW,CAACI,GAAhB,CAAoB,CAApB,CAAf;AACAT,OAAO,CAACG,GAAR,GAAc,IAAIE,WAAW,CAACI,GAAhB,CAAoB,CAApB,CAAd;;IACMP,Q;;;;;;;WACF,oBAAkBQ,KAAlB,EAAyBC,KAAzB,EAAgCC,OAAhC,EAAyC;AACrC,UAAIF,KAAK,YAAYH,GAAG,CAACM,OAAzB,EAAkC;AAC9B,YAAIH,KAAK,CAACI,KAAN,KAAgBH,KAAK,CAACG,KAA1B,EAAiC;AAC7B,gBAAM,IAAIC,KAAJ,WAAaH,OAAb,yBAAmCF,KAAK,CAACI,KAAzC,gDAAoFH,KAAK,CAACG,KAA1F,EAAN;AACH;;AACD,eAAOJ,KAAK,CAACM,KAAN,EAAP;AACH;;AACD,aAAOR,eAAe,CAACS,WAAhB,CAA4BD,KAA5B,CAAkCN,KAAlC,EAAyCC,KAAK,CAACG,KAA/C,CAAP;AACH;;;WACD,mBAAiBJ,KAAjB,EAAwBQ,IAAxB,EAA8BN,OAA9B,EAAuC;AACnC,UAAIF,KAAK,YAAYH,GAAG,CAACM,OAAzB,EAAkC;AAC9B,YAAIH,KAAK,CAACI,KAAN,KAAgBI,IAAI,CAACC,iBAAzB,EAA4C;AACxC,gBAAM,IAAIJ,KAAJ,WAAaH,OAAb,yBAAmCF,KAAK,CAACI,KAAzC,+CAAmFI,IAAI,CAACC,iBAAxF,EAAN;AACH;;AACD,eAAOT,KAAK,CAACM,KAAN,EAAP;AACH;;AACD,aAAOR,eAAe,CAACS,WAAhB,CAA4BD,KAA5B,CAAkCN,KAAlC,EAAyCQ,IAAI,CAACC,iBAA9C,CAAP;AACH;;;WACD,mBAAiBT,KAAjB,EAAwBU,IAAxB,EAA8BR,OAA9B,EAAuC;AACnC,UAAIF,KAAK,YAAYH,GAAG,CAACM,OAAzB,EAAkC;AAC9B,YAAIH,KAAK,CAACI,KAAN,KAAgBM,IAAI,CAACC,iBAAzB,EAA4C;AACxC,gBAAM,IAAIN,KAAJ,WAAaH,OAAb,yBAAmCF,KAAK,CAACI,KAAzC,oDAAwFM,IAAI,CAACC,iBAA7F,EAAN;AACH;;AACD,eAAOX,KAAK,CAACM,KAAN,EAAP;AACH;;AACD,aAAOR,eAAe,CAACS,WAAhB,CAA4BD,KAA5B,CAAkCN,KAAlC,EAAyCU,IAAI,CAACC,iBAA9C,CAAP;AACH,K,CACD;AACA;;;;WACA,yBAAuBC,QAAvB,EAAiCC,OAAjC,EAA0C;AACtC,UAAIC,QAAQ,GAAGF,QAAQ,CAACG,GAAT,CAAaF,OAAb,CAAf;;AACA,UAAIC,QAAQ,CAACE,EAAT,CAAY1B,OAAO,CAACI,IAApB,CAAJ,EAA+B;AAC3B,eAAO,CAACJ,OAAO,CAACI,IAAT,EAAemB,OAAf,CAAP;AACH;;AACD,UAAII,SAAS,GAAGL,QAAQ,CAACM,GAAT,CAAaL,OAAb,CAAhB;;AACA,UAAII,SAAS,CAACE,EAAV,CAAa7B,OAAO,CAACI,IAArB,CAAJ,EAAgC;AAC5BoB,QAAAA,QAAQ,GAAGA,QAAQ,CAACM,GAAT,CAAa9B,OAAO,CAACG,GAArB,CAAX;AACAoB,QAAAA,OAAO,GAAGD,QAAQ,CAACG,GAAT,CAAaD,QAAb,CAAV;AACAG,QAAAA,SAAS,GAAGL,QAAQ,CAACM,GAAT,CAAaJ,QAAb,CAAZ;;AACA,YAAIG,SAAS,CAACE,EAAV,CAAa7B,OAAO,CAACI,IAArB,CAAJ,EAAgC;AAC5BmB,UAAAA,OAAO,GAAGA,OAAO,CAACO,GAAR,CAAY9B,OAAO,CAACG,GAApB,CAAV;AACH;AACJ;;AACD,aAAO,CAACqB,QAAD,EAAWD,OAAX,CAAP;AACH;;;;;;AAELvB,OAAO,CAACE,QAAR,GAAmBA,QAAnB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.U64Utils = exports.ONE = exports.ZERO = void 0;\nconst spl_token_1 = require(\"@solana/spl-token\");\nconst __1 = require(\"../..\");\nconst decimal_utils_1 = require(\"./decimal-utils\");\nexports.ZERO = new spl_token_1.u64(0);\nexports.ONE = new spl_token_1.u64(1);\nclass U64Utils {\n    static toTokenU64(input, token, varName) {\n        if (input instanceof __1.OrcaU64) {\n            if (input.scale !== token.scale) {\n                throw new Error(`${varName}'s scale of ${input.scale} does not match token's decimal of ${token.scale}`);\n            }\n            return input.toU64();\n        }\n        return decimal_utils_1.DecimalUtil.toU64(input, token.scale);\n    }\n    static toPoolU64(input, pool, varName) {\n        if (input instanceof __1.OrcaU64) {\n            if (input.scale !== pool.poolTokenDecimals) {\n                throw new Error(`${varName}'s scale of ${input.scale} does not match pool's decimal of ${pool.poolTokenDecimals}`);\n            }\n            return input.toU64();\n        }\n        return decimal_utils_1.DecimalUtil.toU64(input, pool.poolTokenDecimals);\n    }\n    static toFarmU64(input, farm, varName) {\n        if (input instanceof __1.OrcaU64) {\n            if (input.scale !== farm.baseTokenDecimals) {\n                throw new Error(`${varName}'s scale of ${input.scale} does not match baseToken's decimal of ${farm.baseTokenDecimals}`);\n            }\n            return input.toU64();\n        }\n        return decimal_utils_1.DecimalUtil.toU64(input, farm.baseTokenDecimals);\n    }\n    // Note: divisor input variable modified in place\n    // https://github.com/solana-labs/solana-program-library/blob/master/libraries/math/src/checked_ceil_div.rs#L5-L22\n    static ceilingDivision(dividend, divisor) {\n        let quotient = dividend.div(divisor);\n        if (quotient.eq(exports.ZERO)) {\n            return [exports.ZERO, divisor];\n        }\n        let remainder = dividend.mod(divisor);\n        if (remainder.gt(exports.ZERO)) {\n            quotient = quotient.add(exports.ONE);\n            divisor = dividend.div(quotient);\n            remainder = dividend.mod(quotient);\n            if (remainder.gt(exports.ZERO)) {\n                divisor = divisor.add(exports.ONE);\n            }\n        }\n        return [quotient, divisor];\n    }\n}\nexports.U64Utils = U64Utils;\n"]},"metadata":{},"sourceType":"script"}