{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAssociatedTokenAccountInstruction = exports.createWSOLAccountInstructions = void 0;\n\nvar spl_token_1 = require(\"@solana/spl-token\");\n\nvar web3_js_1 = require(\"@solana/web3.js\");\n\nvar __1 = require(\"../..\");\n\nvar createWSOLAccountInstructions = function createWSOLAccountInstructions(owner, solMint, amountIn, rentExemptLamports) {\n  var tempAccount = new web3_js_1.Keypair();\n  var createAccountInstruction = web3_js_1.SystemProgram.createAccount({\n    fromPubkey: owner,\n    newAccountPubkey: tempAccount.publicKey,\n    lamports: amountIn.toNumber() + rentExemptLamports,\n    space: spl_token_1.AccountLayout.span,\n    programId: spl_token_1.TOKEN_PROGRAM_ID\n  });\n  var initAccountInstruction = spl_token_1.Token.createInitAccountInstruction(spl_token_1.TOKEN_PROGRAM_ID, solMint, tempAccount.publicKey, owner);\n  var closeWSOLAccountInstruction = spl_token_1.Token.createCloseAccountInstruction(spl_token_1.TOKEN_PROGRAM_ID, tempAccount.publicKey, owner, owner, []);\n  return {\n    address: tempAccount.publicKey,\n    instructions: [createAccountInstruction, initAccountInstruction],\n    cleanupInstructions: [closeWSOLAccountInstruction],\n    signers: [tempAccount]\n  };\n};\n\nexports.createWSOLAccountInstructions = createWSOLAccountInstructions;\n\nfunction createAssociatedTokenAccountInstruction(associatedTokenAddress, fundSource, destination, tokenMint, fundAddressOwner) {\n  var systemProgramId = new web3_js_1.PublicKey(\"11111111111111111111111111111111\");\n  var keys = [{\n    pubkey: fundSource,\n    isSigner: true,\n    isWritable: true\n  }, {\n    pubkey: associatedTokenAddress,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: destination,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: tokenMint,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: systemProgramId,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: spl_token_1.TOKEN_PROGRAM_ID,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: web3_js_1.SYSVAR_RENT_PUBKEY,\n    isSigner: false,\n    isWritable: false\n  }];\n  var createATAInstruction = new web3_js_1.TransactionInstruction({\n    keys: keys,\n    programId: __1.SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([])\n  });\n  return {\n    instructions: [createATAInstruction],\n    cleanupInstructions: [],\n    signers: fundAddressOwner.signer ? [fundAddressOwner.signer] : []\n  };\n}\n\nexports.createAssociatedTokenAccountInstruction = createAssociatedTokenAccountInstruction;","map":{"version":3,"sources":["/Users/mikovainio/FyFy/token-swap/node_modules/@orca-so/sdk/dist/public/utils/web3/instructions/token-instructions.js"],"names":["Object","defineProperty","exports","value","createAssociatedTokenAccountInstruction","createWSOLAccountInstructions","spl_token_1","require","web3_js_1","__1","owner","solMint","amountIn","rentExemptLamports","tempAccount","Keypair","createAccountInstruction","SystemProgram","createAccount","fromPubkey","newAccountPubkey","publicKey","lamports","toNumber","space","AccountLayout","span","programId","TOKEN_PROGRAM_ID","initAccountInstruction","Token","createInitAccountInstruction","closeWSOLAccountInstruction","createCloseAccountInstruction","address","instructions","cleanupInstructions","signers","associatedTokenAddress","fundSource","destination","tokenMint","fundAddressOwner","systemProgramId","PublicKey","keys","pubkey","isSigner","isWritable","SYSVAR_RENT_PUBKEY","createATAInstruction","TransactionInstruction","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","data","Buffer","from","signer"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createAssociatedTokenAccountInstruction = exports.createWSOLAccountInstructions = void 0;\nconst spl_token_1 = require(\"@solana/spl-token\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst __1 = require(\"../..\");\nconst createWSOLAccountInstructions = (owner, solMint, amountIn, rentExemptLamports) => {\n    const tempAccount = new web3_js_1.Keypair();\n    const createAccountInstruction = web3_js_1.SystemProgram.createAccount({\n        fromPubkey: owner,\n        newAccountPubkey: tempAccount.publicKey,\n        lamports: amountIn.toNumber() + rentExemptLamports,\n        space: spl_token_1.AccountLayout.span,\n        programId: spl_token_1.TOKEN_PROGRAM_ID,\n    });\n    const initAccountInstruction = spl_token_1.Token.createInitAccountInstruction(spl_token_1.TOKEN_PROGRAM_ID, solMint, tempAccount.publicKey, owner);\n    const closeWSOLAccountInstruction = spl_token_1.Token.createCloseAccountInstruction(spl_token_1.TOKEN_PROGRAM_ID, tempAccount.publicKey, owner, owner, []);\n    return {\n        address: tempAccount.publicKey,\n        instructions: [createAccountInstruction, initAccountInstruction],\n        cleanupInstructions: [closeWSOLAccountInstruction],\n        signers: [tempAccount],\n    };\n};\nexports.createWSOLAccountInstructions = createWSOLAccountInstructions;\nfunction createAssociatedTokenAccountInstruction(associatedTokenAddress, fundSource, destination, tokenMint, fundAddressOwner) {\n    const systemProgramId = new web3_js_1.PublicKey(\"11111111111111111111111111111111\");\n    const keys = [\n        {\n            pubkey: fundSource,\n            isSigner: true,\n            isWritable: true,\n        },\n        {\n            pubkey: associatedTokenAddress,\n            isSigner: false,\n            isWritable: true,\n        },\n        {\n            pubkey: destination,\n            isSigner: false,\n            isWritable: false,\n        },\n        {\n            pubkey: tokenMint,\n            isSigner: false,\n            isWritable: false,\n        },\n        {\n            pubkey: systemProgramId,\n            isSigner: false,\n            isWritable: false,\n        },\n        {\n            pubkey: spl_token_1.TOKEN_PROGRAM_ID,\n            isSigner: false,\n            isWritable: false,\n        },\n        {\n            pubkey: web3_js_1.SYSVAR_RENT_PUBKEY,\n            isSigner: false,\n            isWritable: false,\n        },\n    ];\n    const createATAInstruction = new web3_js_1.TransactionInstruction({\n        keys,\n        programId: __1.SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n        data: Buffer.from([]),\n    });\n    return {\n        instructions: [createATAInstruction],\n        cleanupInstructions: [],\n        signers: fundAddressOwner.signer ? [fundAddressOwner.signer] : [],\n    };\n}\nexports.createAssociatedTokenAccountInstruction = createAssociatedTokenAccountInstruction;\n"]},"metadata":{},"sourceType":"script"}