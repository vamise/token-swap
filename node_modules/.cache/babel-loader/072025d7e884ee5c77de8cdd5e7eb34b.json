{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = responsiveFontSizes;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _utils = require(\"@mui/utils\");\n\nvar _cssUtils = require(\"./cssUtils\");\n\nfunction responsiveFontSizes(themeInput) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _options$breakpoints = options.breakpoints,\n      breakpoints = _options$breakpoints === void 0 ? ['sm', 'md', 'lg'] : _options$breakpoints,\n      _options$disableAlign = options.disableAlign,\n      disableAlign = _options$disableAlign === void 0 ? false : _options$disableAlign,\n      _options$factor = options.factor,\n      factor = _options$factor === void 0 ? 2 : _options$factor,\n      _options$variants = options.variants,\n      variants = _options$variants === void 0 ? ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'subtitle1', 'subtitle2', 'body1', 'body2', 'caption', 'button', 'overline'] : _options$variants;\n  var theme = (0, _extends2.default)({}, themeInput);\n  theme.typography = (0, _extends2.default)({}, theme.typography);\n  var typography = theme.typography; // Convert between CSS lengths e.g. em->px or px->rem\n  // Set the baseFontSize for your project. Defaults to 16px (also the browser default).\n\n  var convert = (0, _cssUtils.convertLength)(typography.htmlFontSize);\n  var breakpointValues = breakpoints.map(function (x) {\n    return theme.breakpoints.values[x];\n  });\n  variants.forEach(function (variant) {\n    var style = typography[variant];\n    var remFontSize = parseFloat(convert(style.fontSize, 'rem'));\n\n    if (remFontSize <= 1) {\n      return;\n    }\n\n    var maxFontSize = remFontSize;\n    var minFontSize = 1 + (maxFontSize - 1) / factor;\n    var lineHeight = style.lineHeight;\n\n    if (!(0, _cssUtils.isUnitless)(lineHeight) && !disableAlign) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? \"MUI: Unsupported non-unitless line height with grid alignment.\\nUse unitless line heights instead.\" : (0, _utils.formatMuiErrorMessage)(6));\n    }\n\n    if (!(0, _cssUtils.isUnitless)(lineHeight)) {\n      // make it unitless\n      lineHeight = parseFloat(convert(lineHeight, 'rem')) / parseFloat(remFontSize);\n    }\n\n    var transform = null;\n\n    if (!disableAlign) {\n      transform = function transform(value) {\n        return (0, _cssUtils.alignProperty)({\n          size: value,\n          grid: (0, _cssUtils.fontGrid)({\n            pixels: 4,\n            lineHeight: lineHeight,\n            htmlFontSize: typography.htmlFontSize\n          })\n        });\n      };\n    }\n\n    typography[variant] = (0, _extends2.default)({}, style, (0, _cssUtils.responsiveProperty)({\n      cssProperty: 'fontSize',\n      min: minFontSize,\n      max: maxFontSize,\n      unit: 'rem',\n      breakpoints: breakpointValues,\n      transform: transform\n    }));\n  });\n  return theme;\n}","map":{"version":3,"sources":["/Users/mikovainio/FyFy/token-swap/node_modules/@mui/material/node/styles/responsiveFontSizes.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","responsiveFontSizes","_extends2","_utils","_cssUtils","themeInput","options","breakpoints","disableAlign","factor","variants","theme","typography","convert","convertLength","htmlFontSize","breakpointValues","map","x","values","forEach","variant","style","remFontSize","parseFloat","fontSize","maxFontSize","minFontSize","lineHeight","isUnitless","Error","process","env","NODE_ENV","formatMuiErrorMessage","transform","alignProperty","size","grid","fontGrid","pixels","responsiveProperty","cssProperty","min","max","unit"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEAC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,mBAAlB;;AAEA,IAAIC,SAAS,GAAGR,sBAAsB,CAACC,OAAO,CAAC,gCAAD,CAAR,CAAtC;;AAEA,IAAIQ,MAAM,GAAGR,OAAO,CAAC,YAAD,CAApB;;AAEA,IAAIS,SAAS,GAAGT,OAAO,CAAC,YAAD,CAAvB;;AAEA,SAASM,mBAAT,CAA6BI,UAA7B,EAAuD;AAAA,MAAdC,OAAc,uEAAJ,EAAI;AACrD,6BAKIA,OALJ,CACEC,WADF;AAAA,MACEA,WADF,qCACgB,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,CADhB;AAAA,8BAKID,OALJ,CAEEE,YAFF;AAAA,MAEEA,YAFF,sCAEiB,KAFjB;AAAA,wBAKIF,OALJ,CAGEG,MAHF;AAAA,MAGEA,MAHF,gCAGW,CAHX;AAAA,0BAKIH,OALJ,CAIEI,QAJF;AAAA,MAIEA,QAJF,kCAIa,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,EAA+B,IAA/B,EAAqC,WAArC,EAAkD,WAAlD,EAA+D,OAA/D,EAAwE,OAAxE,EAAiF,SAAjF,EAA4F,QAA5F,EAAsG,UAAtG,CAJb;AAMA,MAAMC,KAAK,GAAG,CAAC,GAAGT,SAAS,CAACF,OAAd,EAAuB,EAAvB,EAA2BK,UAA3B,CAAd;AACAM,EAAAA,KAAK,CAACC,UAAN,GAAmB,CAAC,GAAGV,SAAS,CAACF,OAAd,EAAuB,EAAvB,EAA2BW,KAAK,CAACC,UAAjC,CAAnB;AACA,MAAMA,UAAU,GAAGD,KAAK,CAACC,UAAzB,CATqD,CAShB;AACrC;;AAEA,MAAMC,OAAO,GAAG,CAAC,GAAGT,SAAS,CAACU,aAAd,EAA6BF,UAAU,CAACG,YAAxC,CAAhB;AACA,MAAMC,gBAAgB,GAAGT,WAAW,CAACU,GAAZ,CAAgB,UAAAC,CAAC;AAAA,WAAIP,KAAK,CAACJ,WAAN,CAAkBY,MAAlB,CAAyBD,CAAzB,CAAJ;AAAA,GAAjB,CAAzB;AACAR,EAAAA,QAAQ,CAACU,OAAT,CAAiB,UAAAC,OAAO,EAAI;AAC1B,QAAMC,KAAK,GAAGV,UAAU,CAACS,OAAD,CAAxB;AACA,QAAME,WAAW,GAAGC,UAAU,CAACX,OAAO,CAACS,KAAK,CAACG,QAAP,EAAiB,KAAjB,CAAR,CAA9B;;AAEA,QAAIF,WAAW,IAAI,CAAnB,EAAsB;AACpB;AACD;;AAED,QAAMG,WAAW,GAAGH,WAApB;AACA,QAAMI,WAAW,GAAG,IAAI,CAACD,WAAW,GAAG,CAAf,IAAoBjB,MAA5C;AACA,QACEmB,UADF,GAEIN,KAFJ,CACEM,UADF;;AAIA,QAAI,CAAC,CAAC,GAAGxB,SAAS,CAACyB,UAAd,EAA0BD,UAA1B,CAAD,IAA0C,CAACpB,YAA/C,EAA6D;AAC3D,YAAM,IAAIsB,KAAJ,CAAUC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,0GACgB,CAAC,GAAG9B,MAAM,CAAC+B,qBAAX,EAAkC,CAAlC,CAD1B,CAAN;AAED;;AAED,QAAI,CAAC,CAAC,GAAG9B,SAAS,CAACyB,UAAd,EAA0BD,UAA1B,CAAL,EAA4C;AAC1C;AACAA,MAAAA,UAAU,GAAGJ,UAAU,CAACX,OAAO,CAACe,UAAD,EAAa,KAAb,CAAR,CAAV,GAAyCJ,UAAU,CAACD,WAAD,CAAhE;AACD;;AAED,QAAIY,SAAS,GAAG,IAAhB;;AAEA,QAAI,CAAC3B,YAAL,EAAmB;AACjB2B,MAAAA,SAAS,GAAG,mBAAApC,KAAK;AAAA,eAAI,CAAC,GAAGK,SAAS,CAACgC,aAAd,EAA6B;AAChDC,UAAAA,IAAI,EAAEtC,KAD0C;AAEhDuC,UAAAA,IAAI,EAAE,CAAC,GAAGlC,SAAS,CAACmC,QAAd,EAAwB;AAC5BC,YAAAA,MAAM,EAAE,CADoB;AAE5BZ,YAAAA,UAAU,EAAVA,UAF4B;AAG5Bb,YAAAA,YAAY,EAAEH,UAAU,CAACG;AAHG,WAAxB;AAF0C,SAA7B,CAAJ;AAAA,OAAjB;AAQD;;AAEDH,IAAAA,UAAU,CAACS,OAAD,CAAV,GAAsB,CAAC,GAAGnB,SAAS,CAACF,OAAd,EAAuB,EAAvB,EAA2BsB,KAA3B,EAAkC,CAAC,GAAGlB,SAAS,CAACqC,kBAAd,EAAkC;AACxFC,MAAAA,WAAW,EAAE,UAD2E;AAExFC,MAAAA,GAAG,EAAEhB,WAFmF;AAGxFiB,MAAAA,GAAG,EAAElB,WAHmF;AAIxFmB,MAAAA,IAAI,EAAE,KAJkF;AAKxFtC,MAAAA,WAAW,EAAES,gBAL2E;AAMxFmB,MAAAA,SAAS,EAATA;AANwF,KAAlC,CAAlC,CAAtB;AAQD,GA7CD;AA8CA,SAAOxB,KAAP;AACD","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = responsiveFontSizes;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _utils = require(\"@mui/utils\");\n\nvar _cssUtils = require(\"./cssUtils\");\n\nfunction responsiveFontSizes(themeInput, options = {}) {\n  const {\n    breakpoints = ['sm', 'md', 'lg'],\n    disableAlign = false,\n    factor = 2,\n    variants = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'subtitle1', 'subtitle2', 'body1', 'body2', 'caption', 'button', 'overline']\n  } = options;\n  const theme = (0, _extends2.default)({}, themeInput);\n  theme.typography = (0, _extends2.default)({}, theme.typography);\n  const typography = theme.typography; // Convert between CSS lengths e.g. em->px or px->rem\n  // Set the baseFontSize for your project. Defaults to 16px (also the browser default).\n\n  const convert = (0, _cssUtils.convertLength)(typography.htmlFontSize);\n  const breakpointValues = breakpoints.map(x => theme.breakpoints.values[x]);\n  variants.forEach(variant => {\n    const style = typography[variant];\n    const remFontSize = parseFloat(convert(style.fontSize, 'rem'));\n\n    if (remFontSize <= 1) {\n      return;\n    }\n\n    const maxFontSize = remFontSize;\n    const minFontSize = 1 + (maxFontSize - 1) / factor;\n    let {\n      lineHeight\n    } = style;\n\n    if (!(0, _cssUtils.isUnitless)(lineHeight) && !disableAlign) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: Unsupported non-unitless line height with grid alignment.\nUse unitless line heights instead.` : (0, _utils.formatMuiErrorMessage)(6));\n    }\n\n    if (!(0, _cssUtils.isUnitless)(lineHeight)) {\n      // make it unitless\n      lineHeight = parseFloat(convert(lineHeight, 'rem')) / parseFloat(remFontSize);\n    }\n\n    let transform = null;\n\n    if (!disableAlign) {\n      transform = value => (0, _cssUtils.alignProperty)({\n        size: value,\n        grid: (0, _cssUtils.fontGrid)({\n          pixels: 4,\n          lineHeight,\n          htmlFontSize: typography.htmlFontSize\n        })\n      });\n    }\n\n    typography[variant] = (0, _extends2.default)({}, style, (0, _cssUtils.responsiveProperty)({\n      cssProperty: 'fontSize',\n      min: minFontSize,\n      max: maxFontSize,\n      unit: 'rem',\n      breakpoints: breakpointValues,\n      transform\n    }));\n  });\n  return theme;\n}"]},"metadata":{},"sourceType":"script"}