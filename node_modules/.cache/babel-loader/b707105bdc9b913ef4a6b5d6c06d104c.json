{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ZERO = exports.toU64WithDecimals = exports.toBNWithDecimals = void 0;\n\nvar spl_token_1 = require(\"@solana/spl-token\");\n\nfunction toBNWithDecimals(amount) {\n  var decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 9;\n  var base = new spl_token_1.u64(10).pow(new spl_token_1.u64(decimals)); // Break up into the integer and fractional part of the number\n\n  var integersAsNumber = Math.floor(amount);\n  var fractionsAsNumber = amount % 1; // Convert each into a u64 multiplied by 10^{decimals}\n\n  var integersAsU64 = new spl_token_1.u64(integersAsNumber).mul(base);\n\n  if (!fractionsAsNumber) {\n    return integersAsU64;\n  }\n\n  var fractionsAsU64 = new spl_token_1.u64(fractionsAsNumber.toString().substring(0, decimals).padEnd(decimals, \"0\")); // Add them up. This results in a BN, so it needs to be converted to u64 again\n\n  return integersAsU64.add(fractionsAsU64);\n}\n\nexports.toBNWithDecimals = toBNWithDecimals;\n\nfunction toU64WithDecimals(amount) {\n  var decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 9;\n  var result = toBNWithDecimals(amount, decimals);\n  return new spl_token_1.u64(result);\n}\n\nexports.toU64WithDecimals = toU64WithDecimals;\nexports.ZERO = new spl_token_1.u64(0);","map":{"version":3,"sources":["../../src/utils/math.ts"],"names":[],"mappings":";;;;;;;AAAA,IAAA,WAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AAGA,SAAgB,gBAAhB,CAAiC,MAAjC,EAA6D;AAAA,MAAZ,QAAY,uEAAD,CAAC;AAC3D,MAAM,IAAI,GAAG,IAAI,WAAA,CAAA,GAAJ,CAAQ,EAAR,EAAY,GAAZ,CAAgB,IAAI,WAAA,CAAA,GAAJ,CAAQ,QAAR,CAAhB,CAAb,CAD2D,CAG3D;;AACA,MAAM,gBAAgB,GAAG,IAAI,CAAC,KAAL,CAAW,MAAX,CAAzB;AACA,MAAM,iBAAiB,GAAG,MAAM,GAAG,CAAnC,CAL2D,CAO3D;;AACA,MAAM,aAAa,GAAG,IAAI,WAAA,CAAA,GAAJ,CAAQ,gBAAR,EAA0B,GAA1B,CAA8B,IAA9B,CAAtB;;AAEA,MAAI,CAAC,iBAAL,EAAwB;AACtB,WAAO,aAAP;AACD;;AAED,MAAM,cAAc,GAAG,IAAI,WAAA,CAAA,GAAJ,CACrB,iBAAiB,CAAC,QAAlB,GAA6B,SAA7B,CAAuC,CAAvC,EAA0C,QAA1C,EAAoD,MAApD,CAA2D,QAA3D,EAAqE,GAArE,CADqB,CAAvB,CAd2D,CAkB3D;;AACA,SAAO,aAAa,CAAC,GAAd,CAAkB,cAAlB,CAAP;AACD;;AApBD,OAAA,CAAA,gBAAA,GAAA,gBAAA;;AAsBA,SAAgB,iBAAhB,CAAkC,MAAlC,EAA8D;AAAA,MAAZ,QAAY,uEAAD,CAAC;AAC5D,MAAM,MAAM,GAAG,gBAAgB,CAAC,MAAD,EAAS,QAAT,CAA/B;AACA,SAAO,IAAI,WAAA,CAAA,GAAJ,CAAQ,MAAR,CAAP;AACD;;AAHD,OAAA,CAAA,iBAAA,GAAA,iBAAA;AAKa,OAAA,CAAA,IAAA,GAAO,IAAI,WAAA,CAAA,GAAJ,CAAQ,CAAR,CAAP","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ZERO = exports.toU64WithDecimals = exports.toBNWithDecimals = void 0;\nconst spl_token_1 = require(\"@solana/spl-token\");\nfunction toBNWithDecimals(amount, decimals = 9) {\n    const base = new spl_token_1.u64(10).pow(new spl_token_1.u64(decimals));\n    // Break up into the integer and fractional part of the number\n    const integersAsNumber = Math.floor(amount);\n    const fractionsAsNumber = amount % 1;\n    // Convert each into a u64 multiplied by 10^{decimals}\n    const integersAsU64 = new spl_token_1.u64(integersAsNumber).mul(base);\n    if (!fractionsAsNumber) {\n        return integersAsU64;\n    }\n    const fractionsAsU64 = new spl_token_1.u64(fractionsAsNumber.toString().substring(0, decimals).padEnd(decimals, \"0\"));\n    // Add them up. This results in a BN, so it needs to be converted to u64 again\n    return integersAsU64.add(fractionsAsU64);\n}\nexports.toBNWithDecimals = toBNWithDecimals;\nfunction toU64WithDecimals(amount, decimals = 9) {\n    const result = toBNWithDecimals(amount, decimals);\n    return new spl_token_1.u64(result);\n}\nexports.toU64WithDecimals = toU64WithDecimals;\nexports.ZERO = new spl_token_1.u64(0);\n//# sourceMappingURL=math.js.map"]},"metadata":{},"sourceType":"script"}