{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/mikovainio/FyFy/token-swap/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/mikovainio/FyFy/token-swap/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/mikovainio/FyFy/token-swap/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/mikovainio/FyFy/token-swap/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/mikovainio/FyFy/token-swap/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/mikovainio/FyFy/token-swap/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _asyncToGenerator from \"/Users/mikovainio/FyFy/token-swap/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/Users/mikovainio/FyFy/token-swap/node_modules/@babel/runtime/regenerator/index.js\";\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { Transaction } from '@solana/web3.js';\nimport { createLoggerMiddleware, COMMUNICATION_JRPC_METHODS, COMMUNICATION_NOTIFICATIONS, PROVIDER_JRPC_METHODS, PROVIDER_NOTIFICATIONS } from '@toruslabs/base-controllers';\nimport { setAPIKey } from '@toruslabs/http-helpers';\nimport { SafeEventEmitter, ObjectMultiplex, createStreamMiddleware, JRPCEngine, createIdRemapMiddleware, getRpcPromiseCallback, BasePostMessageStream } from '@toruslabs/openlogin-jrpc';\nimport { ethErrors, EthereumRpcError } from 'eth-rpc-errors';\nimport { isDuplexStream } from 'is-stream';\nimport pump from 'pump';\nimport loglevel from 'loglevel';\nimport dequal from 'fast-deep-equal';\nvar messages = {\n  errors: {\n    disconnected: function disconnected() {\n      return \"Torus: Lost connection to Torus.\";\n    },\n    permanentlyDisconnected: function permanentlyDisconnected() {\n      return \"Torus: Disconnected from iframe. Page reload required.\";\n    },\n    unsupportedSync: function unsupportedSync(method) {\n      return \"Torus: The Torus Ethereum provider does not support synchronous methods like \".concat(method, \" without a callback parameter.\");\n    },\n    invalidDuplexStream: function invalidDuplexStream() {\n      return \"Must provide a Node.js-style duplex stream.\";\n    },\n    invalidOptions: function invalidOptions(maxEventListeners) {\n      return \"Invalid options. Received: { maxEventListeners: \".concat(maxEventListeners, \"}\");\n    },\n    invalidRequestArgs: function invalidRequestArgs() {\n      return \"Expected a single, non-array, object argument.\";\n    },\n    invalidRequestMethod: function invalidRequestMethod() {\n      return \"'args.method' must be a non-empty string.\";\n    },\n    invalidRequestParams: function invalidRequestParams() {\n      return \"'args.params' must be an object or array if provided.\";\n    },\n    invalidLoggerObject: function invalidLoggerObject() {\n      return \"'args.logger' must be an object if provided.\";\n    },\n    invalidLoggerMethod: function invalidLoggerMethod(method) {\n      return \"'args.logger' must include required method '\".concat(method, \"'.\");\n    }\n  },\n  info: {\n    connected: function connected(chainId) {\n      return \"Torus: Connected to chain with ID \\\"\".concat(chainId, \"\\\".\");\n    }\n  },\n  warnings: {}\n};\nvar PAYMENT_PROVIDER = {\n  MOONPAY: \"moonpay\",\n  WYRE: \"wyre\",\n  RAMPNETWORK: \"rampnetwork\",\n  XANPOOL: \"xanpool\",\n  MERCURYO: \"mercuryo\",\n  TRANSAK: \"transak\"\n};\nvar TORUS_BUILD_ENV = {\n  PRODUCTION: \"production\",\n  DEVELOPMENT: \"development\",\n  TESTING: \"testing\"\n};\nvar BUTTON_POSITION = {\n  BOTTOM_LEFT: \"bottom-left\",\n  TOP_LEFT: \"top-left\",\n  BOTTOM_RIGHT: \"bottom-right\",\n  TOP_RIGHT: \"top-right\"\n};\nvar LOGIN_PROVIDER = {\n  GOOGLE: \"google\",\n  FACEBOOK: \"facebook\",\n  REDDIT: \"reddit\",\n  DISCORD: \"discord\",\n  TWITCH: \"twitch\",\n  APPLE: \"apple\",\n  LINE: \"line\",\n  GITHUB: \"github\",\n  KAKAO: \"kakao\",\n  LINKEDIN: \"linkedin\",\n  TWITTER: \"twitter\",\n  WEIBO: \"weibo\",\n  WECHAT: \"wechat\",\n  EMAIL_PASSWORDLESS: \"email_passwordless\"\n};\nvar translations = {\n  en: {\n    embed: {\n      continue: \"Continue\",\n      actionRequired: \"Authorization required\",\n      pendingAction: \"Click continue to proceed with your request in a popup\",\n      cookiesRequired: \"Cookies Required\",\n      enableCookies: \"Please enable cookies in your browser preferences to access Torus\",\n      clickHere: \"More Info\"\n    }\n  },\n  de: {\n    embed: {\n      continue: \"Fortsetzen\",\n      actionRequired: \"Autorisierung erforderlich\",\n      pendingAction: \"Klicken Sie in einem Popup auf Weiter, um mit Ihrer Anfrage fortzufahren\",\n      cookiesRequired: \"Cookies benötigt\",\n      enableCookies: \"Bitte aktivieren Sie Cookies in Ihren Browsereinstellungen, um auf Torus zuzugreifen\",\n      clickHere: \"Mehr Info\"\n    }\n  },\n  ja: {\n    embed: {\n      continue: \"継続する\",\n      actionRequired: \"認証が必要です\",\n      pendingAction: \"続行をクリックして、ポップアップでリクエストを続行します\",\n      cookiesRequired: \"必要なクッキー\",\n      enableCookies: \"Torusにアクセスするには、ブラウザの設定でCookieを有効にしてください。\",\n      clickHere: \"詳しくは\"\n    }\n  },\n  ko: {\n    embed: {\n      continue: \"계속하다\",\n      actionRequired: \"승인 필요\",\n      pendingAction: \"팝업에서 요청을 진행하려면 계속을 클릭하십시오.\",\n      cookiesRequired: \"쿠키 필요\",\n      enableCookies: \"브라우저 환경 설정에서 쿠키를 활성화하여 Torus에 액세스하십시오.\",\n      clickHere: \"더 많은 정보\"\n    }\n  },\n  zh: {\n    embed: {\n      continue: \"继续\",\n      actionRequired: \"需要授权\",\n      pendingAction: \"单击继续以在弹出窗口中继续您的请求\",\n      cookiesRequired: \"必填Cookie\",\n      enableCookies: \"请在您的浏览器首选项中启用cookie以访问Torus。\",\n      clickHere: \"更多信息\"\n    }\n  }\n};\nvar configuration = {\n  supportedVerifierList: [LOGIN_PROVIDER.GOOGLE, LOGIN_PROVIDER.REDDIT, LOGIN_PROVIDER.DISCORD],\n  api: \"https://api.tor.us\",\n  translations: translations,\n  prodTorusUrl: \"\",\n  localStorageKey: \"torus-\".concat(window.location.hostname)\n};\nvar log = loglevel.getLogger(\"solana-embed\");\n/**\n * json-rpc-engine middleware that logs RPC errors and and validates req.method.\n *\n * @param log - The logging API to use.\n * @returns  json-rpc-engine middleware function\n */\n\nfunction createErrorMiddleware() {\n  return function (req, res, next) {\n    // json-rpc-engine will terminate the request when it notices this error\n    if (typeof req.method !== \"string\" || !req.method) {\n      res.error = ethErrors.rpc.invalidRequest({\n        message: \"The request 'method' must be a non-empty string.\",\n        data: req\n      });\n    }\n\n    next(function (done) {\n      var error = res.error;\n\n      if (!error) {\n        return done();\n      }\n\n      log.error(\"Torus - RPC Error: \".concat(error.message), error);\n      return done();\n    });\n  };\n}\n/**\n * Logs a stream disconnection error. Emits an 'error' if given an\n * EventEmitter that has listeners for the 'error' event.\n *\n * @param log - The logging API to use.\n * @param remoteLabel - The label of the disconnected stream.\n * @param error - The associated error to log.\n * @param emitter - The logging API to use.\n */\n\n\nfunction logStreamDisconnectWarning(remoteLabel, error, emitter) {\n  var warningMsg = \"Torus: Lost connection to \\\"\".concat(remoteLabel, \"\\\".\");\n\n  if (error !== null && error !== void 0 && error.stack) {\n    warningMsg += \"\\n\".concat(error.stack);\n  }\n\n  log.warn(warningMsg);\n\n  if (emitter && emitter.listenerCount(\"error\") > 0) {\n    emitter.emit(\"error\", warningMsg);\n  }\n}\n\nvar getWindowId = function getWindowId() {\n  return Math.random().toString(36).slice(2);\n};\n\nvar getTorusUrl = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(buildEnv) {\n    var torusUrl, logLevel;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.t0 = buildEnv;\n            _context.next = _context.t0 === \"testing\" ? 3 : _context.t0 === \"development\" ? 6 : 9;\n            break;\n\n          case 3:\n            torusUrl = \"https://solana-testing.tor.us\";\n            logLevel = \"debug\";\n            return _context.abrupt(\"break\", 12);\n\n          case 6:\n            torusUrl = \"http://localhost:8080\";\n            logLevel = \"debug\";\n            return _context.abrupt(\"break\", 12);\n\n          case 9:\n            torusUrl = \"https://solana.tor.us\";\n            logLevel = \"error\";\n            return _context.abrupt(\"break\", 12);\n\n          case 12:\n            return _context.abrupt(\"return\", {\n              torusUrl: torusUrl,\n              logLevel: logLevel\n            });\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getTorusUrl(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nvar getUserLanguage = function getUserLanguage() {\n  var userLanguage = window.navigator.language || \"en-US\";\n  var userLanguages = userLanguage.split(\"-\");\n  userLanguage = Object.prototype.hasOwnProperty.call(configuration.translations, userLanguages[0]) ? userLanguages[0] : \"en\";\n  return userLanguage;\n};\n\nvar FEATURES_PROVIDER_CHANGE_WINDOW = {\n  height: 660,\n  width: 375\n};\nvar FEATURES_DEFAULT_WALLET_WINDOW = {\n  height: 740,\n  width: 1315\n};\nvar FEATURES_DEFAULT_POPUP_WINDOW = {\n  height: 700,\n  width: 1200\n};\nvar FEATURES_CONFIRM_WINDOW = {\n  height: 600,\n  width: 400\n};\n\nfunction storageAvailable(type) {\n  var storage;\n\n  try {\n    storage = window[type];\n    var x = \"__storage_test__\";\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return true;\n  } catch (e) {\n    return e && ( // everything except Firefox\n    e.code === 22 || // Firefox\n    e.code === 1014 || // test name field too, because code might not be present\n    // everything except Firefox\n    e.name === \"QuotaExceededError\" || // Firefox\n    e.name === \"NS_ERROR_DOM_QUOTA_REACHED\") && // acknowledge QuotaExceededError only if there's something already stored\n    storage && storage.length !== 0;\n  }\n}\n/**\n * popup handler utils\n */\n\n\nfunction getPopupFeatures(_ref) {\n  var w = _ref.width,\n      h = _ref.height; // Fixes dual-screen position                             Most browsers      Firefox\n\n  var dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : window.screenX;\n  var dualScreenTop = window.screenTop !== undefined ? window.screenTop : window.screenY;\n  var width = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : window.screen.width;\n  var height = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : window.screen.height;\n  var systemZoom = 1; // No reliable estimate\n\n  var left = Math.abs((width - w) / 2 / systemZoom + dualScreenLeft);\n  var top = Math.abs((height - h) / 2 / systemZoom + dualScreenTop);\n  var features = \"titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=\".concat(h / systemZoom, \",width=\").concat(w / systemZoom, \",top=\").concat(top, \",left=\").concat(left);\n  return features;\n}\n\nvar getNetworkConfig = function getNetworkConfig(label) {\n  switch (label) {\n    case \"mainnet-beta\":\n      return {\n        blockExplorerUrl: \"https://explorer.solana.com\",\n        chainId: \"0x1\",\n        displayName: \"Solana Mainnet\",\n        logo: \"solana.svg\",\n        rpcTarget: \"https://api.mainnet-beta.solana.com\",\n        ticker: \"SOL\",\n        tickerName: \"Solana Token\"\n      };\n\n    case \"testnet\":\n      return {\n        blockExplorerUrl: \"https://explorer.solana.com\",\n        chainId: \"0x2\",\n        displayName: \"Solana Testnet\",\n        logo: \"solana.svg\",\n        rpcTarget: \"https://api.testnet.solana.com\",\n        ticker: \"SOL\",\n        tickerName: \"Solana Token\"\n      };\n\n    case \"devnet\":\n      return {\n        blockExplorerUrl: \"https://explorer.solana.com\",\n        chainId: \"0x3\",\n        displayName: \"Solana Devnet\",\n        logo: \"solana.svg\",\n        rpcTarget: \"https://api.devnet.solana.com\",\n        ticker: \"SOL\",\n        tickerName: \"Solana Token\"\n      };\n\n    default:\n      return undefined;\n  }\n};\n\nvar BaseProvider = /*#__PURE__*/function (_SafeEventEmitter) {\n  _inherits(BaseProvider, _SafeEventEmitter);\n\n  var _super = _createSuper(BaseProvider);\n\n  /**\n   * Indicating that this provider is a Torus provider.\n   */\n  function BaseProvider(connectionStream, _ref) {\n    var _this;\n\n    _classCallCheck(this, BaseProvider);\n\n    var _ref$maxEventListener = _ref.maxEventListeners,\n        maxEventListeners = _ref$maxEventListener === void 0 ? 100 : _ref$maxEventListener,\n        _ref$jsonRpcStreamNam = _ref.jsonRpcStreamName,\n        jsonRpcStreamName = _ref$jsonRpcStreamNam === void 0 ? \"provider\" : _ref$jsonRpcStreamNam;\n    _this = _super.call(this);\n\n    _defineProperty(_assertThisInitialized(_this), \"isTorus\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_rpcEngine\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"jsonRpcConnectionEvents\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_state\", void 0);\n\n    if (!isDuplexStream(connectionStream)) {\n      throw new Error(messages.errors.invalidDuplexStream());\n    }\n\n    _this.isTorus = true;\n\n    _this.setMaxListeners(maxEventListeners);\n\n    _this._handleConnect = _this._handleConnect.bind(_assertThisInitialized(_this));\n    _this._handleDisconnect = _this._handleDisconnect.bind(_assertThisInitialized(_this));\n    _this._handleStreamDisconnect = _this._handleStreamDisconnect.bind(_assertThisInitialized(_this));\n    _this._rpcRequest = _this._rpcRequest.bind(_assertThisInitialized(_this));\n    _this._initializeState = _this._initializeState.bind(_assertThisInitialized(_this));\n    _this.request = _this.request.bind(_assertThisInitialized(_this));\n    _this.sendAsync = _this.sendAsync.bind(_assertThisInitialized(_this)); // this.enable = this.enable.bind(this);\n    // setup connectionStream multiplexing\n\n    var mux = new ObjectMultiplex();\n    pump(connectionStream, mux, connectionStream, _this._handleStreamDisconnect.bind(_assertThisInitialized(_this), \"Torus\")); // ignore phishing warning message (handled elsewhere)\n\n    mux.ignoreStream(\"phishing\"); // setup own event listeners\n    // connect to async provider\n\n    var jsonRpcConnection = createStreamMiddleware();\n    pump(jsonRpcConnection.stream, mux.createStream(jsonRpcStreamName), jsonRpcConnection.stream, _this._handleStreamDisconnect.bind(_assertThisInitialized(_this), \"Torus RpcProvider\")); // handle RPC requests via dapp-side rpc engine\n\n    var rpcEngine = new JRPCEngine();\n    rpcEngine.push(createIdRemapMiddleware());\n    rpcEngine.push(createErrorMiddleware());\n    rpcEngine.push(createLoggerMiddleware({\n      origin: location.origin\n    }));\n    rpcEngine.push(jsonRpcConnection.middleware);\n    _this._rpcEngine = rpcEngine;\n    _this.jsonRpcConnectionEvents = jsonRpcConnection.events;\n    return _this;\n  }\n  /**\n   * Submits an RPC request for the given method, with the given params.\n   * Resolves with the result of the method call, or rejects on error.\n   */\n\n\n  _createClass(BaseProvider, [{\n    key: \"request\",\n    value: function () {\n      var _request = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(args) {\n        var _this2 = this;\n\n        var method, params;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(!args || typeof args !== \"object\" || Array.isArray(args))) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                throw ethErrors.rpc.invalidRequest({\n                  message: messages.errors.invalidRequestArgs(),\n                  data: args\n                });\n\n              case 2:\n                method = args.method, params = args.params;\n\n                if (!(typeof method !== \"string\" || method.length === 0)) {\n                  _context2.next = 5;\n                  break;\n                }\n\n                throw ethErrors.rpc.invalidRequest({\n                  message: messages.errors.invalidRequestMethod(),\n                  data: args\n                });\n\n              case 5:\n                if (!(params !== undefined && !Array.isArray(params) && (typeof params !== \"object\" || params === null))) {\n                  _context2.next = 7;\n                  break;\n                }\n\n                throw ethErrors.rpc.invalidRequest({\n                  message: messages.errors.invalidRequestParams(),\n                  data: args\n                });\n\n              case 7:\n                return _context2.abrupt(\"return\", new Promise(function (resolve, reject) {\n                  _this2._rpcRequest({\n                    method: method,\n                    params: params\n                  }, getRpcPromiseCallback(resolve, reject));\n                }));\n\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function request(_x2) {\n        return _request.apply(this, arguments);\n      }\n\n      return request;\n    }()\n    /**\n     * Submits an RPC request per the given JSON-RPC request object.\n     */\n\n  }, {\n    key: \"send\",\n    value: function send(payload, callback) {\n      this._rpcRequest(payload, callback);\n    }\n    /**\n     * Submits an RPC request per the given JSON-RPC request object.\n     */\n\n  }, {\n    key: \"sendAsync\",\n    value: function sendAsync(payload) {\n      var _this3 = this;\n\n      return new Promise(function (resolve, reject) {\n        _this3._rpcRequest(payload, getRpcPromiseCallback(resolve, reject));\n      });\n    }\n    /**\n     * Called when connection is lost to critical streams.\n     *\n     * emits TorusInpageProvider#disconnect\n     */\n\n  }, {\n    key: \"_handleStreamDisconnect\",\n    value: function _handleStreamDisconnect(streamName, error) {\n      logStreamDisconnectWarning(streamName, error, this);\n\n      this._handleDisconnect(false, error ? error.message : undefined);\n    }\n  }]);\n\n  return BaseProvider;\n}(SafeEventEmitter);\n\nvar handleEvent = function handleEvent(handle, eventName, handler) {\n  for (var _len = arguments.length, handlerArgs = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n    handlerArgs[_key - 3] = arguments[_key];\n  }\n\n  var handlerWrapper = function handlerWrapper() {\n    handler.apply(void 0, handlerArgs);\n    handle.removeEventListener(eventName, handlerWrapper);\n  };\n\n  handle.addEventListener(eventName, handlerWrapper);\n};\n\nfunction documentReady() {\n  return _documentReady.apply(this, arguments);\n}\n\nfunction _documentReady() {\n  _documentReady = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee24() {\n    return _regeneratorRuntime.wrap(function _callee24$(_context24) {\n      while (1) {\n        switch (_context24.prev = _context24.next) {\n          case 0:\n            return _context24.abrupt(\"return\", new Promise(function (resolve) {\n              if (document.readyState !== \"loading\") {\n                resolve();\n              } else {\n                handleEvent(document, \"DOMContentLoaded\", resolve);\n              }\n            }));\n\n          case 1:\n          case \"end\":\n            return _context24.stop();\n        }\n      }\n    }, _callee24);\n  }));\n  return _documentReady.apply(this, arguments);\n}\n\nvar htmlToElement = function htmlToElement(html) {\n  var template = window.document.createElement(\"template\");\n  var trimmedHtml = html.trim(); // Never return a text node of whitespace as the result\n\n  template.innerHTML = trimmedHtml;\n  return template.content.firstChild;\n};\n\nvar PopupHandler = /*#__PURE__*/function (_SafeEventEmitter2) {\n  _inherits(PopupHandler, _SafeEventEmitter2);\n\n  var _super2 = _createSuper(PopupHandler);\n\n  function PopupHandler(_ref) {\n    var _this4;\n\n    _classCallCheck(this, PopupHandler);\n\n    var url = _ref.url,\n        target = _ref.target,\n        features = _ref.features;\n    _this4 = _super2.call(this);\n\n    _defineProperty(_assertThisInitialized(_this4), \"url\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this4), \"target\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this4), \"features\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this4), \"window\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this4), \"windowTimer\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this4), \"iClosedWindow\", void 0);\n\n    _this4.url = url;\n    _this4.target = target || \"_blank\";\n    _this4.features = features || getPopupFeatures(FEATURES_DEFAULT_POPUP_WINDOW);\n    _this4.window = undefined;\n    _this4.windowTimer = undefined;\n    _this4.iClosedWindow = false;\n\n    _this4._setupTimer();\n\n    return _this4;\n  }\n\n  _createClass(PopupHandler, [{\n    key: \"_setupTimer\",\n    value: function _setupTimer() {\n      var _this5 = this;\n\n      this.windowTimer = Number(setInterval(function () {\n        if (_this5.window && _this5.window.closed) {\n          clearInterval(_this5.windowTimer);\n\n          if (!_this5.iClosedWindow) {\n            _this5.emit(\"close\");\n          }\n\n          _this5.iClosedWindow = false;\n          _this5.window = undefined;\n        }\n\n        if (_this5.window === undefined) clearInterval(_this5.windowTimer);\n      }, 500));\n    }\n  }, {\n    key: \"open\",\n    value: function open() {\n      var _this$window;\n\n      this.window = window.open(this.url.href, this.target, this.features);\n      if ((_this$window = this.window) !== null && _this$window !== void 0 && _this$window.focus) this.window.focus();\n      return Promise.resolve();\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      this.iClosedWindow = true;\n      if (this.window) this.window.close();\n    }\n  }, {\n    key: \"redirect\",\n    value: function redirect(locationReplaceOnRedirect) {\n      if (locationReplaceOnRedirect) {\n        window.location.replace(this.url.href);\n      } else {\n        window.location.href = this.url.href;\n      }\n    }\n  }]);\n\n  return PopupHandler;\n}(SafeEventEmitter);\n\nfunction ownKeys$2(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$2(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nvar TorusCommunicationProvider = /*#__PURE__*/function (_BaseProvider) {\n  _inherits(TorusCommunicationProvider, _BaseProvider);\n\n  var _super3 = _createSuper(TorusCommunicationProvider);\n\n  function TorusCommunicationProvider(connectionStream, _ref) {\n    var _this6;\n\n    _classCallCheck(this, TorusCommunicationProvider);\n\n    var _ref$maxEventListener2 = _ref.maxEventListeners,\n        maxEventListeners = _ref$maxEventListener2 === void 0 ? 100 : _ref$maxEventListener2,\n        _ref$jsonRpcStreamNam2 = _ref.jsonRpcStreamName,\n        jsonRpcStreamName = _ref$jsonRpcStreamNam2 === void 0 ? \"provider\" : _ref$jsonRpcStreamNam2;\n    _this6 = _super3.call(this, connectionStream, {\n      maxEventListeners: maxEventListeners,\n      jsonRpcStreamName: jsonRpcStreamName\n    }); // private state\n\n    _defineProperty(_assertThisInitialized(_this6), \"embedTranslations\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this6), \"torusUrl\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this6), \"dappStorageKey\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this6), \"windowRefs\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this6), \"tryWindowHandle\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this6), \"torusAlertContainer\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this6), \"torusIframe\", void 0);\n\n    _this6._state = _objectSpread$2({}, TorusCommunicationProvider._defaultState); // public state\n\n    _this6.torusUrl = \"\";\n    _this6.dappStorageKey = \"\";\n    var languageTranslations = configuration.translations[getUserLanguage()];\n    _this6.embedTranslations = languageTranslations.embed;\n    _this6.windowRefs = {}; // setup own event listeners\n    // EIP-1193 connect\n\n    _this6.on(\"connect\", function () {\n      _this6._state.isConnected = true;\n    });\n\n    var notificationHandler = function notificationHandler(payload) {\n      var method = payload.method,\n          params = payload.params;\n\n      if (method === COMMUNICATION_NOTIFICATIONS.IFRAME_STATUS) {\n        var isFullScreen = params.isFullScreen,\n            rid = params.rid;\n\n        _this6._displayIframe({\n          isFull: isFullScreen,\n          rid: rid\n        });\n      } else if (method === COMMUNICATION_NOTIFICATIONS.CREATE_WINDOW) {\n        var windowId = params.windowId,\n            url = params.url;\n\n        _this6._createPopupBlockAlert(windowId, url);\n      } else if (method === COMMUNICATION_NOTIFICATIONS.CLOSE_WINDOW) {\n        _this6._handleCloseWindow(params);\n      } else if (method === COMMUNICATION_NOTIFICATIONS.USER_LOGGED_IN) {\n        var currentLoginProvider = params.currentLoginProvider;\n        _this6._state.isLoggedIn = true;\n        _this6._state.currentLoginProvider = currentLoginProvider;\n      } else if (method === COMMUNICATION_NOTIFICATIONS.USER_LOGGED_OUT) {\n        _this6._state.isLoggedIn = false;\n        _this6._state.currentLoginProvider = null;\n\n        _this6._displayIframe();\n      }\n    };\n\n    _this6.jsonRpcConnectionEvents.on(\"notification\", notificationHandler);\n\n    return _this6;\n  }\n\n  _createClass(TorusCommunicationProvider, [{\n    key: \"isLoggedIn\",\n    get: function get() {\n      return this._state.isLoggedIn;\n    }\n  }, {\n    key: \"isIFrameFullScreen\",\n    get: function get() {\n      return this._state.isIFrameFullScreen;\n    }\n    /**\n     * Returns whether the inPage provider is connected to Torus.\n     */\n\n  }, {\n    key: \"isConnected\",\n    value: function isConnected() {\n      return this._state.isConnected;\n    }\n  }, {\n    key: \"_initializeState\",\n    value: function () {\n      var _initializeState2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(params) {\n        var _this7 = this;\n\n        var torusUrl, dappStorageKey, torusAlertContainer, torusIframe, _yield$this$request, currentLoginProvider, isLoggedIn;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                torusUrl = params.torusUrl, dappStorageKey = params.dappStorageKey, torusAlertContainer = params.torusAlertContainer, torusIframe = params.torusIframe;\n                this.torusUrl = torusUrl;\n                this.dappStorageKey = dappStorageKey;\n                this.torusAlertContainer = torusAlertContainer;\n                this.torusIframe = torusIframe;\n                this.torusIframe.addEventListener(\"load\", function () {\n                  // only do this if iframe is not full screen\n                  if (!_this7._state.isIFrameFullScreen) _this7._displayIframe();\n                });\n                _context3.next = 9;\n                return this.request({\n                  method: COMMUNICATION_JRPC_METHODS.GET_PROVIDER_STATE,\n                  params: []\n                });\n\n              case 9:\n                _yield$this$request = _context3.sent;\n                currentLoginProvider = _yield$this$request.currentLoginProvider;\n                isLoggedIn = _yield$this$request.isLoggedIn;\n\n                // indicate that we've connected, for EIP-1193 compliance\n                this._handleConnect(currentLoginProvider, isLoggedIn);\n\n                _context3.next = 18;\n                break;\n\n              case 15:\n                _context3.prev = 15;\n                _context3.t0 = _context3[\"catch\"](0);\n                log.error(\"Torus: Failed to get initial state. Please report this bug.\", _context3.t0);\n\n              case 18:\n                _context3.prev = 18;\n                log.info(\"initialized communication state\");\n                this._state.initialized = true;\n                this.emit(\"_initialized\");\n                return _context3.finish(18);\n\n              case 23:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[0, 15, 18, 23]]);\n      }));\n\n      function _initializeState(_x3) {\n        return _initializeState2.apply(this, arguments);\n      }\n\n      return _initializeState;\n    }()\n  }, {\n    key: \"_handleWindow\",\n    value: function _handleWindow(windowId) {\n      var _this8 = this;\n\n      var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          url = _ref3.url,\n          target = _ref3.target,\n          features = _ref3.features;\n\n      var finalUrl = new URL(url || \"\".concat(this.torusUrl, \"/redirect?windowId=\").concat(windowId));\n\n      if (this.dappStorageKey) {\n        // If multiple instances, it returns the first one\n        if (finalUrl.hash) finalUrl.hash += \"&dappStorageKey=\".concat(this.dappStorageKey);else finalUrl.hash = \"#dappStorageKey=\".concat(this.dappStorageKey);\n      }\n\n      var handledWindow = new PopupHandler({\n        url: finalUrl,\n        target: target,\n        features: features\n      });\n      handledWindow.open();\n\n      if (!handledWindow.window) {\n        this._createPopupBlockAlert(windowId, finalUrl.href);\n\n        return;\n      } // Add to collection only if window is opened\n\n\n      this.windowRefs[windowId] = handledWindow; // We tell the iframe that the window has been successfully opened\n\n      this.request({\n        method: COMMUNICATION_JRPC_METHODS.OPENED_WINDOW,\n        params: {\n          windowId: windowId\n        }\n      });\n      handledWindow.once(\"close\", function () {\n        // user closed the window\n        delete _this8.windowRefs[windowId];\n\n        _this8.request({\n          method: COMMUNICATION_JRPC_METHODS.CLOSED_WINDOW,\n          params: {\n            windowId: windowId\n          }\n        });\n      });\n    }\n  }, {\n    key: \"_displayIframe\",\n    value: function _displayIframe() {\n      var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref4$isFull = _ref4.isFull,\n          isFull = _ref4$isFull === void 0 ? false : _ref4$isFull,\n          _ref4$rid = _ref4.rid,\n          rid = _ref4$rid === void 0 ? \"\" : _ref4$rid;\n\n      var style = {}; // set phase\n\n      if (!isFull) {\n        style.display = this._state.torusWidgetVisibility ? \"block\" : \"none\";\n        style.height = \"70px\";\n        style.width = \"70px\";\n\n        switch (this._state.buttonPosition) {\n          case BUTTON_POSITION.TOP_LEFT:\n            style.top = \"0px\";\n            style.left = \"0px\";\n            style.right = \"auto\";\n            style.bottom = \"auto\";\n            break;\n\n          case BUTTON_POSITION.TOP_RIGHT:\n            style.top = \"0px\";\n            style.right = \"0px\";\n            style.left = \"auto\";\n            style.bottom = \"auto\";\n            break;\n\n          case BUTTON_POSITION.BOTTOM_RIGHT:\n            style.bottom = \"0px\";\n            style.right = \"0px\";\n            style.top = \"auto\";\n            style.left = \"auto\";\n            break;\n\n          case BUTTON_POSITION.BOTTOM_LEFT:\n          default:\n            style.bottom = \"0px\";\n            style.left = \"0px\";\n            style.top = \"auto\";\n            style.right = \"auto\";\n            break;\n        }\n      } else {\n        style.display = \"block\";\n        style.width = \"100%\";\n        style.height = \"100%\";\n        style.top = \"0px\";\n        style.right = \"0px\";\n        style.left = \"0px\";\n        style.bottom = \"0px\";\n      }\n\n      Object.assign(this.torusIframe.style, style);\n      this._state.isIFrameFullScreen = isFull;\n      this.request({\n        method: COMMUNICATION_JRPC_METHODS.IFRAME_STATUS,\n        params: {\n          isIFrameFullScreen: isFull,\n          rid: rid\n        }\n      });\n    }\n  }, {\n    key: \"hideTorusButton\",\n    value: function hideTorusButton() {\n      this._state.torusWidgetVisibility = false;\n\n      this._displayIframe();\n    }\n  }, {\n    key: \"showTorusButton\",\n    value: function showTorusButton() {\n      this._state.torusWidgetVisibility = true;\n\n      this._displayIframe();\n    }\n    /**\n     * Internal RPC method. Forwards requests to background via the RPC engine.\n     * Also remap ids inbound and outbound\n     */\n\n  }, {\n    key: \"_rpcRequest\",\n    value: function _rpcRequest(payload, callback) {\n      var cb = callback;\n      var _payload = payload;\n\n      if (!Array.isArray(_payload)) {\n        if (!_payload.jsonrpc) {\n          _payload.jsonrpc = \"2.0\";\n        }\n      }\n\n      this.tryWindowHandle(_payload, cb);\n    }\n    /**\n     * When the provider becomes connected, updates internal state and emits\n     * required events. Idempotent.\n     *\n     * @param currentLoginProvider - The login Provider\n     * emits TorusInpageProvider#connect\n     */\n\n  }, {\n    key: \"_handleConnect\",\n    value: function _handleConnect(currentLoginProvider, isLoggedIn) {\n      if (!this._state.isConnected) {\n        this._state.isConnected = true;\n        this.emit(\"connect\", {\n          currentLoginProvider: currentLoginProvider,\n          isLoggedIn: isLoggedIn\n        });\n        log.debug(messages.info.connected(currentLoginProvider));\n      }\n    }\n    /**\n     * When the provider becomes disconnected, updates internal state and emits\n     * required events. Idempotent with respect to the isRecoverable parameter.\n     *\n     * Error codes per the CloseEvent status codes as required by EIP-1193:\n     * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n     *\n     * @param isRecoverable - Whether the disconnection is recoverable.\n     * @param errorMessage - A custom error message.\n     * emits TorusInpageProvider#disconnect\n     */\n\n  }, {\n    key: \"_handleDisconnect\",\n    value: function _handleDisconnect(isRecoverable, errorMessage) {\n      if (this._state.isConnected || !this._state.isPermanentlyDisconnected && !isRecoverable) {\n        this._state.isConnected = false;\n        var error;\n\n        if (isRecoverable) {\n          error = new EthereumRpcError(1013, // Try again later\n          errorMessage || messages.errors.disconnected());\n          log.debug(error);\n        } else {\n          error = new EthereumRpcError(1011, // Internal error\n          errorMessage || messages.errors.permanentlyDisconnected());\n          log.error(error);\n          this._state.currentLoginProvider = null;\n          this._state.isLoggedIn = false;\n          this._state.torusWidgetVisibility = false;\n          this._state.isIFrameFullScreen = false;\n          this._state.isPermanentlyDisconnected = true;\n        }\n\n        this.emit(\"disconnect\", error);\n      }\n    } // Called if the iframe wants to close the window cause it is done processing the request\n\n  }, {\n    key: \"_handleCloseWindow\",\n    value: function _handleCloseWindow(params) {\n      var windowId = params.windowId;\n\n      if (this.windowRefs[windowId]) {\n        this.windowRefs[windowId].close();\n        delete this.windowRefs[windowId];\n      }\n    }\n  }, {\n    key: \"_createPopupBlockAlert\",\n    value: function () {\n      var _createPopupBlockAlert2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(windowId, url) {\n        var _this9 = this;\n\n        var logoUrl, torusAlert, successAlert, btnContainer, bindOnLoad, attachOnLoad;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                logoUrl = this.getLogoUrl();\n                torusAlert = htmlToElement('<div id=\"torusAlert\" class=\"torus-alert--v2\">' + \"<div id=\\\"torusAlert__logo\\\"><img src=\\\"\".concat(logoUrl, \"\\\" /></div>\") + \"<div>\" + \"<h1 id=\\\"torusAlert__title\\\">\".concat(this.embedTranslations.actionRequired, \"</h1>\") + \"<p id=\\\"torusAlert__desc\\\">\".concat(this.embedTranslations.pendingAction, \"</p>\") + \"</div>\" + \"</div>\");\n                successAlert = htmlToElement(\"<div><a id=\\\"torusAlert__btn\\\">\".concat(this.embedTranslations.continue, \"</a></div>\"));\n                btnContainer = htmlToElement('<div id=\"torusAlert__btn-container\"></div>');\n                btnContainer.appendChild(successAlert);\n                torusAlert.appendChild(btnContainer);\n\n                bindOnLoad = function bindOnLoad() {\n                  successAlert.addEventListener(\"click\", function () {\n                    _this9._handleWindow(windowId, {\n                      url: url,\n                      target: \"_blank\",\n                      features: getPopupFeatures(FEATURES_CONFIRM_WINDOW)\n                    });\n\n                    torusAlert.remove();\n                    if (_this9.torusAlertContainer.children.length === 0) _this9.torusAlertContainer.style.display = \"none\";\n                  });\n                };\n\n                attachOnLoad = function attachOnLoad() {\n                  _this9.torusAlertContainer.appendChild(torusAlert);\n                };\n\n                _context4.next = 10;\n                return documentReady();\n\n              case 10:\n                attachOnLoad();\n                bindOnLoad();\n                this.torusAlertContainer.style.display = \"block\";\n\n              case 13:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function _createPopupBlockAlert(_x4, _x5) {\n        return _createPopupBlockAlert2.apply(this, arguments);\n      }\n\n      return _createPopupBlockAlert;\n    }()\n  }, {\n    key: \"getLogoUrl\",\n    value: function getLogoUrl() {\n      var logoUrl = \"\".concat(this.torusUrl, \"/images/torus_icon-blue.svg\");\n      return logoUrl;\n    }\n  }]);\n\n  return TorusCommunicationProvider;\n}(BaseProvider);\n\n_defineProperty(TorusCommunicationProvider, \"_defaultState\", {\n  buttonPosition: \"bottom-left\",\n  currentLoginProvider: null,\n  isIFrameFullScreen: false,\n  hasEmittedConnection: false,\n  torusWidgetVisibility: false,\n  initialized: false,\n  isLoggedIn: false,\n  isPermanentlyDisconnected: false,\n  isConnected: false\n});\n\nfunction ownKeys$1(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$1(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nvar TorusInPageProvider = /*#__PURE__*/function (_BaseProvider2) {\n  _inherits(TorusInPageProvider, _BaseProvider2);\n\n  var _super4 = _createSuper(TorusInPageProvider);\n\n  /**\n   * The chain ID of the currently connected Solana chain.\n   * See [chainId.network]{@link https://chainid.network} for more information.\n   */\n\n  /**\n   * The user's currently selected Solana address.\n   * If null, Torus is either locked or the user has not permitted any\n   * addresses to be viewed.\n   */\n  function TorusInPageProvider(connectionStream, _ref) {\n    var _this10;\n\n    _classCallCheck(this, TorusInPageProvider);\n\n    var _ref$maxEventListener3 = _ref.maxEventListeners,\n        maxEventListeners = _ref$maxEventListener3 === void 0 ? 100 : _ref$maxEventListener3,\n        _ref$jsonRpcStreamNam3 = _ref.jsonRpcStreamName,\n        jsonRpcStreamName = _ref$jsonRpcStreamNam3 === void 0 ? \"provider\" : _ref$jsonRpcStreamNam3;\n    _this10 = _super4.call(this, connectionStream, {\n      maxEventListeners: maxEventListeners,\n      jsonRpcStreamName: jsonRpcStreamName\n    }); // private state\n\n    _defineProperty(_assertThisInitialized(_this10), \"chainId\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this10), \"selectedAddress\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this10), \"tryWindowHandle\", void 0);\n\n    _this10._state = _objectSpread$1({}, TorusInPageProvider._defaultState); // public state\n\n    _this10.selectedAddress = null;\n    _this10.chainId = null;\n    _this10._handleAccountsChanged = _this10._handleAccountsChanged.bind(_assertThisInitialized(_this10));\n    _this10._handleChainChanged = _this10._handleChainChanged.bind(_assertThisInitialized(_this10));\n    _this10._handleUnlockStateChanged = _this10._handleUnlockStateChanged.bind(_assertThisInitialized(_this10)); // setup own event listeners\n    // EIP-1193 connect\n\n    _this10.on(\"connect\", function () {\n      _this10._state.isConnected = true;\n    });\n\n    var jsonRpcNotificationHandler = function jsonRpcNotificationHandler(payload) {\n      var method = payload.method,\n          params = payload.params;\n\n      if (method === PROVIDER_NOTIFICATIONS.ACCOUNTS_CHANGED) {\n        _this10._handleAccountsChanged(params);\n      } else if (method === PROVIDER_NOTIFICATIONS.UNLOCK_STATE_CHANGED) {\n        _this10._handleUnlockStateChanged(params);\n      } else if (method === PROVIDER_NOTIFICATIONS.CHAIN_CHANGED) {\n        _this10._handleChainChanged(params);\n      }\n    }; // json rpc notification listener\n\n\n    _this10.jsonRpcConnectionEvents.on(\"notification\", jsonRpcNotificationHandler);\n\n    return _this10;\n  }\n  /**\n   * Returns whether the inpage provider is connected to Torus.\n   */\n\n\n  _createClass(TorusInPageProvider, [{\n    key: \"isConnected\",\n    value: function isConnected() {\n      return this._state.isConnected;\n    } // Private Methods\n    //= ===================\n\n    /**\n     * Constructor helper.\n     * Populates initial state by calling 'wallet_getProviderState' and emits\n     * necessary events.\n     */\n\n  }, {\n    key: \"_initializeState\",\n    value: function () {\n      var _initializeState3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var _yield$this$request2, accounts, chainId, isUnlocked;\n\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.prev = 0;\n                _context5.next = 3;\n                return this.request({\n                  method: PROVIDER_JRPC_METHODS.GET_PROVIDER_STATE,\n                  params: []\n                });\n\n              case 3:\n                _yield$this$request2 = _context5.sent;\n                accounts = _yield$this$request2.accounts;\n                chainId = _yield$this$request2.chainId;\n                isUnlocked = _yield$this$request2.isUnlocked;\n                // indicate that we've connected, for EIP-1193 compliance\n                this.emit(\"connect\", {\n                  chainId: chainId\n                });\n\n                this._handleChainChanged({\n                  chainId: chainId\n                });\n\n                this._handleUnlockStateChanged({\n                  accounts: accounts,\n                  isUnlocked: isUnlocked\n                });\n\n                this._handleAccountsChanged(accounts);\n\n                _context5.next = 16;\n                break;\n\n              case 13:\n                _context5.prev = 13;\n                _context5.t0 = _context5[\"catch\"](0);\n                log.error(\"Torus: Failed to get initial state. Please report this bug.\", _context5.t0);\n\n              case 16:\n                _context5.prev = 16;\n                log.info(\"initialized provider state\");\n                this._state.initialized = true;\n                this.emit(\"_initialized\");\n                return _context5.finish(16);\n\n              case 21:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this, [[0, 13, 16, 21]]);\n      }));\n\n      function _initializeState() {\n        return _initializeState3.apply(this, arguments);\n      }\n\n      return _initializeState;\n    }()\n    /**\n     * Internal RPC method. Forwards requests to background via the RPC engine.\n     * Also remap ids inbound and outbound\n     */\n\n  }, {\n    key: \"_rpcRequest\",\n    value: function _rpcRequest(payload, callback) {\n      var _this11 = this;\n\n      var isInternal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var cb = callback;\n      var _payload = payload;\n\n      if (!Array.isArray(_payload)) {\n        if (!_payload.jsonrpc) {\n          _payload.jsonrpc = \"2.0\";\n        }\n\n        if (_payload.method === \"solana_accounts\" || _payload.method === \"solana_requestAccounts\") {\n          // handle accounts changing\n          cb = function cb(err, res) {\n            _this11._handleAccountsChanged(res.result || [], _payload.method === \"solana_accounts\", isInternal);\n\n            callback(err, res);\n          };\n        } else if (_payload.method === \"wallet_getProviderState\") {\n          this._rpcEngine.handle(payload, cb);\n\n          return;\n        }\n      }\n\n      this.tryWindowHandle(_payload, cb);\n    }\n    /**\n     * When the provider becomes connected, updates internal state and emits\n     * required events. Idempotent.\n     *\n     * @param chainId - The ID of the newly connected chain.\n     * emits TorusInpageProvider#connect\n     */\n\n  }, {\n    key: \"_handleConnect\",\n    value: function _handleConnect(chainId) {\n      if (!this._state.isConnected) {\n        this._state.isConnected = true;\n        this.emit(\"connect\", {\n          chainId: chainId\n        });\n        log.debug(messages.info.connected(chainId));\n      }\n    }\n    /**\n     * When the provider becomes disconnected, updates internal state and emits\n     * required events. Idempotent with respect to the isRecoverable parameter.\n     *\n     * Error codes per the CloseEvent status codes as required by EIP-1193:\n     * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n     *\n     * @param isRecoverable - Whether the disconnection is recoverable.\n     * @param errorMessage - A custom error message.\n     * emits TorusInpageProvider#disconnect\n     */\n\n  }, {\n    key: \"_handleDisconnect\",\n    value: function _handleDisconnect(isRecoverable, errorMessage) {\n      if (this._state.isConnected || !this._state.isPermanentlyDisconnected && !isRecoverable) {\n        this._state.isConnected = false;\n        var error;\n\n        if (isRecoverable) {\n          error = new EthereumRpcError(1013, // Try again later\n          errorMessage || messages.errors.disconnected());\n          log.debug(error);\n        } else {\n          error = new EthereumRpcError(1011, // Internal error\n          errorMessage || messages.errors.permanentlyDisconnected());\n          log.error(error);\n          this.chainId = null;\n          this._state.accounts = null;\n          this.selectedAddress = null;\n          this._state.isUnlocked = false;\n          this._state.isPermanentlyDisconnected = true;\n        }\n\n        this.emit(\"disconnect\", error);\n      }\n    }\n    /**\n     * Called when accounts may have changed.\n     */\n\n  }, {\n    key: \"_handleAccountsChanged\",\n    value: function _handleAccountsChanged(accounts) {\n      var isEthAccounts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var isInternal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false; // defensive programming\n\n      var finalAccounts = accounts;\n\n      if (!Array.isArray(finalAccounts)) {\n        log.error(\"Torus: Received non-array accounts parameter. Please report this bug.\", finalAccounts);\n        finalAccounts = [];\n      }\n\n      var _iterator = _createForOfIteratorHelper(accounts),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var account = _step.value;\n\n          if (typeof account !== \"string\") {\n            log.error(\"Torus: Received non-string account. Please report this bug.\", accounts);\n            finalAccounts = [];\n            break;\n          }\n        } // emit accountsChanged if anything about the accounts array has changed\n\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      if (!dequal(this._state.accounts, finalAccounts)) {\n        // we should always have the correct accounts even before solana_accounts\n        // returns, except in cases where isInternal is true\n        if (isEthAccounts && Array.isArray(this._state.accounts) && this._state.accounts.length > 0 && !isInternal) {\n          log.error('Torus: \"solana_accounts\" unexpectedly updated accounts. Please report this bug.', finalAccounts);\n        }\n\n        this._state.accounts = finalAccounts;\n        this.emit(\"accountsChanged\", finalAccounts);\n      } // handle selectedAddress\n\n\n      if (this.selectedAddress !== finalAccounts[0]) {\n        this.selectedAddress = finalAccounts[0] || null;\n      }\n    }\n    /**\n     * Upon receipt of a new chainId and networkVersion, emits corresponding\n     * events and sets relevant public state.\n     * Does nothing if neither the chainId nor the networkVersion are different\n     * from existing values.\n     *\n     * emits TorusInpageProvider#chainChanged\n     * @param networkInfo - An object with network info.\n     */\n\n  }, {\n    key: \"_handleChainChanged\",\n    value: function _handleChainChanged() {\n      var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          chainId = _ref5.chainId;\n\n      if (!chainId) {\n        log.error(\"Torus: Received invalid network parameters. Please report this bug.\", {\n          chainId: chainId\n        });\n        return;\n      }\n\n      if (chainId === \"loading\") {\n        this._handleDisconnect(true);\n      } else {\n        this._handleConnect(chainId);\n\n        if (chainId !== this.chainId) {\n          this.chainId = chainId;\n\n          if (this._state.initialized) {\n            this.emit(\"chainChanged\", this.chainId);\n          }\n        }\n      }\n    }\n    /**\n     * Upon receipt of a new isUnlocked state, sets relevant public state.\n     * Calls the accounts changed handler with the received accounts, or an empty\n     * array.\n     *\n     * Does nothing if the received value is equal to the existing value.\n     * There are no lock/unlock events.\n     *\n     * @param opts - Options bag.\n     */\n\n  }, {\n    key: \"_handleUnlockStateChanged\",\n    value: function _handleUnlockStateChanged() {\n      var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          accounts = _ref6.accounts,\n          isUnlocked = _ref6.isUnlocked;\n\n      if (typeof isUnlocked !== \"boolean\") {\n        log.error(\"Torus: Received invalid isUnlocked parameter. Please report this bug.\", {\n          isUnlocked: isUnlocked\n        });\n        return;\n      }\n\n      if (isUnlocked !== this._state.isUnlocked) {\n        this._state.isUnlocked = isUnlocked;\n\n        this._handleAccountsChanged(accounts || []);\n      }\n    }\n  }]);\n\n  return TorusInPageProvider;\n}(BaseProvider);\n\n_defineProperty(TorusInPageProvider, \"_defaultState\", {\n  accounts: null,\n  isConnected: false,\n  isUnlocked: false,\n  initialized: false,\n  isPermanentlyDisconnected: false,\n  hasEmittedConnection: false\n});\n/**\n * Returns whether the given image URL exists\n */\n\n\nfunction imgExists(url) {\n  return new Promise(function (resolve, reject) {\n    try {\n      var img = document.createElement(\"img\");\n\n      img.onload = function () {\n        return resolve(true);\n      };\n\n      img.onerror = function () {\n        return resolve(false);\n      };\n\n      img.src = url;\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\n/**\n * Extracts a name for the site from the DOM\n */\n\n\nvar getSiteName = function getSiteName(window) {\n  var document = window.document;\n  var siteName = document.querySelector('head > meta[property=\"og:site_name\"]');\n\n  if (siteName) {\n    return siteName.content;\n  }\n\n  var metaTitle = document.querySelector('head > meta[name=\"title\"]');\n\n  if (metaTitle) {\n    return metaTitle.content;\n  }\n\n  if (document.title && document.title.length > 0) {\n    return document.title;\n  }\n\n  return window.location.hostname;\n};\n/**\n * Extracts an icon for the site from the DOM\n */\n\n\nfunction getSiteIcon(_x6) {\n  return _getSiteIcon.apply(this, arguments);\n}\n/**\n * Gets site metadata and returns it\n *\n */\n\n\nfunction _getSiteIcon() {\n  _getSiteIcon = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee25(window) {\n    var _document, icon;\n\n    return _regeneratorRuntime.wrap(function _callee25$(_context25) {\n      while (1) {\n        switch (_context25.prev = _context25.next) {\n          case 0:\n            _context25.prev = 0;\n            _document = window.document; // Use the site's favicon if it exists\n\n            icon = _document.querySelector('head > link[rel=\"shortcut icon\"]');\n            _context25.t0 = icon;\n\n            if (!_context25.t0) {\n              _context25.next = 8;\n              break;\n            }\n\n            _context25.next = 7;\n            return imgExists(icon.href);\n\n          case 7:\n            _context25.t0 = _context25.sent;\n\n          case 8:\n            if (!_context25.t0) {\n              _context25.next = 10;\n              break;\n            }\n\n            return _context25.abrupt(\"return\", icon.href);\n\n          case 10:\n            // Search through available icons in no particular order\n            icon = Array.from(_document.querySelectorAll('head > link[rel=\"icon\"]')).find(function (_icon) {\n              return Boolean(_icon.href);\n            });\n            _context25.t1 = icon;\n\n            if (!_context25.t1) {\n              _context25.next = 16;\n              break;\n            }\n\n            _context25.next = 15;\n            return imgExists(icon.href);\n\n          case 15:\n            _context25.t1 = _context25.sent;\n\n          case 16:\n            if (!_context25.t1) {\n              _context25.next = 18;\n              break;\n            }\n\n            return _context25.abrupt(\"return\", icon.href);\n\n          case 18:\n            return _context25.abrupt(\"return\", \"\");\n\n          case 21:\n            _context25.prev = 21;\n            _context25.t2 = _context25[\"catch\"](0);\n            return _context25.abrupt(\"return\", \"\");\n\n          case 24:\n          case \"end\":\n            return _context25.stop();\n        }\n      }\n    }, _callee25, null, [[0, 21]]);\n  }));\n  return _getSiteIcon.apply(this, arguments);\n}\n\nvar getSiteMetadata = /*#__PURE__*/function () {\n  var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n    return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.t0 = getSiteName(window);\n            _context6.next = 3;\n            return getSiteIcon(window);\n\n          case 3:\n            _context6.t1 = _context6.sent;\n            return _context6.abrupt(\"return\", {\n              name: _context6.t0,\n              icon: _context6.t1\n            });\n\n          case 5:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  }));\n\n  return function getSiteMetadata() {\n    return _ref7.apply(this, arguments);\n  };\n}();\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nvar PROVIDER_UNSAFE_METHODS = [\"send_transaction\", \"sign_transaction\", \"sign_all_transactions\", \"sign_message\", \"connect\"];\nvar COMMUNICATION_UNSAFE_METHODS = [COMMUNICATION_JRPC_METHODS.SET_PROVIDER];\nvar isLocalStorageAvailable = storageAvailable(\"localStorage\"); // preload for iframe doesn't work https://bugs.chromium.org/p/chromium/issues/detail?id=593267\n\n(function () {\n  var _preLoadIframe = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n    var torusIframeHtml, _yield$getTorusUrl, torusUrl;\n\n    return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            _context7.prev = 0;\n\n            if (!(typeof document === \"undefined\")) {\n              _context7.next = 3;\n              break;\n            }\n\n            return _context7.abrupt(\"return\");\n\n          case 3:\n            torusIframeHtml = document.createElement(\"link\");\n            _context7.next = 6;\n            return getTorusUrl(\"production\");\n\n          case 6:\n            _yield$getTorusUrl = _context7.sent;\n            torusUrl = _yield$getTorusUrl.torusUrl;\n            torusIframeHtml.href = \"\".concat(torusUrl, \"/frame\");\n            torusIframeHtml.crossOrigin = \"anonymous\";\n            torusIframeHtml.type = \"text/html\";\n            torusIframeHtml.rel = \"prefetch\";\n\n            if (torusIframeHtml.relList && torusIframeHtml.relList.supports) {\n              if (torusIframeHtml.relList.supports(\"prefetch\")) {\n                document.head.appendChild(torusIframeHtml);\n              }\n            }\n\n            _context7.next = 18;\n            break;\n\n          case 15:\n            _context7.prev = 15;\n            _context7.t0 = _context7[\"catch\"](0);\n            log.warn(_context7.t0);\n\n          case 18:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7, null, [[0, 15]]);\n  }));\n\n  function preLoadIframe() {\n    return _preLoadIframe.apply(this, arguments);\n  }\n\n  return preLoadIframe;\n})()();\n\nvar Torus = /*#__PURE__*/function () {\n  function Torus() {\n    _classCallCheck(this, Torus);\n\n    var _ref8 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref8$modalZIndex = _ref8.modalZIndex,\n        modalZIndex = _ref8$modalZIndex === void 0 ? 99999 : _ref8$modalZIndex;\n\n    _defineProperty(this, \"isInitialized\", void 0);\n\n    _defineProperty(this, \"torusAlert\", void 0);\n\n    _defineProperty(this, \"modalZIndex\", void 0);\n\n    _defineProperty(this, \"alertZIndex\", void 0);\n\n    _defineProperty(this, \"requestedLoginProvider\", void 0);\n\n    _defineProperty(this, \"provider\", void 0);\n\n    _defineProperty(this, \"communicationProvider\", void 0);\n\n    _defineProperty(this, \"dappStorageKey\", void 0);\n\n    _defineProperty(this, \"torusAlertContainer\", void 0);\n\n    _defineProperty(this, \"torusUrl\", void 0);\n\n    _defineProperty(this, \"torusIframe\", void 0);\n\n    _defineProperty(this, \"styleLink\", void 0);\n\n    this.torusUrl = \"\";\n    this.isInitialized = false; // init done\n\n    this.requestedLoginProvider = null;\n    this.modalZIndex = modalZIndex;\n    this.alertZIndex = modalZIndex + 1000;\n    this.dappStorageKey = \"\";\n  }\n\n  _createClass(Torus, [{\n    key: \"isLoggedIn\",\n    get: function get() {\n      if (!this.communicationProvider) return false;\n      return this.communicationProvider.isLoggedIn;\n    }\n  }, {\n    key: \"init\",\n    value: function () {\n      var _init = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {\n        var _this12 = this;\n\n        var _ref9,\n            _ref9$buildEnv,\n            buildEnv,\n            _ref9$enableLogging,\n            enableLogging,\n            network,\n            _ref9$showTorusButton,\n            showTorusButton,\n            _ref9$useLocalStorage,\n            useLocalStorage,\n            _ref9$buttonPosition,\n            buttonPosition,\n            _ref9$apiKey,\n            apiKey,\n            _ref9$extraParams,\n            extraParams,\n            _yield$getTorusUrl2,\n            torusUrl,\n            logLevel,\n            dappStorageKey,\n            torusIframeUrl,\n            hashParams,\n            handleSetup,\n            _args10 = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _ref9 = _args10.length > 0 && _args10[0] !== undefined ? _args10[0] : {}, _ref9$buildEnv = _ref9.buildEnv, buildEnv = _ref9$buildEnv === void 0 ? TORUS_BUILD_ENV.PRODUCTION : _ref9$buildEnv, _ref9$enableLogging = _ref9.enableLogging, enableLogging = _ref9$enableLogging === void 0 ? false : _ref9$enableLogging, network = _ref9.network, _ref9$showTorusButton = _ref9.showTorusButton, showTorusButton = _ref9$showTorusButton === void 0 ? false : _ref9$showTorusButton, _ref9$useLocalStorage = _ref9.useLocalStorage, useLocalStorage = _ref9$useLocalStorage === void 0 ? false : _ref9$useLocalStorage, _ref9$buttonPosition = _ref9.buttonPosition, buttonPosition = _ref9$buttonPosition === void 0 ? BUTTON_POSITION.BOTTOM_LEFT : _ref9$buttonPosition, _ref9$apiKey = _ref9.apiKey, apiKey = _ref9$apiKey === void 0 ? \"torus-default\" : _ref9$apiKey, _ref9$extraParams = _ref9.extraParams, extraParams = _ref9$extraParams === void 0 ? {} : _ref9$extraParams;\n\n                if (!this.isInitialized) {\n                  _context10.next = 3;\n                  break;\n                }\n\n                throw new Error(\"Already initialized\");\n\n              case 3:\n                setAPIKey(apiKey);\n                _context10.next = 6;\n                return getTorusUrl(buildEnv);\n\n              case 6:\n                _yield$getTorusUrl2 = _context10.sent;\n                torusUrl = _yield$getTorusUrl2.torusUrl;\n                logLevel = _yield$getTorusUrl2.logLevel;\n                log.info(torusUrl, \"url loaded\");\n                this.torusUrl = torusUrl;\n                log.setDefaultLevel(logLevel);\n                if (enableLogging) log.enableAll();else log.disableAll();\n                dappStorageKey = this.handleDappStorageKey(useLocalStorage);\n                torusIframeUrl = new URL(torusUrl);\n                if (torusIframeUrl.pathname.endsWith(\"/\")) torusIframeUrl.pathname += \"frame\";else torusIframeUrl.pathname += \"/frame\";\n                hashParams = new URLSearchParams();\n                if (dappStorageKey) hashParams.append(\"dappStorageKey\", dappStorageKey);\n                hashParams.append(\"origin\", window.location.origin);\n                torusIframeUrl.hash = hashParams.toString(); // Iframe code\n\n                this.torusIframe = htmlToElement(\"<iframe\\n        id=\\\"torusIframe\\\"\\n        class=\\\"torusIframe\\\"\\n        src=\\\"\".concat(torusIframeUrl.href, \"\\\"\\n        style=\\\"display: none; position: fixed; top: 0; right: 0; width: 100%;\\n        height: 100%; border: none; border-radius: 0; z-index: \").concat(this.modalZIndex.toString(), \"\\\"\\n      ></iframe>\"));\n                this.torusAlertContainer = htmlToElement(\"<div id=\\\"torusAlertContainer\\\" style=\\\"display:none; z-index: \".concat(this.alertZIndex.toString(), \"\\\"></div>\"));\n                this.styleLink = htmlToElement(\"<link href=\\\"\".concat(torusUrl, \"/css/widget.css\\\" rel=\\\"stylesheet\\\" type=\\\"text/css\\\">\"));\n\n                handleSetup = /*#__PURE__*/function () {\n                  var _ref10 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {\n                    return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n                      while (1) {\n                        switch (_context9.prev = _context9.next) {\n                          case 0:\n                            return _context9.abrupt(\"return\", new Promise(function (resolve, reject) {\n                              try {\n                                window.document.head.appendChild(_this12.styleLink);\n                                window.document.body.appendChild(_this12.torusIframe);\n                                window.document.body.appendChild(_this12.torusAlertContainer);\n\n                                _this12.torusIframe.addEventListener(\"load\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n                                  var dappMetadata;\n                                  return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n                                    while (1) {\n                                      switch (_context8.prev = _context8.next) {\n                                        case 0:\n                                          _context8.next = 2;\n                                          return getSiteMetadata();\n\n                                        case 2:\n                                          dappMetadata = _context8.sent;\n\n                                          // send init params here\n                                          _this12.torusIframe.contentWindow.postMessage({\n                                            buttonPosition: buttonPosition,\n                                            apiKey: apiKey,\n                                            network: typeof network === \"string\" ? getNetworkConfig(network) : network,\n                                            dappMetadata: dappMetadata,\n                                            extraParams: extraParams\n                                          }, torusIframeUrl.origin);\n\n                                          _context8.next = 6;\n                                          return _this12._setupWeb3({\n                                            torusUrl: torusUrl\n                                          });\n\n                                        case 6:\n                                          if (showTorusButton) _this12.showTorusButton();else _this12.hideTorusButton();\n                                          _this12.isInitialized = true;\n                                          window.torus = _this12;\n                                          resolve();\n\n                                        case 10:\n                                        case \"end\":\n                                          return _context8.stop();\n                                      }\n                                    }\n                                  }, _callee8);\n                                })));\n                              } catch (error) {\n                                reject(error);\n                              }\n                            }));\n\n                          case 1:\n                          case \"end\":\n                            return _context9.stop();\n                        }\n                      }\n                    }, _callee9);\n                  }));\n\n                  return function handleSetup() {\n                    return _ref10.apply(this, arguments);\n                  };\n                }();\n\n                _context10.next = 26;\n                return documentReady();\n\n              case 26:\n                _context10.next = 28;\n                return handleSetup();\n\n              case 28:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function init() {\n        return _init.apply(this, arguments);\n      }\n\n      return init;\n    }()\n  }, {\n    key: \"login\",\n    value: function () {\n      var _login = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {\n        var _this13 = this;\n\n        var params,\n            res,\n            _args11 = arguments;\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                params = _args11.length > 0 && _args11[0] !== undefined ? _args11[0] : {};\n\n                if (this.isInitialized) {\n                  _context11.next = 3;\n                  break;\n                }\n\n                throw new Error(\"Call init() first\");\n\n              case 3:\n                _context11.prev = 3;\n                this.requestedLoginProvider = params.loginProvider || null;\n\n                if (!this.requestedLoginProvider) {\n                  this.communicationProvider._displayIframe({\n                    isFull: true\n                  });\n                } // If user is already logged in, we assume they have given access to the website\n\n\n                _context11.next = 8;\n                return new Promise(function (resolve, reject) {\n                  // We use this method because we want to update inPage provider state with account info\n                  _this13.provider._rpcRequest({\n                    method: \"solana_requestAccounts\",\n                    params: [_this13.requestedLoginProvider, params.login_hint]\n                  }, getRpcPromiseCallback(resolve, reject));\n                });\n\n              case 8:\n                res = _context11.sent;\n\n                if (!(Array.isArray(res) && res.length > 0)) {\n                  _context11.next = 11;\n                  break;\n                }\n\n                return _context11.abrupt(\"return\", res);\n\n              case 11:\n                throw new Error(\"Login failed\");\n\n              case 14:\n                _context11.prev = 14;\n                _context11.t0 = _context11[\"catch\"](3);\n                log.error(\"login failed\", _context11.t0);\n                throw _context11.t0;\n\n              case 18:\n                _context11.prev = 18;\n                if (this.communicationProvider.isIFrameFullScreen) this.communicationProvider._displayIframe();\n                return _context11.finish(18);\n\n              case 21:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this, [[3, 14, 18, 21]]);\n      }));\n\n      function login() {\n        return _login.apply(this, arguments);\n      }\n\n      return login;\n    }()\n  }, {\n    key: \"logout\",\n    value: function () {\n      var _logout = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12() {\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                if (this.communicationProvider.isLoggedIn) {\n                  _context12.next = 2;\n                  break;\n                }\n\n                throw new Error(\"Not logged in\");\n\n              case 2:\n                _context12.next = 4;\n                return this.communicationProvider.request({\n                  method: COMMUNICATION_JRPC_METHODS.LOGOUT,\n                  params: []\n                });\n\n              case 4:\n                this.requestedLoginProvider = null;\n\n              case 5:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      function logout() {\n        return _logout.apply(this, arguments);\n      }\n\n      return logout;\n    }()\n  }, {\n    key: \"cleanUp\",\n    value: function () {\n      var _cleanUp = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13() {\n        return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                if (!this.communicationProvider.isLoggedIn) {\n                  _context13.next = 3;\n                  break;\n                }\n\n                _context13.next = 3;\n                return this.logout();\n\n              case 3:\n                this.clearInit();\n\n              case 4:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      function cleanUp() {\n        return _cleanUp.apply(this, arguments);\n      }\n\n      return cleanUp;\n    }()\n  }, {\n    key: \"clearInit\",\n    value: function clearInit() {\n      function isElement(element) {\n        return element instanceof Element || element instanceof Document;\n      }\n\n      if (isElement(this.styleLink) && window.document.body.contains(this.styleLink)) {\n        this.styleLink.remove();\n        this.styleLink = undefined;\n      }\n\n      if (isElement(this.torusIframe) && window.document.body.contains(this.torusIframe)) {\n        this.torusIframe.remove();\n        this.torusIframe = undefined;\n      }\n\n      if (isElement(this.torusAlertContainer) && window.document.body.contains(this.torusAlertContainer)) {\n        this.torusAlert = undefined;\n        this.torusAlertContainer.remove();\n        this.torusAlertContainer = undefined;\n      }\n\n      this.isInitialized = false;\n    }\n  }, {\n    key: \"hideTorusButton\",\n    value: function hideTorusButton() {\n      this.communicationProvider.hideTorusButton();\n    }\n  }, {\n    key: \"showTorusButton\",\n    value: function showTorusButton() {\n      this.communicationProvider.showTorusButton();\n    }\n  }, {\n    key: \"setProvider\",\n    value: function () {\n      var _setProvider = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(params) {\n        return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                _context14.next = 2;\n                return this.communicationProvider.request({\n                  method: COMMUNICATION_JRPC_METHODS.SET_PROVIDER,\n                  params: _objectSpread({}, params)\n                });\n\n              case 2:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n\n      function setProvider(_x7) {\n        return _setProvider.apply(this, arguments);\n      }\n\n      return setProvider;\n    }()\n  }, {\n    key: \"showWallet\",\n    value: function () {\n      var _showWallet = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(path) {\n        var params,\n            instanceId,\n            finalPath,\n            finalUrl,\n            walletWindow,\n            _args15 = arguments;\n        return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                params = _args15.length > 1 && _args15[1] !== undefined ? _args15[1] : {};\n                _context15.next = 3;\n                return this.communicationProvider.request({\n                  method: COMMUNICATION_JRPC_METHODS.WALLET_INSTANCE_ID,\n                  params: []\n                });\n\n              case 3:\n                instanceId = _context15.sent;\n                finalPath = path ? \"/\".concat(path) : \"\";\n                finalUrl = new URL(\"\".concat(this.torusUrl, \"/wallet\").concat(finalPath)); // Using URL constructor to prevent js injection and allow parameter validation.!\n\n                finalUrl.searchParams.append(\"instanceId\", instanceId);\n                Object.keys(params).forEach(function (x) {\n                  finalUrl.searchParams.append(x, params[x]);\n                });\n\n                if (this.dappStorageKey) {\n                  finalUrl.hash = \"#dappStorageKey=\".concat(this.dappStorageKey);\n                } // No need to track this window state. Hence, no _handleWindow call.\n\n\n                walletWindow = new PopupHandler({\n                  url: finalUrl,\n                  features: getPopupFeatures(FEATURES_DEFAULT_WALLET_WINDOW)\n                });\n                walletWindow.open();\n\n              case 11:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n\n      function showWallet(_x8) {\n        return _showWallet.apply(this, arguments);\n      }\n\n      return showWallet;\n    }()\n  }, {\n    key: \"getUserInfo\",\n    value: function () {\n      var _getUserInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16() {\n        var userInfoResponse;\n        return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                _context16.next = 2;\n                return this.communicationProvider.request({\n                  method: COMMUNICATION_JRPC_METHODS.USER_INFO,\n                  params: []\n                });\n\n              case 2:\n                userInfoResponse = _context16.sent;\n                return _context16.abrupt(\"return\", userInfoResponse);\n\n              case 4:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n\n      function getUserInfo() {\n        return _getUserInfo.apply(this, arguments);\n      }\n\n      return getUserInfo;\n    }()\n  }, {\n    key: \"initiateTopup\",\n    value: function () {\n      var _initiateTopup = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17(provider, params) {\n        var windowId, topupResponse;\n        return _regeneratorRuntime.wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                if (this.isInitialized) {\n                  _context17.next = 2;\n                  break;\n                }\n\n                throw new Error(\"Torus is not initialized\");\n\n              case 2:\n                windowId = getWindowId();\n\n                this.communicationProvider._handleWindow(windowId);\n\n                _context17.next = 6;\n                return this.communicationProvider.request({\n                  method: COMMUNICATION_JRPC_METHODS.TOPUP,\n                  params: {\n                    provider: provider,\n                    params: params,\n                    windowId: windowId\n                  }\n                });\n\n              case 6:\n                topupResponse = _context17.sent;\n                return _context17.abrupt(\"return\", topupResponse);\n\n              case 8:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n\n      function initiateTopup(_x9, _x10) {\n        return _initiateTopup.apply(this, arguments);\n      }\n\n      return initiateTopup;\n    }() // Solana specific API\n\n  }, {\n    key: \"sendTransaction\",\n    value: function () {\n      var _sendTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee18(transaction) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                _context18.next = 2;\n                return this.provider.request({\n                  method: \"send_transaction\",\n                  // params: { message: transaction.serializeMessage().toString(\"hex\") },\n                  params: {\n                    message: transaction.serialize({\n                      requireAllSignatures: false\n                    }).toString(\"hex\")\n                  }\n                });\n\n              case 2:\n                response = _context18.sent;\n                return _context18.abrupt(\"return\", response);\n\n              case 4:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this);\n      }));\n\n      function sendTransaction(_x11) {\n        return _sendTransaction.apply(this, arguments);\n      }\n\n      return sendTransaction;\n    }()\n  }, {\n    key: \"signTransaction\",\n    value: function () {\n      var _signTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee19(transaction) {\n        var response, buf, sendTx;\n        return _regeneratorRuntime.wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                _context19.next = 2;\n                return this.provider.request({\n                  method: \"sign_transaction\",\n                  // params: { message: transaction.serializeMessage().toString(\"hex\") },\n                  params: {\n                    message: transaction.serialize({\n                      requireAllSignatures: false\n                    }).toString(\"hex\")\n                  }\n                });\n\n              case 2:\n                response = _context19.sent;\n                buf = Buffer.from(response, \"hex\");\n                sendTx = Transaction.from(buf);\n                return _context19.abrupt(\"return\", sendTx);\n\n              case 6:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n        }, _callee19, this);\n      }));\n\n      function signTransaction(_x12) {\n        return _signTransaction.apply(this, arguments);\n      }\n\n      return signTransaction;\n    }()\n  }, {\n    key: \"signAllTransactions\",\n    value: function () {\n      var _signAllTransactions = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee20(transactions) {\n        var encodedTransactions, response, allSignedTransaction;\n        return _regeneratorRuntime.wrap(function _callee20$(_context20) {\n          while (1) {\n            switch (_context20.prev = _context20.next) {\n              case 0:\n                encodedTransactions = transactions.map(function (x) {\n                  return x.serialize({\n                    requireAllSignatures: false\n                  }).toString(\"hex\");\n                });\n                _context20.next = 3;\n                return this.provider.request({\n                  method: \"sign_all_transactions\",\n                  params: {\n                    message: encodedTransactions\n                  }\n                });\n\n              case 3:\n                response = _context20.sent;\n                allSignedTransaction = response.map(function (msg) {\n                  return Transaction.from(Buffer.from(msg, \"hex\"));\n                });\n                return _context20.abrupt(\"return\", allSignedTransaction);\n\n              case 6:\n              case \"end\":\n                return _context20.stop();\n            }\n          }\n        }, _callee20, this);\n      }));\n\n      function signAllTransactions(_x13) {\n        return _signAllTransactions.apply(this, arguments);\n      }\n\n      return signAllTransactions;\n    }()\n  }, {\n    key: \"signMessage\",\n    value: function () {\n      var _signMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee21(data) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee21$(_context21) {\n          while (1) {\n            switch (_context21.prev = _context21.next) {\n              case 0:\n                _context21.next = 2;\n                return this.provider.request({\n                  method: \"sign_message\",\n                  params: {\n                    data: data\n                  }\n                });\n\n              case 2:\n                response = _context21.sent;\n                return _context21.abrupt(\"return\", response);\n\n              case 4:\n              case \"end\":\n                return _context21.stop();\n            }\n          }\n        }, _callee21, this);\n      }));\n\n      function signMessage(_x14) {\n        return _signMessage.apply(this, arguments);\n      }\n\n      return signMessage;\n    }()\n  }, {\n    key: \"getGaslessPublicKey\",\n    value: function () {\n      var _getGaslessPublicKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee22() {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee22$(_context22) {\n          while (1) {\n            switch (_context22.prev = _context22.next) {\n              case 0:\n                _context22.next = 2;\n                return this.provider.request({\n                  method: \"get_gasless_public_key\",\n                  params: []\n                });\n\n              case 2:\n                response = _context22.sent;\n                return _context22.abrupt(\"return\", response);\n\n              case 4:\n              case \"end\":\n                return _context22.stop();\n            }\n          }\n        }, _callee22, this);\n      }));\n\n      function getGaslessPublicKey() {\n        return _getGaslessPublicKey.apply(this, arguments);\n      }\n\n      return getGaslessPublicKey;\n    }() // async connect(): Promise<boolean> {\n    //   const response = (await this.provider.request({\n    //     method: \"connect\",\n    //     params: {},\n    //   })) as boolean;\n    //   return response;\n    // }\n\n  }, {\n    key: \"handleDappStorageKey\",\n    value: function handleDappStorageKey(useLocalStorage) {\n      var dappStorageKey = \"\";\n\n      if (isLocalStorageAvailable && useLocalStorage) {\n        var storedKey = window.localStorage.getItem(configuration.localStorageKey);\n        if (storedKey) dappStorageKey = storedKey;else {\n          var generatedKey = \"torus-app-\".concat(getWindowId());\n          window.localStorage.setItem(configuration.localStorageKey, generatedKey);\n          dappStorageKey = generatedKey;\n        }\n      }\n\n      this.dappStorageKey = dappStorageKey;\n      return dappStorageKey;\n    }\n  }, {\n    key: \"_setupWeb3\",\n    value: function () {\n      var _setupWeb = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee23(providerParams) {\n        var _this14 = this;\n\n        var providerStream, communicationStream, inPageProvider, communicationProvider, detectAccountRequestPrototypeModifier, proxiedInPageProvider, proxiedCommunicationProvider;\n        return _regeneratorRuntime.wrap(function _callee23$(_context23) {\n          while (1) {\n            switch (_context23.prev = _context23.next) {\n              case 0:\n                log.info(\"setupWeb3 running\"); // setup background connection\n\n                providerStream = new BasePostMessageStream({\n                  name: \"embed_torus\",\n                  target: \"iframe_torus\",\n                  targetWindow: this.torusIframe.contentWindow\n                }); // We create another LocalMessageDuplexStream for communication between dapp <> iframe\n\n                communicationStream = new BasePostMessageStream({\n                  name: \"embed_communication\",\n                  target: \"iframe_communication\",\n                  targetWindow: this.torusIframe.contentWindow\n                }); // compose the inPage provider\n\n                inPageProvider = new TorusInPageProvider(providerStream, {});\n                communicationProvider = new TorusCommunicationProvider(communicationStream, {});\n\n                inPageProvider.tryWindowHandle = function (payload, cb) {\n                  var _payload = payload;\n\n                  if (!Array.isArray(_payload) && PROVIDER_UNSAFE_METHODS.includes(_payload.method)) {\n                    if (!_this14.communicationProvider.isLoggedIn) throw new Error(\"User Not Logged In\");\n                    var windowId = getWindowId();\n\n                    communicationProvider._handleWindow(windowId, {\n                      target: \"_blank\",\n                      features: getPopupFeatures(FEATURES_CONFIRM_WINDOW)\n                    }); // for inPageProvider methods sending windowId in request instead of params\n                    // as params might be positional.\n\n\n                    _payload.windowId = windowId;\n                  }\n\n                  inPageProvider._rpcEngine.handle(_payload, cb);\n                };\n\n                communicationProvider.tryWindowHandle = function (payload, cb) {\n                  var _payload = payload;\n\n                  if (!Array.isArray(_payload) && COMMUNICATION_UNSAFE_METHODS.includes(_payload.method)) {\n                    var windowId = getWindowId();\n\n                    communicationProvider._handleWindow(windowId, {\n                      target: \"_blank\",\n                      features: getPopupFeatures(FEATURES_PROVIDER_CHANGE_WINDOW) // todo: are these features generic for all\n\n                    }); // for communication methods sending window id in jrpc req params\n\n\n                    _payload.params.windowId = windowId;\n                  }\n\n                  communicationProvider._rpcEngine.handle(_payload, cb);\n                }; // detect solana_requestAccounts and pipe to enable for now\n\n\n                detectAccountRequestPrototypeModifier = function detectAccountRequestPrototypeModifier(m) {\n                  var originalMethod = inPageProvider[m]; // eslint-disable-next-line @typescript-eslint/no-this-alias\n\n                  var self = _this14;\n\n                  inPageProvider[m] = function providerFunc(request, cb) {\n                    var method = request.method,\n                        _request$params = request.params,\n                        params = _request$params === void 0 ? [] : _request$params;\n\n                    if (method === \"solana_requestAccounts\") {\n                      if (!cb) return self.login({\n                        loginProvider: params[0]\n                      });\n                      self.login({\n                        loginProvider: params[0]\n                      }) // eslint-disable-next-line promise/no-callback-in-promise\n                      .then(function (res) {\n                        return cb(null, res);\n                      }) // eslint-disable-next-line promise/no-callback-in-promise\n                      .catch(function (err) {\n                        return cb(err);\n                      });\n                    }\n\n                    return originalMethod.apply(this, [request, cb]);\n                  };\n                }; // Detects call to solana_requestAccounts in request & sendAsync and passes to login\n\n\n                detectAccountRequestPrototypeModifier(\"request\");\n                detectAccountRequestPrototypeModifier(\"sendAsync\");\n                detectAccountRequestPrototypeModifier(\"send\");\n                proxiedInPageProvider = new Proxy(inPageProvider, {\n                  // straight up lie that we deleted the property so that it doesn't\n                  // throw an error in strict mode\n                  deleteProperty: function deleteProperty() {\n                    return true;\n                  }\n                });\n                proxiedCommunicationProvider = new Proxy(communicationProvider, {\n                  // straight up lie that we deleted the property so that it doesn't\n                  // throw an error in strict mode\n                  deleteProperty: function deleteProperty() {\n                    return true;\n                  }\n                });\n                this.provider = proxiedInPageProvider;\n                this.communicationProvider = proxiedCommunicationProvider;\n                _context23.next = 17;\n                return Promise.all([inPageProvider._initializeState(), communicationProvider._initializeState(_objectSpread(_objectSpread({}, providerParams), {}, {\n                  dappStorageKey: this.dappStorageKey,\n                  torusAlertContainer: this.torusAlertContainer,\n                  torusIframe: this.torusIframe\n                }))]);\n\n              case 17:\n                log.debug(\"Torus - injected provider\");\n\n              case 18:\n              case \"end\":\n                return _context23.stop();\n            }\n          }\n        }, _callee23, this);\n      }));\n\n      function _setupWeb3(_x15) {\n        return _setupWeb.apply(this, arguments);\n      }\n\n      return _setupWeb3;\n    }()\n  }]);\n\n  return Torus;\n}();\n\nexport { BUTTON_POSITION, LOGIN_PROVIDER, PAYMENT_PROVIDER, TORUS_BUILD_ENV, TorusInPageProvider, Torus as default };","map":{"version":3,"sources":["../src/messages.ts","../src/interfaces.ts","../src/config.ts","../src/loglevel.ts","../src/utils.ts","../src/baseProvider.ts","../src/embedUtils.ts","../src/PopupHandler.ts","../src/communicationProvider.ts","../src/inPageProvider.ts","../src/siteMetadata.ts","../src/embed.ts"],"names":["errors","disconnected","permanentlyDisconnected","unsupportedSync","method","invalidDuplexStream","invalidOptions","maxEventListeners","invalidRequestArgs","invalidRequestMethod","invalidRequestParams","invalidLoggerObject","invalidLoggerMethod","info","connected","chainId","warnings","PAYMENT_PROVIDER","MOONPAY","WYRE","RAMPNETWORK","XANPOOL","MERCURYO","TRANSAK","TORUS_BUILD_ENV","PRODUCTION","DEVELOPMENT","TESTING","BUTTON_POSITION","BOTTOM_LEFT","TOP_LEFT","BOTTOM_RIGHT","TOP_RIGHT","LOGIN_PROVIDER","GOOGLE","FACEBOOK","REDDIT","DISCORD","TWITCH","APPLE","LINE","GITHUB","KAKAO","LINKEDIN","TWITTER","WEIBO","WECHAT","EMAIL_PASSWORDLESS","translations","en","embed","continue","actionRequired","pendingAction","cookiesRequired","enableCookies","clickHere","de","ja","ko","zh","supportedVerifierList","api","prodTorusUrl","localStorageKey","window","loglevel","createErrorMiddleware","req","res","message","data","next","done","error","log","logStreamDisconnectWarning","remoteLabel","emitter","warningMsg","getWindowId","Math","getTorusUrl","torusUrl","logLevel","getUserLanguage","userLanguage","userLanguages","Object","config","FEATURES_PROVIDER_CHANGE_WINDOW","height","width","FEATURES_DEFAULT_WALLET_WINDOW","FEATURES_DEFAULT_POPUP_WINDOW","FEATURES_CONFIRM_WINDOW","storageAvailable","type","storage","x","e","getPopupFeatures","h","dualScreenLeft","dualScreenTop","document","systemZoom","left","top","features","w","getNetworkConfig","label","blockExplorerUrl","displayName","logo","rpcTarget","ticker","tickerName","constructor","connectionStream","jsonRpcStreamName","isDuplexStream","messages","mux","pump","jsonRpcConnection","createStreamMiddleware","rpcEngine","createIdRemapMiddleware","createLoggerMiddleware","origin","location","request","Array","args","params","getRpcPromiseCallback","send","sendAsync","_handleStreamDisconnect","handleEvent","handlerArgs","handlerWrapper","handler","handle","resolve","htmlToElement","html","template","trimmedHtml","target","_setupTimer","Number","setInterval","clearInterval","open","Promise","close","redirect","TorusCommunicationProvider","buttonPosition","currentLoginProvider","isIFrameFullScreen","hasEmittedConnection","torusWidgetVisibility","initialized","isLoggedIn","isPermanentlyDisconnected","isConnected","languageTranslations","configuration","notificationHandler","payload","COMMUNICATION_NOTIFICATIONS","rid","isFull","url","_initializeState","torusIframe","COMMUNICATION_JRPC_METHODS","_handleWindow","finalUrl","handledWindow","windowId","_displayIframe","style","hideTorusButton","showTorusButton","_rpcRequest","cb","_payload","_handleConnect","_handleDisconnect","errorMessage","_handleCloseWindow","_createPopupBlockAlert","logoUrl","torusAlert","successAlert","btnContainer","bindOnLoad","attachOnLoad","documentReady","getLogoUrl","TorusInPageProvider","accounts","isUnlocked","jsonRpcNotificationHandler","PROVIDER_NOTIFICATIONS","PROVIDER_JRPC_METHODS","isInternal","callback","_handleAccountsChanged","isEthAccounts","finalAccounts","dequal","_handleChainChanged","_handleUnlockStateChanged","img","reject","getSiteName","siteName","metaTitle","icon","imgExists","_icon","Boolean","getSiteMetadata","name","getSiteIcon","PROVIDER_UNSAFE_METHODS","COMMUNICATION_UNSAFE_METHODS","isLocalStorageAvailable","torusIframeHtml","modalZIndex","init","buildEnv","enableLogging","useLocalStorage","apiKey","extraParams","setAPIKey","dappStorageKey","torusIframeUrl","hashParams","handleSetup","dappMetadata","network","login","logout","cleanUp","clearInit","element","isElement","setProvider","showWallet","instanceId","finalPath","path","walletWindow","getUserInfo","userInfoResponse","initiateTopup","topupResponse","provider","sendTransaction","response","requireAllSignatures","signTransaction","buf","Buffer","sendTx","Transaction","signAllTransactions","encodedTransactions","allSignedTransaction","msg","signMessage","getGaslessPublicKey","handleDappStorageKey","storedKey","generatedKey","_setupWeb3","providerStream","targetWindow","contentWindow","communicationStream","inPageProvider","communicationProvider","detectAccountRequestPrototypeModifier","m","originalMethod","self","loginProvider","err","proxiedInPageProvider","deleteProperty","proxiedCommunicationProvider","torusAlertContainer"],"mappings":"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","sourcesContent":["import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { Transaction } from '@solana/web3.js';\nimport { createLoggerMiddleware, COMMUNICATION_JRPC_METHODS, COMMUNICATION_NOTIFICATIONS, PROVIDER_JRPC_METHODS, PROVIDER_NOTIFICATIONS } from '@toruslabs/base-controllers';\nimport { setAPIKey } from '@toruslabs/http-helpers';\nimport { SafeEventEmitter, ObjectMultiplex, createStreamMiddleware, JRPCEngine, createIdRemapMiddleware, getRpcPromiseCallback, BasePostMessageStream } from '@toruslabs/openlogin-jrpc';\nimport { ethErrors, EthereumRpcError } from 'eth-rpc-errors';\nimport { isDuplexStream } from 'is-stream';\nimport pump from 'pump';\nimport loglevel from 'loglevel';\nimport dequal from 'fast-deep-equal';\n\nvar messages = {\n  errors: {\n    disconnected: () => \"Torus: Lost connection to Torus.\",\n    permanentlyDisconnected: () => \"Torus: Disconnected from iframe. Page reload required.\",\n    unsupportedSync: method => \"Torus: The Torus Ethereum provider does not support synchronous methods like \".concat(method, \" without a callback parameter.\"),\n    invalidDuplexStream: () => \"Must provide a Node.js-style duplex stream.\",\n    invalidOptions: maxEventListeners => \"Invalid options. Received: { maxEventListeners: \".concat(maxEventListeners, \"}\"),\n    invalidRequestArgs: () => \"Expected a single, non-array, object argument.\",\n    invalidRequestMethod: () => \"'args.method' must be a non-empty string.\",\n    invalidRequestParams: () => \"'args.params' must be an object or array if provided.\",\n    invalidLoggerObject: () => \"'args.logger' must be an object if provided.\",\n    invalidLoggerMethod: method => \"'args.logger' must include required method '\".concat(method, \"'.\")\n  },\n  info: {\n    connected: chainId => \"Torus: Connected to chain with ID \\\"\".concat(chainId, \"\\\".\")\n  },\n  warnings: {}\n};\n\nconst PAYMENT_PROVIDER = {\n  MOONPAY: \"moonpay\",\n  WYRE: \"wyre\",\n  RAMPNETWORK: \"rampnetwork\",\n  XANPOOL: \"xanpool\",\n  MERCURYO: \"mercuryo\",\n  TRANSAK: \"transak\"\n};\nconst TORUS_BUILD_ENV = {\n  PRODUCTION: \"production\",\n  DEVELOPMENT: \"development\",\n  TESTING: \"testing\"\n};\nconst BUTTON_POSITION = {\n  BOTTOM_LEFT: \"bottom-left\",\n  TOP_LEFT: \"top-left\",\n  BOTTOM_RIGHT: \"bottom-right\",\n  TOP_RIGHT: \"top-right\"\n};\nconst LOGIN_PROVIDER = {\n  GOOGLE: \"google\",\n  FACEBOOK: \"facebook\",\n  REDDIT: \"reddit\",\n  DISCORD: \"discord\",\n  TWITCH: \"twitch\",\n  APPLE: \"apple\",\n  LINE: \"line\",\n  GITHUB: \"github\",\n  KAKAO: \"kakao\",\n  LINKEDIN: \"linkedin\",\n  TWITTER: \"twitter\",\n  WEIBO: \"weibo\",\n  WECHAT: \"wechat\",\n  EMAIL_PASSWORDLESS: \"email_passwordless\"\n};\n\nconst translations = {\n  en: {\n    embed: {\n      continue: \"Continue\",\n      actionRequired: \"Authorization required\",\n      pendingAction: \"Click continue to proceed with your request in a popup\",\n      cookiesRequired: \"Cookies Required\",\n      enableCookies: \"Please enable cookies in your browser preferences to access Torus\",\n      clickHere: \"More Info\"\n    }\n  },\n  de: {\n    embed: {\n      continue: \"Fortsetzen\",\n      actionRequired: \"Autorisierung erforderlich\",\n      pendingAction: \"Klicken Sie in einem Popup auf Weiter, um mit Ihrer Anfrage fortzufahren\",\n      cookiesRequired: \"Cookies benötigt\",\n      enableCookies: \"Bitte aktivieren Sie Cookies in Ihren Browsereinstellungen, um auf Torus zuzugreifen\",\n      clickHere: \"Mehr Info\"\n    }\n  },\n  ja: {\n    embed: {\n      continue: \"継続する\",\n      actionRequired: \"認証が必要です\",\n      pendingAction: \"続行をクリックして、ポップアップでリクエストを続行します\",\n      cookiesRequired: \"必要なクッキー\",\n      enableCookies: \"Torusにアクセスするには、ブラウザの設定でCookieを有効にしてください。\",\n      clickHere: \"詳しくは\"\n    }\n  },\n  ko: {\n    embed: {\n      continue: \"계속하다\",\n      actionRequired: \"승인 필요\",\n      pendingAction: \"팝업에서 요청을 진행하려면 계속을 클릭하십시오.\",\n      cookiesRequired: \"쿠키 필요\",\n      enableCookies: \"브라우저 환경 설정에서 쿠키를 활성화하여 Torus에 액세스하십시오.\",\n      clickHere: \"더 많은 정보\"\n    }\n  },\n  zh: {\n    embed: {\n      continue: \"继续\",\n      actionRequired: \"需要授权\",\n      pendingAction: \"单击继续以在弹出窗口中继续您的请求\",\n      cookiesRequired: \"必填Cookie\",\n      enableCookies: \"请在您的浏览器首选项中启用cookie以访问Torus。\",\n      clickHere: \"更多信息\"\n    }\n  }\n};\nvar configuration = {\n  supportedVerifierList: [LOGIN_PROVIDER.GOOGLE, LOGIN_PROVIDER.REDDIT, LOGIN_PROVIDER.DISCORD],\n  api: \"https://api.tor.us\",\n  translations,\n  prodTorusUrl: \"\",\n  localStorageKey: \"torus-\".concat(window.location.hostname)\n};\n\nvar log = loglevel.getLogger(\"solana-embed\");\n\n/**\n * json-rpc-engine middleware that logs RPC errors and and validates req.method.\n *\n * @param log - The logging API to use.\n * @returns  json-rpc-engine middleware function\n */\n\nfunction createErrorMiddleware() {\n  return (req, res, next) => {\n    // json-rpc-engine will terminate the request when it notices this error\n    if (typeof req.method !== \"string\" || !req.method) {\n      res.error = ethErrors.rpc.invalidRequest({\n        message: \"The request 'method' must be a non-empty string.\",\n        data: req\n      });\n    }\n\n    next(done => {\n      const {\n        error\n      } = res;\n\n      if (!error) {\n        return done();\n      }\n\n      log.error(\"Torus - RPC Error: \".concat(error.message), error);\n      return done();\n    });\n  };\n}\n/**\n * Logs a stream disconnection error. Emits an 'error' if given an\n * EventEmitter that has listeners for the 'error' event.\n *\n * @param log - The logging API to use.\n * @param remoteLabel - The label of the disconnected stream.\n * @param error - The associated error to log.\n * @param emitter - The logging API to use.\n */\n\nfunction logStreamDisconnectWarning(remoteLabel, error, emitter) {\n  let warningMsg = \"Torus: Lost connection to \\\"\".concat(remoteLabel, \"\\\".\");\n\n  if (error !== null && error !== void 0 && error.stack) {\n    warningMsg += \"\\n\".concat(error.stack);\n  }\n\n  log.warn(warningMsg);\n\n  if (emitter && emitter.listenerCount(\"error\") > 0) {\n    emitter.emit(\"error\", warningMsg);\n  }\n}\nconst getWindowId = () => Math.random().toString(36).slice(2);\nconst getTorusUrl = async buildEnv => {\n  let torusUrl;\n  let logLevel; // const versionUsed = version;\n  // log.info(\"solana embed version used: \", versionUsed);\n\n  switch (buildEnv) {\n    case \"testing\":\n      torusUrl = \"https://solana-testing.tor.us\";\n      logLevel = \"debug\";\n      break;\n\n    case \"development\":\n      torusUrl = \"http://localhost:8080\";\n      logLevel = \"debug\";\n      break;\n\n    default:\n      torusUrl = \"https://solana.tor.us\";\n      logLevel = \"error\";\n      break;\n  }\n\n  return {\n    torusUrl,\n    logLevel\n  };\n};\nconst getUserLanguage = () => {\n  let userLanguage = window.navigator.language || \"en-US\";\n  const userLanguages = userLanguage.split(\"-\");\n  userLanguage = Object.prototype.hasOwnProperty.call(configuration.translations, userLanguages[0]) ? userLanguages[0] : \"en\";\n  return userLanguage;\n};\nconst FEATURES_PROVIDER_CHANGE_WINDOW = {\n  height: 660,\n  width: 375\n};\nconst FEATURES_DEFAULT_WALLET_WINDOW = {\n  height: 740,\n  width: 1315\n};\nconst FEATURES_DEFAULT_POPUP_WINDOW = {\n  height: 700,\n  width: 1200\n};\nconst FEATURES_CONFIRM_WINDOW = {\n  height: 600,\n  width: 400\n};\nfunction storageAvailable(type) {\n  let storage;\n\n  try {\n    storage = window[type];\n    const x = \"__storage_test__\";\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return true;\n  } catch (e) {\n    return e && ( // everything except Firefox\n    e.code === 22 || // Firefox\n    e.code === 1014 || // test name field too, because code might not be present\n    // everything except Firefox\n    e.name === \"QuotaExceededError\" || // Firefox\n    e.name === \"NS_ERROR_DOM_QUOTA_REACHED\") && // acknowledge QuotaExceededError only if there's something already stored\n    storage && storage.length !== 0;\n  }\n}\n/**\n * popup handler utils\n */\n\nfunction getPopupFeatures(_ref) {\n  let {\n    width: w,\n    height: h\n  } = _ref;\n  // Fixes dual-screen position                             Most browsers      Firefox\n  const dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : window.screenX;\n  const dualScreenTop = window.screenTop !== undefined ? window.screenTop : window.screenY;\n  const width = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : window.screen.width;\n  const height = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : window.screen.height;\n  const systemZoom = 1; // No reliable estimate\n\n  const left = Math.abs((width - w) / 2 / systemZoom + dualScreenLeft);\n  const top = Math.abs((height - h) / 2 / systemZoom + dualScreenTop);\n  const features = \"titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=\".concat(h / systemZoom, \",width=\").concat(w / systemZoom, \",top=\").concat(top, \",left=\").concat(left);\n  return features;\n}\nconst getNetworkConfig = label => {\n  switch (label) {\n    case \"mainnet-beta\":\n      return {\n        blockExplorerUrl: \"https://explorer.solana.com\",\n        chainId: \"0x1\",\n        displayName: \"Solana Mainnet\",\n        logo: \"solana.svg\",\n        rpcTarget: \"https://api.mainnet-beta.solana.com\",\n        ticker: \"SOL\",\n        tickerName: \"Solana Token\"\n      };\n\n    case \"testnet\":\n      return {\n        blockExplorerUrl: \"https://explorer.solana.com\",\n        chainId: \"0x2\",\n        displayName: \"Solana Testnet\",\n        logo: \"solana.svg\",\n        rpcTarget: \"https://api.testnet.solana.com\",\n        ticker: \"SOL\",\n        tickerName: \"Solana Token\"\n      };\n\n    case \"devnet\":\n      return {\n        blockExplorerUrl: \"https://explorer.solana.com\",\n        chainId: \"0x3\",\n        displayName: \"Solana Devnet\",\n        logo: \"solana.svg\",\n        rpcTarget: \"https://api.devnet.solana.com\",\n        ticker: \"SOL\",\n        tickerName: \"Solana Token\"\n      };\n\n    default:\n      return undefined;\n  }\n};\n\nclass BaseProvider extends SafeEventEmitter {\n  /**\n   * Indicating that this provider is a Torus provider.\n   */\n  constructor(connectionStream, _ref) {\n    let {\n      maxEventListeners = 100,\n      jsonRpcStreamName = \"provider\"\n    } = _ref;\n    super();\n\n    _defineProperty(this, \"isTorus\", void 0);\n\n    _defineProperty(this, \"_rpcEngine\", void 0);\n\n    _defineProperty(this, \"jsonRpcConnectionEvents\", void 0);\n\n    _defineProperty(this, \"_state\", void 0);\n\n    if (!isDuplexStream(connectionStream)) {\n      throw new Error(messages.errors.invalidDuplexStream());\n    }\n\n    this.isTorus = true;\n    this.setMaxListeners(maxEventListeners);\n    this._handleConnect = this._handleConnect.bind(this);\n    this._handleDisconnect = this._handleDisconnect.bind(this);\n    this._handleStreamDisconnect = this._handleStreamDisconnect.bind(this);\n    this._rpcRequest = this._rpcRequest.bind(this);\n    this._initializeState = this._initializeState.bind(this);\n    this.request = this.request.bind(this);\n    this.sendAsync = this.sendAsync.bind(this); // this.enable = this.enable.bind(this);\n    // setup connectionStream multiplexing\n\n    const mux = new ObjectMultiplex();\n    pump(connectionStream, mux, connectionStream, this._handleStreamDisconnect.bind(this, \"Torus\")); // ignore phishing warning message (handled elsewhere)\n\n    mux.ignoreStream(\"phishing\"); // setup own event listeners\n    // connect to async provider\n\n    const jsonRpcConnection = createStreamMiddleware();\n    pump(jsonRpcConnection.stream, mux.createStream(jsonRpcStreamName), jsonRpcConnection.stream, this._handleStreamDisconnect.bind(this, \"Torus RpcProvider\")); // handle RPC requests via dapp-side rpc engine\n\n    const rpcEngine = new JRPCEngine();\n    rpcEngine.push(createIdRemapMiddleware());\n    rpcEngine.push(createErrorMiddleware());\n    rpcEngine.push(createLoggerMiddleware({\n      origin: location.origin\n    }));\n    rpcEngine.push(jsonRpcConnection.middleware);\n    this._rpcEngine = rpcEngine;\n    this.jsonRpcConnectionEvents = jsonRpcConnection.events;\n  }\n  /**\n   * Submits an RPC request for the given method, with the given params.\n   * Resolves with the result of the method call, or rejects on error.\n   */\n\n\n  async request(args) {\n    if (!args || typeof args !== \"object\" || Array.isArray(args)) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestArgs(),\n        data: args\n      });\n    }\n\n    const {\n      method,\n      params\n    } = args;\n\n    if (typeof method !== \"string\" || method.length === 0) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestMethod(),\n        data: args\n      });\n    }\n\n    if (params !== undefined && !Array.isArray(params) && (typeof params !== \"object\" || params === null)) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestParams(),\n        data: args\n      });\n    }\n\n    return new Promise((resolve, reject) => {\n      this._rpcRequest({\n        method,\n        params\n      }, getRpcPromiseCallback(resolve, reject));\n    });\n  }\n  /**\n   * Submits an RPC request per the given JSON-RPC request object.\n   */\n\n\n  send(payload, callback) {\n    this._rpcRequest(payload, callback);\n  }\n  /**\n   * Submits an RPC request per the given JSON-RPC request object.\n   */\n\n\n  sendAsync(payload) {\n    return new Promise((resolve, reject) => {\n      this._rpcRequest(payload, getRpcPromiseCallback(resolve, reject));\n    });\n  }\n  /**\n   * Called when connection is lost to critical streams.\n   *\n   * emits TorusInpageProvider#disconnect\n   */\n\n\n  _handleStreamDisconnect(streamName, error) {\n    logStreamDisconnectWarning(streamName, error, this);\n\n    this._handleDisconnect(false, error ? error.message : undefined);\n  }\n\n}\n\nconst handleEvent = function (handle, eventName, handler) {\n  for (var _len = arguments.length, handlerArgs = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n    handlerArgs[_key - 3] = arguments[_key];\n  }\n\n  const handlerWrapper = () => {\n    handler(...handlerArgs);\n    handle.removeEventListener(eventName, handlerWrapper);\n  };\n\n  handle.addEventListener(eventName, handlerWrapper);\n};\nasync function documentReady() {\n  return new Promise(resolve => {\n    if (document.readyState !== \"loading\") {\n      resolve();\n    } else {\n      handleEvent(document, \"DOMContentLoaded\", resolve);\n    }\n  });\n}\nconst htmlToElement = html => {\n  const template = window.document.createElement(\"template\");\n  const trimmedHtml = html.trim(); // Never return a text node of whitespace as the result\n\n  template.innerHTML = trimmedHtml;\n  return template.content.firstChild;\n};\n\nclass PopupHandler extends SafeEventEmitter {\n  constructor(_ref) {\n    let {\n      url,\n      target,\n      features\n    } = _ref;\n    super();\n\n    _defineProperty(this, \"url\", void 0);\n\n    _defineProperty(this, \"target\", void 0);\n\n    _defineProperty(this, \"features\", void 0);\n\n    _defineProperty(this, \"window\", void 0);\n\n    _defineProperty(this, \"windowTimer\", void 0);\n\n    _defineProperty(this, \"iClosedWindow\", void 0);\n\n    this.url = url;\n    this.target = target || \"_blank\";\n    this.features = features || getPopupFeatures(FEATURES_DEFAULT_POPUP_WINDOW);\n    this.window = undefined;\n    this.windowTimer = undefined;\n    this.iClosedWindow = false;\n\n    this._setupTimer();\n  }\n\n  _setupTimer() {\n    this.windowTimer = Number(setInterval(() => {\n      if (this.window && this.window.closed) {\n        clearInterval(this.windowTimer);\n\n        if (!this.iClosedWindow) {\n          this.emit(\"close\");\n        }\n\n        this.iClosedWindow = false;\n        this.window = undefined;\n      }\n\n      if (this.window === undefined) clearInterval(this.windowTimer);\n    }, 500));\n  }\n\n  open() {\n    var _this$window;\n\n    this.window = window.open(this.url.href, this.target, this.features);\n    if ((_this$window = this.window) !== null && _this$window !== void 0 && _this$window.focus) this.window.focus();\n    return Promise.resolve();\n  }\n\n  close() {\n    this.iClosedWindow = true;\n    if (this.window) this.window.close();\n  }\n\n  redirect(locationReplaceOnRedirect) {\n    if (locationReplaceOnRedirect) {\n      window.location.replace(this.url.href);\n    } else {\n      window.location.href = this.url.href;\n    }\n  }\n\n}\n\nfunction ownKeys$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nclass TorusCommunicationProvider extends BaseProvider {\n  constructor(connectionStream, _ref) {\n    let {\n      maxEventListeners = 100,\n      jsonRpcStreamName = \"provider\"\n    } = _ref;\n    super(connectionStream, {\n      maxEventListeners,\n      jsonRpcStreamName\n    }); // private state\n\n    _defineProperty(this, \"embedTranslations\", void 0);\n\n    _defineProperty(this, \"torusUrl\", void 0);\n\n    _defineProperty(this, \"dappStorageKey\", void 0);\n\n    _defineProperty(this, \"windowRefs\", void 0);\n\n    _defineProperty(this, \"tryWindowHandle\", void 0);\n\n    _defineProperty(this, \"torusAlertContainer\", void 0);\n\n    _defineProperty(this, \"torusIframe\", void 0);\n\n    this._state = _objectSpread$2({}, TorusCommunicationProvider._defaultState); // public state\n\n    this.torusUrl = \"\";\n    this.dappStorageKey = \"\";\n    const languageTranslations = configuration.translations[getUserLanguage()];\n    this.embedTranslations = languageTranslations.embed;\n    this.windowRefs = {}; // setup own event listeners\n    // EIP-1193 connect\n\n    this.on(\"connect\", () => {\n      this._state.isConnected = true;\n    });\n\n    const notificationHandler = payload => {\n      const {\n        method,\n        params\n      } = payload;\n\n      if (method === COMMUNICATION_NOTIFICATIONS.IFRAME_STATUS) {\n        const {\n          isFullScreen,\n          rid\n        } = params;\n\n        this._displayIframe({\n          isFull: isFullScreen,\n          rid: rid\n        });\n      } else if (method === COMMUNICATION_NOTIFICATIONS.CREATE_WINDOW) {\n        const {\n          windowId,\n          url\n        } = params;\n\n        this._createPopupBlockAlert(windowId, url);\n      } else if (method === COMMUNICATION_NOTIFICATIONS.CLOSE_WINDOW) {\n        this._handleCloseWindow(params);\n      } else if (method === COMMUNICATION_NOTIFICATIONS.USER_LOGGED_IN) {\n        const {\n          currentLoginProvider\n        } = params;\n        this._state.isLoggedIn = true;\n        this._state.currentLoginProvider = currentLoginProvider;\n      } else if (method === COMMUNICATION_NOTIFICATIONS.USER_LOGGED_OUT) {\n        this._state.isLoggedIn = false;\n        this._state.currentLoginProvider = null;\n\n        this._displayIframe();\n      }\n    };\n\n    this.jsonRpcConnectionEvents.on(\"notification\", notificationHandler);\n  }\n\n  get isLoggedIn() {\n    return this._state.isLoggedIn;\n  }\n\n  get isIFrameFullScreen() {\n    return this._state.isIFrameFullScreen;\n  }\n  /**\n   * Returns whether the inPage provider is connected to Torus.\n   */\n\n\n  isConnected() {\n    return this._state.isConnected;\n  }\n\n  async _initializeState(params) {\n    try {\n      const {\n        torusUrl,\n        dappStorageKey,\n        torusAlertContainer,\n        torusIframe\n      } = params;\n      this.torusUrl = torusUrl;\n      this.dappStorageKey = dappStorageKey;\n      this.torusAlertContainer = torusAlertContainer;\n      this.torusIframe = torusIframe;\n      this.torusIframe.addEventListener(\"load\", () => {\n        // only do this if iframe is not full screen\n        if (!this._state.isIFrameFullScreen) this._displayIframe();\n      });\n      const {\n        currentLoginProvider,\n        isLoggedIn\n      } = await this.request({\n        method: COMMUNICATION_JRPC_METHODS.GET_PROVIDER_STATE,\n        params: []\n      }); // indicate that we've connected, for EIP-1193 compliance\n\n      this._handleConnect(currentLoginProvider, isLoggedIn);\n    } catch (error) {\n      log.error(\"Torus: Failed to get initial state. Please report this bug.\", error);\n    } finally {\n      log.info(\"initialized communication state\");\n      this._state.initialized = true;\n      this.emit(\"_initialized\");\n    }\n  }\n\n  _handleWindow(windowId) {\n    let {\n      url,\n      target,\n      features\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const finalUrl = new URL(url || \"\".concat(this.torusUrl, \"/redirect?windowId=\").concat(windowId));\n\n    if (this.dappStorageKey) {\n      // If multiple instances, it returns the first one\n      if (finalUrl.hash) finalUrl.hash += \"&dappStorageKey=\".concat(this.dappStorageKey);else finalUrl.hash = \"#dappStorageKey=\".concat(this.dappStorageKey);\n    }\n\n    const handledWindow = new PopupHandler({\n      url: finalUrl,\n      target,\n      features\n    });\n    handledWindow.open();\n\n    if (!handledWindow.window) {\n      this._createPopupBlockAlert(windowId, finalUrl.href);\n\n      return;\n    } // Add to collection only if window is opened\n\n\n    this.windowRefs[windowId] = handledWindow; // We tell the iframe that the window has been successfully opened\n\n    this.request({\n      method: COMMUNICATION_JRPC_METHODS.OPENED_WINDOW,\n      params: {\n        windowId\n      }\n    });\n    handledWindow.once(\"close\", () => {\n      // user closed the window\n      delete this.windowRefs[windowId];\n      this.request({\n        method: COMMUNICATION_JRPC_METHODS.CLOSED_WINDOW,\n        params: {\n          windowId\n        }\n      });\n    });\n  }\n\n  _displayIframe() {\n    let {\n      isFull = false,\n      rid = \"\"\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const style = {}; // set phase\n\n    if (!isFull) {\n      style.display = this._state.torusWidgetVisibility ? \"block\" : \"none\";\n      style.height = \"70px\";\n      style.width = \"70px\";\n\n      switch (this._state.buttonPosition) {\n        case BUTTON_POSITION.TOP_LEFT:\n          style.top = \"0px\";\n          style.left = \"0px\";\n          style.right = \"auto\";\n          style.bottom = \"auto\";\n          break;\n\n        case BUTTON_POSITION.TOP_RIGHT:\n          style.top = \"0px\";\n          style.right = \"0px\";\n          style.left = \"auto\";\n          style.bottom = \"auto\";\n          break;\n\n        case BUTTON_POSITION.BOTTOM_RIGHT:\n          style.bottom = \"0px\";\n          style.right = \"0px\";\n          style.top = \"auto\";\n          style.left = \"auto\";\n          break;\n\n        case BUTTON_POSITION.BOTTOM_LEFT:\n        default:\n          style.bottom = \"0px\";\n          style.left = \"0px\";\n          style.top = \"auto\";\n          style.right = \"auto\";\n          break;\n      }\n    } else {\n      style.display = \"block\";\n      style.width = \"100%\";\n      style.height = \"100%\";\n      style.top = \"0px\";\n      style.right = \"0px\";\n      style.left = \"0px\";\n      style.bottom = \"0px\";\n    }\n\n    Object.assign(this.torusIframe.style, style);\n    this._state.isIFrameFullScreen = isFull;\n    this.request({\n      method: COMMUNICATION_JRPC_METHODS.IFRAME_STATUS,\n      params: {\n        isIFrameFullScreen: isFull,\n        rid\n      }\n    });\n  }\n\n  hideTorusButton() {\n    this._state.torusWidgetVisibility = false;\n\n    this._displayIframe();\n  }\n\n  showTorusButton() {\n    this._state.torusWidgetVisibility = true;\n\n    this._displayIframe();\n  }\n  /**\n   * Internal RPC method. Forwards requests to background via the RPC engine.\n   * Also remap ids inbound and outbound\n   */\n\n\n  _rpcRequest(payload, callback) {\n    const cb = callback;\n    const _payload = payload;\n\n    if (!Array.isArray(_payload)) {\n      if (!_payload.jsonrpc) {\n        _payload.jsonrpc = \"2.0\";\n      }\n    }\n\n    this.tryWindowHandle(_payload, cb);\n  }\n  /**\n   * When the provider becomes connected, updates internal state and emits\n   * required events. Idempotent.\n   *\n   * @param currentLoginProvider - The login Provider\n   * emits TorusInpageProvider#connect\n   */\n\n\n  _handleConnect(currentLoginProvider, isLoggedIn) {\n    if (!this._state.isConnected) {\n      this._state.isConnected = true;\n      this.emit(\"connect\", {\n        currentLoginProvider,\n        isLoggedIn\n      });\n      log.debug(messages.info.connected(currentLoginProvider));\n    }\n  }\n  /**\n   * When the provider becomes disconnected, updates internal state and emits\n   * required events. Idempotent with respect to the isRecoverable parameter.\n   *\n   * Error codes per the CloseEvent status codes as required by EIP-1193:\n   * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n   *\n   * @param isRecoverable - Whether the disconnection is recoverable.\n   * @param errorMessage - A custom error message.\n   * emits TorusInpageProvider#disconnect\n   */\n\n\n  _handleDisconnect(isRecoverable, errorMessage) {\n    if (this._state.isConnected || !this._state.isPermanentlyDisconnected && !isRecoverable) {\n      this._state.isConnected = false;\n      let error;\n\n      if (isRecoverable) {\n        error = new EthereumRpcError(1013, // Try again later\n        errorMessage || messages.errors.disconnected());\n        log.debug(error);\n      } else {\n        error = new EthereumRpcError(1011, // Internal error\n        errorMessage || messages.errors.permanentlyDisconnected());\n        log.error(error);\n        this._state.currentLoginProvider = null;\n        this._state.isLoggedIn = false;\n        this._state.torusWidgetVisibility = false;\n        this._state.isIFrameFullScreen = false;\n        this._state.isPermanentlyDisconnected = true;\n      }\n\n      this.emit(\"disconnect\", error);\n    }\n  } // Called if the iframe wants to close the window cause it is done processing the request\n\n\n  _handleCloseWindow(params) {\n    const {\n      windowId\n    } = params;\n\n    if (this.windowRefs[windowId]) {\n      this.windowRefs[windowId].close();\n      delete this.windowRefs[windowId];\n    }\n  }\n\n  async _createPopupBlockAlert(windowId, url) {\n    const logoUrl = this.getLogoUrl();\n    const torusAlert = htmlToElement('<div id=\"torusAlert\" class=\"torus-alert--v2\">' + \"<div id=\\\"torusAlert__logo\\\"><img src=\\\"\".concat(logoUrl, \"\\\" /></div>\") + \"<div>\" + \"<h1 id=\\\"torusAlert__title\\\">\".concat(this.embedTranslations.actionRequired, \"</h1>\") + \"<p id=\\\"torusAlert__desc\\\">\".concat(this.embedTranslations.pendingAction, \"</p>\") + \"</div>\" + \"</div>\");\n    const successAlert = htmlToElement(\"<div><a id=\\\"torusAlert__btn\\\">\".concat(this.embedTranslations.continue, \"</a></div>\"));\n    const btnContainer = htmlToElement('<div id=\"torusAlert__btn-container\"></div>');\n    btnContainer.appendChild(successAlert);\n    torusAlert.appendChild(btnContainer);\n\n    const bindOnLoad = () => {\n      successAlert.addEventListener(\"click\", () => {\n        this._handleWindow(windowId, {\n          url,\n          target: \"_blank\",\n          features: getPopupFeatures(FEATURES_CONFIRM_WINDOW)\n        });\n\n        torusAlert.remove();\n        if (this.torusAlertContainer.children.length === 0) this.torusAlertContainer.style.display = \"none\";\n      });\n    };\n\n    const attachOnLoad = () => {\n      this.torusAlertContainer.appendChild(torusAlert);\n    };\n\n    await documentReady();\n    attachOnLoad();\n    bindOnLoad();\n    this.torusAlertContainer.style.display = \"block\";\n  }\n\n  getLogoUrl() {\n    const logoUrl = \"\".concat(this.torusUrl, \"/images/torus_icon-blue.svg\");\n    return logoUrl;\n  }\n\n}\n\n_defineProperty(TorusCommunicationProvider, \"_defaultState\", {\n  buttonPosition: \"bottom-left\",\n  currentLoginProvider: null,\n  isIFrameFullScreen: false,\n  hasEmittedConnection: false,\n  torusWidgetVisibility: false,\n  initialized: false,\n  isLoggedIn: false,\n  isPermanentlyDisconnected: false,\n  isConnected: false\n});\n\nfunction ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nclass TorusInPageProvider extends BaseProvider {\n  /**\n   * The chain ID of the currently connected Solana chain.\n   * See [chainId.network]{@link https://chainid.network} for more information.\n   */\n\n  /**\n   * The user's currently selected Solana address.\n   * If null, Torus is either locked or the user has not permitted any\n   * addresses to be viewed.\n   */\n  constructor(connectionStream, _ref) {\n    let {\n      maxEventListeners = 100,\n      jsonRpcStreamName = \"provider\"\n    } = _ref;\n    super(connectionStream, {\n      maxEventListeners,\n      jsonRpcStreamName\n    }); // private state\n\n    _defineProperty(this, \"chainId\", void 0);\n\n    _defineProperty(this, \"selectedAddress\", void 0);\n\n    _defineProperty(this, \"tryWindowHandle\", void 0);\n\n    this._state = _objectSpread$1({}, TorusInPageProvider._defaultState); // public state\n\n    this.selectedAddress = null;\n    this.chainId = null;\n    this._handleAccountsChanged = this._handleAccountsChanged.bind(this);\n    this._handleChainChanged = this._handleChainChanged.bind(this);\n    this._handleUnlockStateChanged = this._handleUnlockStateChanged.bind(this); // setup own event listeners\n    // EIP-1193 connect\n\n    this.on(\"connect\", () => {\n      this._state.isConnected = true;\n    });\n\n    const jsonRpcNotificationHandler = payload => {\n      const {\n        method,\n        params\n      } = payload;\n\n      if (method === PROVIDER_NOTIFICATIONS.ACCOUNTS_CHANGED) {\n        this._handleAccountsChanged(params);\n      } else if (method === PROVIDER_NOTIFICATIONS.UNLOCK_STATE_CHANGED) {\n        this._handleUnlockStateChanged(params);\n      } else if (method === PROVIDER_NOTIFICATIONS.CHAIN_CHANGED) {\n        this._handleChainChanged(params);\n      }\n    }; // json rpc notification listener\n\n\n    this.jsonRpcConnectionEvents.on(\"notification\", jsonRpcNotificationHandler);\n  }\n  /**\n   * Returns whether the inpage provider is connected to Torus.\n   */\n\n\n  isConnected() {\n    return this._state.isConnected;\n  } // Private Methods\n  //= ===================\n\n  /**\n   * Constructor helper.\n   * Populates initial state by calling 'wallet_getProviderState' and emits\n   * necessary events.\n   */\n\n\n  async _initializeState() {\n    try {\n      const {\n        accounts,\n        chainId,\n        isUnlocked\n      } = await this.request({\n        method: PROVIDER_JRPC_METHODS.GET_PROVIDER_STATE,\n        params: []\n      }); // indicate that we've connected, for EIP-1193 compliance\n\n      this.emit(\"connect\", {\n        chainId\n      });\n\n      this._handleChainChanged({\n        chainId\n      });\n\n      this._handleUnlockStateChanged({\n        accounts,\n        isUnlocked\n      });\n\n      this._handleAccountsChanged(accounts);\n    } catch (error) {\n      log.error(\"Torus: Failed to get initial state. Please report this bug.\", error);\n    } finally {\n      log.info(\"initialized provider state\");\n      this._state.initialized = true;\n      this.emit(\"_initialized\");\n    }\n  }\n  /**\n   * Internal RPC method. Forwards requests to background via the RPC engine.\n   * Also remap ids inbound and outbound\n   */\n\n\n  _rpcRequest(payload, callback) {\n    let isInternal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let cb = callback;\n    const _payload = payload;\n\n    if (!Array.isArray(_payload)) {\n      if (!_payload.jsonrpc) {\n        _payload.jsonrpc = \"2.0\";\n      }\n\n      if (_payload.method === \"solana_accounts\" || _payload.method === \"solana_requestAccounts\") {\n        // handle accounts changing\n        cb = (err, res) => {\n          this._handleAccountsChanged(res.result || [], _payload.method === \"solana_accounts\", isInternal);\n\n          callback(err, res);\n        };\n      } else if (_payload.method === \"wallet_getProviderState\") {\n        this._rpcEngine.handle(payload, cb);\n\n        return;\n      }\n    }\n\n    this.tryWindowHandle(_payload, cb);\n  }\n  /**\n   * When the provider becomes connected, updates internal state and emits\n   * required events. Idempotent.\n   *\n   * @param chainId - The ID of the newly connected chain.\n   * emits TorusInpageProvider#connect\n   */\n\n\n  _handleConnect(chainId) {\n    if (!this._state.isConnected) {\n      this._state.isConnected = true;\n      this.emit(\"connect\", {\n        chainId\n      });\n      log.debug(messages.info.connected(chainId));\n    }\n  }\n  /**\n   * When the provider becomes disconnected, updates internal state and emits\n   * required events. Idempotent with respect to the isRecoverable parameter.\n   *\n   * Error codes per the CloseEvent status codes as required by EIP-1193:\n   * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n   *\n   * @param isRecoverable - Whether the disconnection is recoverable.\n   * @param errorMessage - A custom error message.\n   * emits TorusInpageProvider#disconnect\n   */\n\n\n  _handleDisconnect(isRecoverable, errorMessage) {\n    if (this._state.isConnected || !this._state.isPermanentlyDisconnected && !isRecoverable) {\n      this._state.isConnected = false;\n      let error;\n\n      if (isRecoverable) {\n        error = new EthereumRpcError(1013, // Try again later\n        errorMessage || messages.errors.disconnected());\n        log.debug(error);\n      } else {\n        error = new EthereumRpcError(1011, // Internal error\n        errorMessage || messages.errors.permanentlyDisconnected());\n        log.error(error);\n        this.chainId = null;\n        this._state.accounts = null;\n        this.selectedAddress = null;\n        this._state.isUnlocked = false;\n        this._state.isPermanentlyDisconnected = true;\n      }\n\n      this.emit(\"disconnect\", error);\n    }\n  }\n  /**\n   * Called when accounts may have changed.\n   */\n\n\n  _handleAccountsChanged(accounts) {\n    let isEthAccounts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let isInternal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    // defensive programming\n    let finalAccounts = accounts;\n\n    if (!Array.isArray(finalAccounts)) {\n      log.error(\"Torus: Received non-array accounts parameter. Please report this bug.\", finalAccounts);\n      finalAccounts = [];\n    }\n\n    for (const account of accounts) {\n      if (typeof account !== \"string\") {\n        log.error(\"Torus: Received non-string account. Please report this bug.\", accounts);\n        finalAccounts = [];\n        break;\n      }\n    } // emit accountsChanged if anything about the accounts array has changed\n\n\n    if (!dequal(this._state.accounts, finalAccounts)) {\n      // we should always have the correct accounts even before solana_accounts\n      // returns, except in cases where isInternal is true\n      if (isEthAccounts && Array.isArray(this._state.accounts) && this._state.accounts.length > 0 && !isInternal) {\n        log.error('Torus: \"solana_accounts\" unexpectedly updated accounts. Please report this bug.', finalAccounts);\n      }\n\n      this._state.accounts = finalAccounts;\n      this.emit(\"accountsChanged\", finalAccounts);\n    } // handle selectedAddress\n\n\n    if (this.selectedAddress !== finalAccounts[0]) {\n      this.selectedAddress = finalAccounts[0] || null;\n    }\n  }\n  /**\n   * Upon receipt of a new chainId and networkVersion, emits corresponding\n   * events and sets relevant public state.\n   * Does nothing if neither the chainId nor the networkVersion are different\n   * from existing values.\n   *\n   * emits TorusInpageProvider#chainChanged\n   * @param networkInfo - An object with network info.\n   */\n\n\n  _handleChainChanged() {\n    let {\n      chainId\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (!chainId) {\n      log.error(\"Torus: Received invalid network parameters. Please report this bug.\", {\n        chainId\n      });\n      return;\n    }\n\n    if (chainId === \"loading\") {\n      this._handleDisconnect(true);\n    } else {\n      this._handleConnect(chainId);\n\n      if (chainId !== this.chainId) {\n        this.chainId = chainId;\n\n        if (this._state.initialized) {\n          this.emit(\"chainChanged\", this.chainId);\n        }\n      }\n    }\n  }\n  /**\n   * Upon receipt of a new isUnlocked state, sets relevant public state.\n   * Calls the accounts changed handler with the received accounts, or an empty\n   * array.\n   *\n   * Does nothing if the received value is equal to the existing value.\n   * There are no lock/unlock events.\n   *\n   * @param opts - Options bag.\n   */\n\n\n  _handleUnlockStateChanged() {\n    let {\n      accounts,\n      isUnlocked\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (typeof isUnlocked !== \"boolean\") {\n      log.error(\"Torus: Received invalid isUnlocked parameter. Please report this bug.\", {\n        isUnlocked\n      });\n      return;\n    }\n\n    if (isUnlocked !== this._state.isUnlocked) {\n      this._state.isUnlocked = isUnlocked;\n\n      this._handleAccountsChanged(accounts || []);\n    }\n  }\n\n}\n\n_defineProperty(TorusInPageProvider, \"_defaultState\", {\n  accounts: null,\n  isConnected: false,\n  isUnlocked: false,\n  initialized: false,\n  isPermanentlyDisconnected: false,\n  hasEmittedConnection: false\n});\n\n/**\n * Returns whether the given image URL exists\n */\nfunction imgExists(url) {\n  return new Promise((resolve, reject) => {\n    try {\n      const img = document.createElement(\"img\");\n\n      img.onload = () => resolve(true);\n\n      img.onerror = () => resolve(false);\n\n      img.src = url;\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\n/**\n * Extracts a name for the site from the DOM\n */\n\n\nconst getSiteName = window => {\n  const {\n    document\n  } = window;\n  const siteName = document.querySelector('head > meta[property=\"og:site_name\"]');\n\n  if (siteName) {\n    return siteName.content;\n  }\n\n  const metaTitle = document.querySelector('head > meta[name=\"title\"]');\n\n  if (metaTitle) {\n    return metaTitle.content;\n  }\n\n  if (document.title && document.title.length > 0) {\n    return document.title;\n  }\n\n  return window.location.hostname;\n};\n/**\n * Extracts an icon for the site from the DOM\n */\n\n\nasync function getSiteIcon(window) {\n  try {\n    const {\n      document\n    } = window; // Use the site's favicon if it exists\n\n    let icon = document.querySelector('head > link[rel=\"shortcut icon\"]');\n\n    if (icon && (await imgExists(icon.href))) {\n      return icon.href;\n    } // Search through available icons in no particular order\n\n\n    icon = Array.from(document.querySelectorAll('head > link[rel=\"icon\"]')).find(_icon => Boolean(_icon.href));\n\n    if (icon && (await imgExists(icon.href))) {\n      return icon.href;\n    }\n\n    return \"\";\n  } catch (error) {\n    return \"\";\n  }\n}\n/**\n * Gets site metadata and returns it\n *\n */\n\n\nconst getSiteMetadata = async () => ({\n  name: getSiteName(window),\n  icon: await getSiteIcon(window)\n});\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nconst PROVIDER_UNSAFE_METHODS = [\"send_transaction\", \"sign_transaction\", \"sign_all_transactions\", \"sign_message\", \"connect\"];\nconst COMMUNICATION_UNSAFE_METHODS = [COMMUNICATION_JRPC_METHODS.SET_PROVIDER];\nconst isLocalStorageAvailable = storageAvailable(\"localStorage\"); // preload for iframe doesn't work https://bugs.chromium.org/p/chromium/issues/detail?id=593267\n\n(async function preLoadIframe() {\n  try {\n    if (typeof document === \"undefined\") return;\n    const torusIframeHtml = document.createElement(\"link\");\n    const {\n      torusUrl\n    } = await getTorusUrl(\"production\");\n    torusIframeHtml.href = \"\".concat(torusUrl, \"/frame\");\n    torusIframeHtml.crossOrigin = \"anonymous\";\n    torusIframeHtml.type = \"text/html\";\n    torusIframeHtml.rel = \"prefetch\";\n\n    if (torusIframeHtml.relList && torusIframeHtml.relList.supports) {\n      if (torusIframeHtml.relList.supports(\"prefetch\")) {\n        document.head.appendChild(torusIframeHtml);\n      }\n    }\n  } catch (error) {\n    log.warn(error);\n  }\n})();\n\nclass Torus {\n  constructor() {\n    let {\n      modalZIndex = 99999\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _defineProperty(this, \"isInitialized\", void 0);\n\n    _defineProperty(this, \"torusAlert\", void 0);\n\n    _defineProperty(this, \"modalZIndex\", void 0);\n\n    _defineProperty(this, \"alertZIndex\", void 0);\n\n    _defineProperty(this, \"requestedLoginProvider\", void 0);\n\n    _defineProperty(this, \"provider\", void 0);\n\n    _defineProperty(this, \"communicationProvider\", void 0);\n\n    _defineProperty(this, \"dappStorageKey\", void 0);\n\n    _defineProperty(this, \"torusAlertContainer\", void 0);\n\n    _defineProperty(this, \"torusUrl\", void 0);\n\n    _defineProperty(this, \"torusIframe\", void 0);\n\n    _defineProperty(this, \"styleLink\", void 0);\n\n    this.torusUrl = \"\";\n    this.isInitialized = false; // init done\n\n    this.requestedLoginProvider = null;\n    this.modalZIndex = modalZIndex;\n    this.alertZIndex = modalZIndex + 1000;\n    this.dappStorageKey = \"\";\n  }\n\n  get isLoggedIn() {\n    if (!this.communicationProvider) return false;\n    return this.communicationProvider.isLoggedIn;\n  }\n\n  async init() {\n    let {\n      buildEnv = TORUS_BUILD_ENV.PRODUCTION,\n      enableLogging = false,\n      network,\n      showTorusButton = false,\n      useLocalStorage = false,\n      buttonPosition = BUTTON_POSITION.BOTTOM_LEFT,\n      apiKey = \"torus-default\",\n      extraParams = {}\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (this.isInitialized) throw new Error(\"Already initialized\");\n    setAPIKey(apiKey);\n    const {\n      torusUrl,\n      logLevel\n    } = await getTorusUrl(buildEnv);\n    log.info(torusUrl, \"url loaded\");\n    this.torusUrl = torusUrl;\n    log.setDefaultLevel(logLevel);\n    if (enableLogging) log.enableAll();else log.disableAll();\n    const dappStorageKey = this.handleDappStorageKey(useLocalStorage);\n    const torusIframeUrl = new URL(torusUrl);\n    if (torusIframeUrl.pathname.endsWith(\"/\")) torusIframeUrl.pathname += \"frame\";else torusIframeUrl.pathname += \"/frame\";\n    const hashParams = new URLSearchParams();\n    if (dappStorageKey) hashParams.append(\"dappStorageKey\", dappStorageKey);\n    hashParams.append(\"origin\", window.location.origin);\n    torusIframeUrl.hash = hashParams.toString(); // Iframe code\n\n    this.torusIframe = htmlToElement(\"<iframe\\n        id=\\\"torusIframe\\\"\\n        class=\\\"torusIframe\\\"\\n        src=\\\"\".concat(torusIframeUrl.href, \"\\\"\\n        style=\\\"display: none; position: fixed; top: 0; right: 0; width: 100%;\\n        height: 100%; border: none; border-radius: 0; z-index: \").concat(this.modalZIndex.toString(), \"\\\"\\n      ></iframe>\"));\n    this.torusAlertContainer = htmlToElement(\"<div id=\\\"torusAlertContainer\\\" style=\\\"display:none; z-index: \".concat(this.alertZIndex.toString(), \"\\\"></div>\"));\n    this.styleLink = htmlToElement(\"<link href=\\\"\".concat(torusUrl, \"/css/widget.css\\\" rel=\\\"stylesheet\\\" type=\\\"text/css\\\">\"));\n\n    const handleSetup = async () => {\n      return new Promise((resolve, reject) => {\n        try {\n          window.document.head.appendChild(this.styleLink);\n          window.document.body.appendChild(this.torusIframe);\n          window.document.body.appendChild(this.torusAlertContainer);\n          this.torusIframe.addEventListener(\"load\", async () => {\n            const dappMetadata = await getSiteMetadata(); // send init params here\n\n            this.torusIframe.contentWindow.postMessage({\n              buttonPosition,\n              apiKey,\n              network: typeof network === \"string\" ? getNetworkConfig(network) : network,\n              dappMetadata,\n              extraParams\n            }, torusIframeUrl.origin);\n            await this._setupWeb3({\n              torusUrl\n            });\n            if (showTorusButton) this.showTorusButton();else this.hideTorusButton();\n            this.isInitialized = true;\n            window.torus = this;\n            resolve();\n          });\n        } catch (error) {\n          reject(error);\n        }\n      });\n    };\n\n    await documentReady();\n    await handleSetup();\n  }\n\n  async login() {\n    let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!this.isInitialized) throw new Error(\"Call init() first\");\n\n    try {\n      this.requestedLoginProvider = params.loginProvider || null;\n\n      if (!this.requestedLoginProvider) {\n        this.communicationProvider._displayIframe({\n          isFull: true\n        });\n      } // If user is already logged in, we assume they have given access to the website\n\n\n      const res = await new Promise((resolve, reject) => {\n        // We use this method because we want to update inPage provider state with account info\n        this.provider._rpcRequest({\n          method: \"solana_requestAccounts\",\n          params: [this.requestedLoginProvider, params.login_hint]\n        }, getRpcPromiseCallback(resolve, reject));\n      });\n\n      if (Array.isArray(res) && res.length > 0) {\n        return res;\n      } // This would never happen, but just in case\n\n\n      throw new Error(\"Login failed\");\n    } catch (error) {\n      log.error(\"login failed\", error);\n      throw error;\n    } finally {\n      if (this.communicationProvider.isIFrameFullScreen) this.communicationProvider._displayIframe();\n    }\n  }\n\n  async logout() {\n    if (!this.communicationProvider.isLoggedIn) throw new Error(\"Not logged in\");\n    await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.LOGOUT,\n      params: []\n    });\n    this.requestedLoginProvider = null;\n  }\n\n  async cleanUp() {\n    if (this.communicationProvider.isLoggedIn) {\n      await this.logout();\n    }\n\n    this.clearInit();\n  }\n\n  clearInit() {\n    function isElement(element) {\n      return element instanceof Element || element instanceof Document;\n    }\n\n    if (isElement(this.styleLink) && window.document.body.contains(this.styleLink)) {\n      this.styleLink.remove();\n      this.styleLink = undefined;\n    }\n\n    if (isElement(this.torusIframe) && window.document.body.contains(this.torusIframe)) {\n      this.torusIframe.remove();\n      this.torusIframe = undefined;\n    }\n\n    if (isElement(this.torusAlertContainer) && window.document.body.contains(this.torusAlertContainer)) {\n      this.torusAlert = undefined;\n      this.torusAlertContainer.remove();\n      this.torusAlertContainer = undefined;\n    }\n\n    this.isInitialized = false;\n  }\n\n  hideTorusButton() {\n    this.communicationProvider.hideTorusButton();\n  }\n\n  showTorusButton() {\n    this.communicationProvider.showTorusButton();\n  }\n\n  async setProvider(params) {\n    await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.SET_PROVIDER,\n      params: _objectSpread({}, params)\n    });\n  }\n\n  async showWallet(path) {\n    let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const instanceId = await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.WALLET_INSTANCE_ID,\n      params: []\n    });\n    const finalPath = path ? \"/\".concat(path) : \"\";\n    const finalUrl = new URL(\"\".concat(this.torusUrl, \"/wallet\").concat(finalPath)); // Using URL constructor to prevent js injection and allow parameter validation.!\n\n    finalUrl.searchParams.append(\"instanceId\", instanceId);\n    Object.keys(params).forEach(x => {\n      finalUrl.searchParams.append(x, params[x]);\n    });\n\n    if (this.dappStorageKey) {\n      finalUrl.hash = \"#dappStorageKey=\".concat(this.dappStorageKey);\n    } // No need to track this window state. Hence, no _handleWindow call.\n\n\n    const walletWindow = new PopupHandler({\n      url: finalUrl,\n      features: getPopupFeatures(FEATURES_DEFAULT_WALLET_WINDOW)\n    });\n    walletWindow.open();\n  }\n\n  async getUserInfo() {\n    const userInfoResponse = await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.USER_INFO,\n      params: []\n    });\n    return userInfoResponse;\n  }\n\n  async initiateTopup(provider, params) {\n    if (!this.isInitialized) throw new Error(\"Torus is not initialized\");\n    const windowId = getWindowId();\n\n    this.communicationProvider._handleWindow(windowId);\n\n    const topupResponse = await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.TOPUP,\n      params: {\n        provider,\n        params,\n        windowId\n      }\n    });\n    return topupResponse;\n  } // Solana specific API\n\n\n  async sendTransaction(transaction) {\n    const response = await this.provider.request({\n      method: \"send_transaction\",\n      // params: { message: transaction.serializeMessage().toString(\"hex\") },\n      params: {\n        message: transaction.serialize({\n          requireAllSignatures: false\n        }).toString(\"hex\")\n      }\n    });\n    return response;\n  }\n\n  async signTransaction(transaction) {\n    const response = await this.provider.request({\n      method: \"sign_transaction\",\n      // params: { message: transaction.serializeMessage().toString(\"hex\") },\n      params: {\n        message: transaction.serialize({\n          requireAllSignatures: false\n        }).toString(\"hex\")\n      }\n    });\n    const buf = Buffer.from(response, \"hex\");\n    const sendTx = Transaction.from(buf);\n    return sendTx;\n  }\n\n  async signAllTransactions(transactions) {\n    const encodedTransactions = transactions.map(x => x.serialize({\n      requireAllSignatures: false\n    }).toString(\"hex\"));\n    const response = await this.provider.request({\n      method: \"sign_all_transactions\",\n      params: {\n        message: encodedTransactions\n      }\n    });\n    const allSignedTransaction = response.map(msg => Transaction.from(Buffer.from(msg, \"hex\")));\n    return allSignedTransaction;\n  }\n\n  async signMessage(data) {\n    const response = await this.provider.request({\n      method: \"sign_message\",\n      params: {\n        data\n      }\n    });\n    return response;\n  }\n\n  async getGaslessPublicKey() {\n    const response = await this.provider.request({\n      method: \"get_gasless_public_key\",\n      params: []\n    });\n    return response;\n  } // async connect(): Promise<boolean> {\n  //   const response = (await this.provider.request({\n  //     method: \"connect\",\n  //     params: {},\n  //   })) as boolean;\n  //   return response;\n  // }\n\n\n  handleDappStorageKey(useLocalStorage) {\n    let dappStorageKey = \"\";\n\n    if (isLocalStorageAvailable && useLocalStorage) {\n      const storedKey = window.localStorage.getItem(configuration.localStorageKey);\n      if (storedKey) dappStorageKey = storedKey;else {\n        const generatedKey = \"torus-app-\".concat(getWindowId());\n        window.localStorage.setItem(configuration.localStorageKey, generatedKey);\n        dappStorageKey = generatedKey;\n      }\n    }\n\n    this.dappStorageKey = dappStorageKey;\n    return dappStorageKey;\n  }\n\n  async _setupWeb3(providerParams) {\n    log.info(\"setupWeb3 running\"); // setup background connection\n\n    const providerStream = new BasePostMessageStream({\n      name: \"embed_torus\",\n      target: \"iframe_torus\",\n      targetWindow: this.torusIframe.contentWindow\n    }); // We create another LocalMessageDuplexStream for communication between dapp <> iframe\n\n    const communicationStream = new BasePostMessageStream({\n      name: \"embed_communication\",\n      target: \"iframe_communication\",\n      targetWindow: this.torusIframe.contentWindow\n    }); // compose the inPage provider\n\n    const inPageProvider = new TorusInPageProvider(providerStream, {});\n    const communicationProvider = new TorusCommunicationProvider(communicationStream, {});\n\n    inPageProvider.tryWindowHandle = (payload, cb) => {\n      const _payload = payload;\n\n      if (!Array.isArray(_payload) && PROVIDER_UNSAFE_METHODS.includes(_payload.method)) {\n        if (!this.communicationProvider.isLoggedIn) throw new Error(\"User Not Logged In\");\n        const windowId = getWindowId();\n\n        communicationProvider._handleWindow(windowId, {\n          target: \"_blank\",\n          features: getPopupFeatures(FEATURES_CONFIRM_WINDOW)\n        }); // for inPageProvider methods sending windowId in request instead of params\n        // as params might be positional.\n\n\n        _payload.windowId = windowId;\n      }\n\n      inPageProvider._rpcEngine.handle(_payload, cb);\n    };\n\n    communicationProvider.tryWindowHandle = (payload, cb) => {\n      const _payload = payload;\n\n      if (!Array.isArray(_payload) && COMMUNICATION_UNSAFE_METHODS.includes(_payload.method)) {\n        const windowId = getWindowId();\n\n        communicationProvider._handleWindow(windowId, {\n          target: \"_blank\",\n          features: getPopupFeatures(FEATURES_PROVIDER_CHANGE_WINDOW) // todo: are these features generic for all\n\n        }); // for communication methods sending window id in jrpc req params\n\n\n        _payload.params.windowId = windowId;\n      }\n\n      communicationProvider._rpcEngine.handle(_payload, cb);\n    }; // detect solana_requestAccounts and pipe to enable for now\n\n\n    const detectAccountRequestPrototypeModifier = m => {\n      const originalMethod = inPageProvider[m]; // eslint-disable-next-line @typescript-eslint/no-this-alias\n\n      const self = this;\n\n      inPageProvider[m] = function providerFunc(request, cb) {\n        const {\n          method,\n          params = []\n        } = request;\n\n        if (method === \"solana_requestAccounts\") {\n          if (!cb) return self.login({\n            loginProvider: params[0]\n          });\n          self.login({\n            loginProvider: params[0]\n          }) // eslint-disable-next-line promise/no-callback-in-promise\n          .then(res => cb(null, res)) // eslint-disable-next-line promise/no-callback-in-promise\n          .catch(err => cb(err));\n        }\n\n        return originalMethod.apply(this, [request, cb]);\n      };\n    }; // Detects call to solana_requestAccounts in request & sendAsync and passes to login\n\n\n    detectAccountRequestPrototypeModifier(\"request\");\n    detectAccountRequestPrototypeModifier(\"sendAsync\");\n    detectAccountRequestPrototypeModifier(\"send\");\n    const proxiedInPageProvider = new Proxy(inPageProvider, {\n      // straight up lie that we deleted the property so that it doesn't\n      // throw an error in strict mode\n      deleteProperty: () => true\n    });\n    const proxiedCommunicationProvider = new Proxy(communicationProvider, {\n      // straight up lie that we deleted the property so that it doesn't\n      // throw an error in strict mode\n      deleteProperty: () => true\n    });\n    this.provider = proxiedInPageProvider;\n    this.communicationProvider = proxiedCommunicationProvider;\n    await Promise.all([inPageProvider._initializeState(), communicationProvider._initializeState(_objectSpread(_objectSpread({}, providerParams), {}, {\n      dappStorageKey: this.dappStorageKey,\n      torusAlertContainer: this.torusAlertContainer,\n      torusIframe: this.torusIframe\n    }))]);\n    log.debug(\"Torus - injected provider\");\n  }\n\n}\n\nexport { BUTTON_POSITION, LOGIN_PROVIDER, PAYMENT_PROVIDER, TORUS_BUILD_ENV, TorusInPageProvider, Torus as default };\n//# sourceMappingURL=solanaEmbed.esm.js.map\n"]},"metadata":{},"sourceType":"module"}