{"ast":null,"code":"import { useEffect, useRef, useState } from 'react';\nexport function useLocalStorage(key, defaultState) {\n  var state = useState(function () {\n    try {\n      var _value = localStorage.getItem(key);\n\n      if (_value) return JSON.parse(_value);\n    } catch (error) {\n      if (typeof window !== 'undefined') {\n        console.error(error);\n      }\n    }\n\n    return defaultState;\n  });\n  var value = state[0];\n  var isFirstRender = useRef(true);\n  useEffect(function () {\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n      return;\n    }\n\n    try {\n      if (value === null) {\n        localStorage.removeItem(key);\n      } else {\n        localStorage.setItem(key, JSON.stringify(value));\n      }\n    } catch (error) {\n      if (typeof window !== 'undefined') {\n        console.error(error);\n      }\n    }\n  }, [value]);\n  return state;\n}","map":{"version":3,"sources":["../../src/useLocalStorage.ts"],"names":[],"mappings":"AAAA,SAAgB,SAAhB,EAA2B,MAA3B,EAAmC,QAAnC,QAAmD,OAAnD;AAEA,OAAM,SAAU,eAAV,CAA6B,GAA7B,EAA0C,YAA1C,EAAyD;AAC3D,MAAM,KAAK,GAAG,QAAQ,CAAI,YAAK;AAC3B,QAAI;AACA,UAAM,MAAK,GAAG,YAAY,CAAC,OAAb,CAAqB,GAArB,CAAd;;AACA,UAAI,MAAJ,EAAW,OAAO,IAAI,CAAC,KAAL,CAAW,MAAX,CAAP;AACd,KAHD,CAGE,OAAO,KAAP,EAAc;AACZ,UAAI,OAAO,MAAP,KAAkB,WAAtB,EAAmC;AAC/B,QAAA,OAAO,CAAC,KAAR,CAAc,KAAd;AACH;AACJ;;AAED,WAAO,YAAP;AACH,GAXqB,CAAtB;AAYA,MAAM,KAAK,GAAG,KAAK,CAAC,CAAD,CAAnB;AAEA,MAAM,aAAa,GAAG,MAAM,CAAC,IAAD,CAA5B;AACA,EAAA,SAAS,CAAC,YAAK;AACX,QAAI,aAAa,CAAC,OAAlB,EAA2B;AACvB,MAAA,aAAa,CAAC,OAAd,GAAwB,KAAxB;AACA;AACH;;AACD,QAAI;AACA,UAAI,KAAK,KAAK,IAAd,EAAoB;AAChB,QAAA,YAAY,CAAC,UAAb,CAAwB,GAAxB;AACH,OAFD,MAEO;AACH,QAAA,YAAY,CAAC,OAAb,CAAqB,GAArB,EAA0B,IAAI,CAAC,SAAL,CAAe,KAAf,CAA1B;AACH;AACJ,KAND,CAME,OAAO,KAAP,EAAc;AACZ,UAAI,OAAO,MAAP,KAAkB,WAAtB,EAAmC;AAC/B,QAAA,OAAO,CAAC,KAAR,CAAc,KAAd;AACH;AACJ;AACJ,GAhBQ,EAgBN,CAAC,KAAD,CAhBM,CAAT;AAkBA,SAAO,KAAP;AACH","sourceRoot":"","sourcesContent":["import { useEffect, useRef, useState } from 'react';\nexport function useLocalStorage(key, defaultState) {\n    const state = useState(() => {\n        try {\n            const value = localStorage.getItem(key);\n            if (value)\n                return JSON.parse(value);\n        }\n        catch (error) {\n            if (typeof window !== 'undefined') {\n                console.error(error);\n            }\n        }\n        return defaultState;\n    });\n    const value = state[0];\n    const isFirstRender = useRef(true);\n    useEffect(() => {\n        if (isFirstRender.current) {\n            isFirstRender.current = false;\n            return;\n        }\n        try {\n            if (value === null) {\n                localStorage.removeItem(key);\n            }\n            else {\n                localStorage.setItem(key, JSON.stringify(value));\n            }\n        }\n        catch (error) {\n            if (typeof window !== 'undefined') {\n                console.error(error);\n            }\n        }\n    }, [value]);\n    return state;\n}\n//# sourceMappingURL=useLocalStorage.js.map"]},"metadata":{},"sourceType":"module"}