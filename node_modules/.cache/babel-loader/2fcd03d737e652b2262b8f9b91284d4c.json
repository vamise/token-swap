{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/mikovainio/FyFy/token-swap/node_modules/@babel/runtime/regenerator/index.js\");\n\nvar _classCallCheck = require(\"/Users/mikovainio/FyFy/token-swap/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/Users/mikovainio/FyFy/token-swap/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OrcaPoolImpl = void 0;\n\nvar spl_token_1 = require(\"@solana/spl-token\");\n\nvar orca_defaults_1 = require(\"../../../constants/orca-defaults\");\n\nvar public_1 = require(\"../../../public\");\n\nvar pool_instructions_1 = require(\"../../../public/utils/web3/instructions/pool-instructions\");\n\nvar key_utils_1 = require(\"../../../public/utils/web3/key-utils\");\n\nvar quote_builder_1 = require(\"../../quote/quote-builder\");\n\nvar OrcaPoolImpl = /*#__PURE__*/function () {\n  function OrcaPoolImpl(connection, network, config) {\n    _classCallCheck(this, OrcaPoolImpl);\n\n    this.connection = connection;\n    this.poolParams = config;\n    this.orcaTokenSwapId = network === public_1.Network.MAINNET ? public_1.ORCA_TOKEN_SWAP_ID : public_1.ORCA_TOKEN_SWAP_ID_DEVNET;\n  }\n\n  _createClass(OrcaPoolImpl, [{\n    key: \"getTokenA\",\n    value: function getTokenA() {\n      var tokenId = this.poolParams.tokenIds[0];\n      return this.poolParams.tokens[tokenId];\n    }\n  }, {\n    key: \"getTokenB\",\n    value: function getTokenB() {\n      var tokenId = this.poolParams.tokenIds[1];\n      return this.poolParams.tokens[tokenId];\n    }\n  }, {\n    key: \"getPoolTokenMint\",\n    value: function getPoolTokenMint() {\n      return this.poolParams.poolTokenMint;\n    }\n  }, {\n    key: \"getLPBalance\",\n    value: function getLPBalance(owner) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var address, accountInfo, result;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return (0, public_1.deriveAssociatedTokenAddress)(owner, this.poolParams.poolTokenMint);\n\n              case 2:\n                address = _context.sent;\n                _context.next = 5;\n                return this.connection.getAccountInfo(address);\n\n              case 5:\n                accountInfo = _context.sent;\n\n                if (!(accountInfo == undefined)) {\n                  _context.next = 8;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", public_1.OrcaU64.fromNumber(0, this.poolParams.poolTokenDecimals));\n\n              case 8:\n                result = (0, public_1.deserializeAccount)(accountInfo === null || accountInfo === void 0 ? void 0 : accountInfo.data);\n\n                if (!(result == undefined)) {\n                  _context.next = 11;\n                  break;\n                }\n\n                throw new Error(\"Failed to parse user account for LP token.\");\n\n              case 11:\n                return _context.abrupt(\"return\", public_1.OrcaU64.fromU64(result.amount, this.poolParams.poolTokenDecimals));\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n  }, {\n    key: \"getLPSupply\",\n    value: function getLPSupply() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var context, amt;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.connection.getTokenSupply(this.poolParams.poolTokenMint);\n\n              case 2:\n                context = _context2.sent;\n                amt = new spl_token_1.u64(context.value.amount);\n                return _context2.abrupt(\"return\", public_1.OrcaU64.fromU64(amt, this.poolParams.poolTokenDecimals));\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }\n  }, {\n    key: \"getQuote\",\n    value: function getQuote(inputToken, inputAmount, slippage) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var _ref, inputPoolToken, outputPoolToken, _yield, inputTokenCount, outputTokenCount;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _ref = (0, public_1.getTokens)(this.poolParams, inputToken.mint.toString()), inputPoolToken = _ref.inputPoolToken, outputPoolToken = _ref.outputPoolToken;\n                _context3.next = 3;\n                return (0, public_1.getTokenCount)(this.connection, this.poolParams, inputPoolToken, outputPoolToken);\n\n              case 3:\n                _yield = _context3.sent;\n                inputTokenCount = _yield.inputTokenCount;\n                outputTokenCount = _yield.outputTokenCount;\n                return _context3.abrupt(\"return\", this.getQuoteWithPoolAmounts(inputToken, inputAmount, inputTokenCount, outputTokenCount, slippage));\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    }\n  }, {\n    key: \"getQuoteWithPoolAmounts\",\n    value: function getQuoteWithPoolAmounts(inputToken, inputAmount, inputTokenPoolAmount, outputTokenPoolAmount, slippage) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var slippageTolerance, feeStructure, _ref2, inputPoolToken, outputPoolToken, inputAmountU64, _yield$this$connectio, feeCalculator, quoteParams, quoteBuilder, quote;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                slippageTolerance = slippage === undefined ? orca_defaults_1.defaultSlippagePercentage : public_1.Percentage.fromDecimal(slippage);\n                feeStructure = this.poolParams.feeStructure;\n                _ref2 = (0, public_1.getTokens)(this.poolParams, inputToken.mint.toString()), inputPoolToken = _ref2.inputPoolToken, outputPoolToken = _ref2.outputPoolToken;\n                inputAmountU64 = public_1.U64Utils.toTokenU64(inputAmount, inputPoolToken, \"inputAmount\");\n                _context4.next = 6;\n                return this.connection.getRecentBlockhashAndContext(\"singleGossip\");\n\n              case 6:\n                _yield$this$connectio = _context4.sent;\n                feeCalculator = _yield$this$connectio.value.feeCalculator;\n                quoteParams = {\n                  inputToken: inputPoolToken,\n                  outputToken: outputPoolToken,\n                  inputTokenCount: inputTokenPoolAmount,\n                  outputTokenCount: outputTokenPoolAmount,\n                  feeStructure: feeStructure,\n                  slippageTolerance: slippageTolerance,\n                  lamportsPerSignature: feeCalculator.lamportsPerSignature,\n                  amp: this.poolParams.amp !== undefined ? new spl_token_1.u64(this.poolParams.amp) : undefined\n                };\n                quoteBuilder = quote_builder_1.QuoteBuilderFactory.getBuilder(this.poolParams.curveType);\n                quote = quoteBuilder === null || quoteBuilder === void 0 ? void 0 : quoteBuilder.buildQuote(quoteParams, inputAmountU64);\n\n                if (!(quote == undefined)) {\n                  _context4.next = 13;\n                  break;\n                }\n\n                throw new Error(\"Failed to get quote!\");\n\n              case 13:\n                return _context4.abrupt(\"return\", quote);\n\n              case 14:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n    }\n  }, {\n    key: \"swap\",\n    value: function swap(owner, inputToken, amountIn, minimumAmountOut) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var _owner, ownerAddress, _ref3, inputPoolToken, outputPoolToken, amountInU64, minimumAmountOutU64, _a, inputPoolTokenUserAddress, resolveInputAddrInstructions, _b, outputPoolTokenUserAddress, resolveOutputAddrInstructions, _c, userTransferAuthority, approvalInstruction, swapInstruction;\n\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _owner = new key_utils_1.Owner(owner);\n                ownerAddress = _owner.publicKey;\n                _ref3 = (0, public_1.getTokens)(this.poolParams, inputToken.mint.toString()), inputPoolToken = _ref3.inputPoolToken, outputPoolToken = _ref3.outputPoolToken;\n                amountInU64 = public_1.U64Utils.toTokenU64(amountIn, inputPoolToken, \"amountIn\");\n                minimumAmountOutU64 = public_1.U64Utils.toTokenU64(minimumAmountOut, outputPoolToken, \"minimumAmountOut\");\n                _context5.next = 7;\n                return (0, public_1.resolveOrCreateAssociatedTokenAddress)(this.connection, _owner, inputPoolToken.mint, amountInU64);\n\n              case 7:\n                _a = _context5.sent;\n                inputPoolTokenUserAddress = _a.address;\n                resolveInputAddrInstructions = __rest(_a, [\"address\"]);\n                _context5.next = 12;\n                return (0, public_1.resolveOrCreateAssociatedTokenAddress)(this.connection, _owner, outputPoolToken.mint);\n\n              case 12:\n                _b = _context5.sent;\n                outputPoolTokenUserAddress = _b.address;\n                resolveOutputAddrInstructions = __rest(_b, [\"address\"]);\n\n                if (!(inputPoolTokenUserAddress === undefined || outputPoolTokenUserAddress === undefined)) {\n                  _context5.next = 17;\n                  break;\n                }\n\n                throw new Error(\"Unable to derive input / output token associated address.\");\n\n              case 17:\n                _c = (0, pool_instructions_1.createApprovalInstruction)(ownerAddress, amountInU64, inputPoolTokenUserAddress), userTransferAuthority = _c.userTransferAuthority, approvalInstruction = __rest(_c, [\"userTransferAuthority\"]);\n                _context5.next = 20;\n                return (0, pool_instructions_1.createSwapInstruction)(this.poolParams, _owner, inputPoolToken, inputPoolTokenUserAddress, outputPoolToken, outputPoolTokenUserAddress, amountInU64, minimumAmountOutU64, userTransferAuthority.publicKey, this.orcaTokenSwapId);\n\n              case 20:\n                swapInstruction = _context5.sent;\n                _context5.next = 23;\n                return new public_1.TransactionBuilder(this.connection, ownerAddress, _owner).addInstruction(resolveInputAddrInstructions).addInstruction(resolveOutputAddrInstructions).addInstruction(approvalInstruction).addInstruction(swapInstruction).build();\n\n              case 23:\n                return _context5.abrupt(\"return\", _context5.sent);\n\n              case 24:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n    }\n  }, {\n    key: \"getDepositQuote\",\n    value: function getDepositQuote(maxTokenAIn, maxTokenBIn, slippage) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        var slippageTolerance, maxTokenAIn_U64, maxTokenBIn_U64, _yield2, tokenAAmount, tokenBAmount, lpSupply, poolTokenAmountWithA, poolTokenAmountWithB, minPoolTokenAmountOut_U64;\n\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                slippageTolerance = slippage === undefined ? orca_defaults_1.defaultSlippagePercentage : public_1.Percentage.fromDecimal(slippage);\n                maxTokenAIn_U64 = public_1.U64Utils.toTokenU64(maxTokenAIn, this.getTokenA(), \"maxTokenAIn\");\n                maxTokenBIn_U64 = public_1.U64Utils.toTokenU64(maxTokenBIn, this.getTokenB(), \"maxTokenBIn\");\n                _context6.next = 5;\n                return (0, public_1.getTokenCount)(this.connection, this.poolParams, this.getTokenA(), this.getTokenB());\n\n              case 5:\n                _yield2 = _context6.sent;\n                tokenAAmount = _yield2.inputTokenCount;\n                tokenBAmount = _yield2.outputTokenCount;\n                _context6.next = 10;\n                return this.getLPSupply();\n\n              case 10:\n                lpSupply = _context6.sent;\n\n                if (!(tokenAAmount.eq(public_1.ZERO) || tokenBAmount.eq(public_1.ZERO))) {\n                  _context6.next = 13;\n                  break;\n                }\n\n                return _context6.abrupt(\"return\", {\n                  minPoolTokenAmountOut: public_1.OrcaU64.fromU64(public_1.ZERO, lpSupply.scale),\n                  maxTokenAIn: public_1.OrcaU64.fromU64(maxTokenAIn_U64, this.getTokenA().scale),\n                  maxTokenBIn: public_1.OrcaU64.fromU64(maxTokenBIn_U64, this.getTokenB().scale)\n                });\n\n              case 13:\n                poolTokenAmountWithA = maxTokenAIn_U64.mul(slippageTolerance.denominator).mul(lpSupply.toU64()).div(tokenAAmount).div(slippageTolerance.numerator.add(slippageTolerance.denominator));\n                poolTokenAmountWithB = maxTokenBIn_U64.mul(slippageTolerance.denominator).mul(lpSupply.toU64()).div(tokenBAmount).div(slippageTolerance.numerator.add(slippageTolerance.denominator)); // Pick the smaller value of the two to calculate the minimum poolTokenAmount out\n\n                minPoolTokenAmountOut_U64 = poolTokenAmountWithA.gt(poolTokenAmountWithB) ? poolTokenAmountWithB : poolTokenAmountWithA;\n                return _context6.abrupt(\"return\", {\n                  minPoolTokenAmountOut: public_1.OrcaU64.fromU64(minPoolTokenAmountOut_U64, lpSupply.scale),\n                  maxTokenAIn: public_1.OrcaU64.fromU64(maxTokenAIn_U64, this.getTokenA().scale),\n                  maxTokenBIn: public_1.OrcaU64.fromU64(maxTokenBIn_U64, this.getTokenB().scale)\n                });\n\n              case 17:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n    }\n  }, {\n    key: \"deposit\",\n    value: function deposit(owner, maxTokenAIn, maxTokenBIn, minPoolTokenAmountOut) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n        var _owner, ownerAddress, tokenA, tokenB, maxTokenAIn_U64, maxTokenBIn_U64, minPoolTokenAmountOut_U64, _a, userTokenAPublicKey, resolveTokenAInstrucitons, _b, userTokenBPublicKey, resolveTokenBInstrucitons, _c, userPoolTokenPublicKey, resolvePoolTokenInstructions, _d, userTransferAuthority, transferTokenAInstruction, transferTokenBInstruction, depositInstruction;\n\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _owner = new key_utils_1.Owner(owner);\n                ownerAddress = _owner.publicKey;\n                tokenA = this.getTokenA();\n                tokenB = this.getTokenB();\n                maxTokenAIn_U64 = public_1.U64Utils.toTokenU64(maxTokenAIn, tokenA, \"maxTokenAIn\");\n                maxTokenBIn_U64 = public_1.U64Utils.toTokenU64(maxTokenBIn, tokenB, \"maxTokenBIn\");\n                minPoolTokenAmountOut_U64 = public_1.U64Utils.toPoolU64(minPoolTokenAmountOut, this.poolParams, \"poolTokenAmount\"); // If tokenA is SOL, this will create a new wSOL account with maxTokenAIn_U64\n                // Otherwise, get tokenA's associated token account\n\n                _context7.next = 9;\n                return (0, public_1.resolveOrCreateAssociatedTokenAddress)(this.connection, _owner, tokenA.mint, maxTokenAIn_U64);\n\n              case 9:\n                _a = _context7.sent;\n                userTokenAPublicKey = _a.address;\n                resolveTokenAInstrucitons = __rest(_a, [\"address\"]);\n                _context7.next = 14;\n                return (0, public_1.resolveOrCreateAssociatedTokenAddress)(this.connection, _owner, tokenB.mint, maxTokenBIn_U64);\n\n              case 14:\n                _b = _context7.sent;\n                userTokenBPublicKey = _b.address;\n                resolveTokenBInstrucitons = __rest(_b, [\"address\"]);\n                _context7.next = 19;\n                return (0, public_1.resolveOrCreateAssociatedTokenAddress)(this.connection, _owner, this.poolParams.poolTokenMint);\n\n              case 19:\n                _c = _context7.sent;\n                userPoolTokenPublicKey = _c.address;\n                resolvePoolTokenInstructions = __rest(_c, [\"address\"]);\n                // Approve transfer of the tokens being deposited\n                _d = (0, pool_instructions_1.createApprovalInstruction)(ownerAddress, maxTokenAIn_U64, userTokenAPublicKey), userTransferAuthority = _d.userTransferAuthority, transferTokenAInstruction = __rest(_d, [\"userTransferAuthority\"]);\n                transferTokenBInstruction = __rest((0, pool_instructions_1.createApprovalInstruction)(ownerAddress, maxTokenBIn_U64, userTokenBPublicKey, userTransferAuthority), []); // Create the deposit instruction\n\n                _context7.next = 26;\n                return (0, pool_instructions_1.createDepositInstruction)(this.poolParams, userTransferAuthority.publicKey, userTokenAPublicKey, userTokenBPublicKey, userPoolTokenPublicKey, minPoolTokenAmountOut_U64, maxTokenAIn_U64, maxTokenBIn_U64, tokenA.addr, tokenB.addr, this.orcaTokenSwapId, _owner);\n\n              case 26:\n                depositInstruction = _context7.sent;\n                _context7.next = 29;\n                return new public_1.TransactionBuilder(this.connection, ownerAddress, _owner).addInstruction(resolveTokenAInstrucitons).addInstruction(resolveTokenBInstrucitons).addInstruction(resolvePoolTokenInstructions).addInstruction(transferTokenAInstruction).addInstruction(transferTokenBInstruction).addInstruction(depositInstruction).build();\n\n              case 29:\n                return _context7.abrupt(\"return\", _context7.sent);\n\n              case 30:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n    }\n  }, {\n    key: \"getWithdrawQuote\",\n    value: function getWithdrawQuote(withdrawTokenAmount, withdrawTokenMint, slippage) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n        var slippageTolerance, lpSupply, _yield3, tokenAAmount, tokenBAmount, poolTokenIn_U64, token, totalAmount, numerator, denominator, poolTokenIn, minTokenAOut, minTokenBOut;\n\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                slippageTolerance = slippage === undefined ? orca_defaults_1.defaultSlippagePercentage : public_1.Percentage.fromDecimal(slippage);\n                _context8.next = 3;\n                return this.getLPSupply();\n\n              case 3:\n                lpSupply = _context8.sent;\n                _context8.next = 6;\n                return (0, public_1.getTokenCount)(this.connection, this.poolParams, this.getTokenA(), this.getTokenB());\n\n              case 6:\n                _yield3 = _context8.sent;\n                tokenAAmount = _yield3.inputTokenCount;\n                tokenBAmount = _yield3.outputTokenCount;\n                // withdrawTokenAmount needs represent amounts for one of the following: poolTokenAmount, tokenAAmount, or tokenBAmount\n                // determine which token this amount represents, then calculate poolTokenIn_U64\n                poolTokenIn_U64 = public_1.ZERO;\n\n                if (!withdrawTokenMint.equals(this.getPoolTokenMint())) {\n                  _context8.next = 14;\n                  break;\n                }\n\n                poolTokenIn_U64 = public_1.U64Utils.toPoolU64(withdrawTokenAmount, this.poolParams, \"withdrawTokenAmount\");\n                _context8.next = 24;\n                break;\n\n              case 14:\n                if (!(withdrawTokenMint.equals(this.getTokenA().mint) || withdrawTokenMint.equals(this.getTokenB().mint))) {\n                  _context8.next = 23;\n                  break;\n                }\n\n                token = withdrawTokenMint.equals(this.getTokenA().mint) ? this.getTokenA() : this.getTokenB();\n                totalAmount = token.mint.equals(this.getTokenA().mint) ? tokenAAmount : tokenBAmount;\n                numerator = withdrawTokenAmount instanceof public_1.OrcaU64 ? withdrawTokenAmount.toDecimal() : withdrawTokenAmount;\n                denominator = public_1.DecimalUtil.fromU64(totalAmount, token.scale);\n                poolTokenIn = lpSupply.toDecimal().div(denominator).mul(numerator);\n                poolTokenIn_U64 = public_1.U64Utils.toPoolU64(poolTokenIn, this.poolParams, \"poolTokenIn\");\n                _context8.next = 24;\n                break;\n\n              case 23:\n                throw new Error(\"Unable to get withdraw quote with an invalid withdrawTokenMint \".concat(withdrawTokenMint));\n\n              case 24:\n                if (!poolTokenIn_U64.eq(public_1.ZERO)) {\n                  _context8.next = 26;\n                  break;\n                }\n\n                return _context8.abrupt(\"return\", {\n                  maxPoolTokenAmountIn: public_1.OrcaU64.fromU64(public_1.ZERO, lpSupply.scale),\n                  minTokenAOut: public_1.OrcaU64.fromU64(public_1.ZERO, this.getTokenA().scale),\n                  minTokenBOut: public_1.OrcaU64.fromU64(public_1.ZERO, this.getTokenB().scale)\n                });\n\n              case 26:\n                minTokenAOut = new public_1.OrcaU64(poolTokenIn_U64.mul(slippageTolerance.denominator).mul(tokenAAmount).div(lpSupply.toU64()).div(slippageTolerance.numerator.add(slippageTolerance.denominator)), this.getTokenA().scale);\n                minTokenBOut = new public_1.OrcaU64(poolTokenIn_U64.mul(slippageTolerance.denominator).mul(tokenBAmount).div(lpSupply.toU64()).div(slippageTolerance.numerator.add(slippageTolerance.denominator)), this.getTokenB().scale);\n                return _context8.abrupt(\"return\", {\n                  maxPoolTokenAmountIn: public_1.OrcaU64.fromU64(poolTokenIn_U64, lpSupply.scale),\n                  minTokenAOut: minTokenAOut,\n                  minTokenBOut: minTokenBOut\n                });\n\n              case 29:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n    }\n  }, {\n    key: \"withdraw\",\n    value: function withdraw(owner, poolTokenAmountIn, minTokenAOut, minTokenBOut) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {\n        var _owner, ownerAddress, tokenA, tokenB, minTokenAOut_U64, minTokenBOut_U64, poolTokenAmountIn_U64, _a, userTokenAPublicKey, resolveTokenAInstrucitons, _b, userTokenBPublicKey, resolveTokenBInstrucitons, _c, userPoolTokenPublicKey, resolvePoolTokenInstructions, _d, userTransferAuthority, transferPoolTokenInstruction, withdrawInstruction;\n\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _owner = new key_utils_1.Owner(owner);\n                ownerAddress = _owner.publicKey;\n                tokenA = this.getTokenA();\n                tokenB = this.getTokenB();\n                minTokenAOut_U64 = public_1.U64Utils.toTokenU64(minTokenAOut, tokenA, \"minTokenAOut\");\n                minTokenBOut_U64 = public_1.U64Utils.toTokenU64(minTokenBOut, tokenB, \"minTokenBOut\");\n                poolTokenAmountIn_U64 = public_1.U64Utils.toPoolU64(poolTokenAmountIn, this.poolParams, \"poolTokenAmountIn\"); // Create a token account for tokenA, if necessary\n\n                _context9.next = 9;\n                return (0, public_1.resolveOrCreateAssociatedTokenAddress)(this.connection, _owner, tokenA.mint);\n\n              case 9:\n                _a = _context9.sent;\n                userTokenAPublicKey = _a.address;\n                resolveTokenAInstrucitons = __rest(_a, [\"address\"]);\n                _context9.next = 14;\n                return (0, public_1.resolveOrCreateAssociatedTokenAddress)(this.connection, _owner, tokenB.mint);\n\n              case 14:\n                _b = _context9.sent;\n                userTokenBPublicKey = _b.address;\n                resolveTokenBInstrucitons = __rest(_b, [\"address\"]);\n                _context9.next = 19;\n                return (0, public_1.resolveOrCreateAssociatedTokenAddress)(this.connection, _owner, this.poolParams.poolTokenMint);\n\n              case 19:\n                _c = _context9.sent;\n                userPoolTokenPublicKey = _c.address;\n                resolvePoolTokenInstructions = __rest(_c, [\"address\"]);\n                // Approve transfer of pool token\n                _d = (0, pool_instructions_1.createApprovalInstruction)(ownerAddress, poolTokenAmountIn_U64, userPoolTokenPublicKey), userTransferAuthority = _d.userTransferAuthority, transferPoolTokenInstruction = __rest(_d, [\"userTransferAuthority\"]); // Create the withdraw instruction\n\n                _context9.next = 25;\n                return (0, pool_instructions_1.createWithdrawInstruction)(this.poolParams, userTransferAuthority.publicKey, userTokenAPublicKey, userTokenBPublicKey, userPoolTokenPublicKey, poolTokenAmountIn_U64, minTokenAOut_U64, minTokenBOut_U64, tokenA.addr, tokenB.addr, this.orcaTokenSwapId, _owner);\n\n              case 25:\n                withdrawInstruction = _context9.sent;\n                _context9.next = 28;\n                return new public_1.TransactionBuilder(this.connection, ownerAddress, _owner).addInstruction(resolveTokenAInstrucitons).addInstruction(resolveTokenBInstrucitons).addInstruction(resolvePoolTokenInstructions).addInstruction(transferPoolTokenInstruction).addInstruction(withdrawInstruction).build();\n\n              case 28:\n                return _context9.abrupt(\"return\", _context9.sent);\n\n              case 29:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n    }\n  }]);\n\n  return OrcaPoolImpl;\n}();\n\nexports.OrcaPoolImpl = OrcaPoolImpl;","map":{"version":3,"sources":["/Users/mikovainio/FyFy/token-swap/node_modules/@orca-so/sdk/dist/model/orca/pool/orca-pool.js"],"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","__rest","s","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","defineProperty","exports","OrcaPoolImpl","spl_token_1","require","orca_defaults_1","public_1","pool_instructions_1","key_utils_1","quote_builder_1","connection","network","config","poolParams","orcaTokenSwapId","Network","MAINNET","ORCA_TOKEN_SWAP_ID","ORCA_TOKEN_SWAP_ID_DEVNET","tokenId","tokenIds","tokens","poolTokenMint","owner","deriveAssociatedTokenAddress","address","getAccountInfo","accountInfo","undefined","OrcaU64","fromNumber","poolTokenDecimals","deserializeAccount","data","Error","fromU64","amount","getTokenSupply","context","amt","u64","inputToken","inputAmount","slippage","getTokens","mint","toString","inputPoolToken","outputPoolToken","getTokenCount","inputTokenCount","outputTokenCount","getQuoteWithPoolAmounts","inputTokenPoolAmount","outputTokenPoolAmount","slippageTolerance","defaultSlippagePercentage","Percentage","fromDecimal","feeStructure","inputAmountU64","U64Utils","toTokenU64","getRecentBlockhashAndContext","feeCalculator","quoteParams","outputToken","lamportsPerSignature","amp","quoteBuilder","QuoteBuilderFactory","getBuilder","curveType","quote","buildQuote","amountIn","minimumAmountOut","_owner","Owner","ownerAddress","publicKey","amountInU64","minimumAmountOutU64","resolveOrCreateAssociatedTokenAddress","_a","inputPoolTokenUserAddress","resolveInputAddrInstructions","_b","outputPoolTokenUserAddress","resolveOutputAddrInstructions","_c","createApprovalInstruction","userTransferAuthority","approvalInstruction","createSwapInstruction","swapInstruction","TransactionBuilder","addInstruction","build","maxTokenAIn","maxTokenBIn","maxTokenAIn_U64","getTokenA","maxTokenBIn_U64","getTokenB","tokenAAmount","tokenBAmount","getLPSupply","lpSupply","eq","ZERO","minPoolTokenAmountOut","scale","poolTokenAmountWithA","mul","denominator","toU64","div","numerator","add","poolTokenAmountWithB","minPoolTokenAmountOut_U64","gt","tokenA","tokenB","toPoolU64","userTokenAPublicKey","resolveTokenAInstrucitons","userTokenBPublicKey","resolveTokenBInstrucitons","userPoolTokenPublicKey","resolvePoolTokenInstructions","_d","transferTokenAInstruction","transferTokenBInstruction","createDepositInstruction","addr","depositInstruction","withdrawTokenAmount","withdrawTokenMint","poolTokenIn_U64","equals","getPoolTokenMint","token","totalAmount","toDecimal","DecimalUtil","poolTokenIn","maxPoolTokenAmountIn","minTokenAOut","minTokenBOut","poolTokenAmountIn","minTokenAOut_U64","minTokenBOut_U64","poolTokenAmountIn_U64","transferPoolTokenInstruction","createWithdrawInstruction","withdrawInstruction"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OrcaPoolImpl = void 0;\nconst spl_token_1 = require(\"@solana/spl-token\");\nconst orca_defaults_1 = require(\"../../../constants/orca-defaults\");\nconst public_1 = require(\"../../../public\");\nconst pool_instructions_1 = require(\"../../../public/utils/web3/instructions/pool-instructions\");\nconst key_utils_1 = require(\"../../../public/utils/web3/key-utils\");\nconst quote_builder_1 = require(\"../../quote/quote-builder\");\nclass OrcaPoolImpl {\n    constructor(connection, network, config) {\n        this.connection = connection;\n        this.poolParams = config;\n        this.orcaTokenSwapId =\n            network === public_1.Network.MAINNET ? public_1.ORCA_TOKEN_SWAP_ID : public_1.ORCA_TOKEN_SWAP_ID_DEVNET;\n    }\n    getTokenA() {\n        const tokenId = this.poolParams.tokenIds[0];\n        return this.poolParams.tokens[tokenId];\n    }\n    getTokenB() {\n        const tokenId = this.poolParams.tokenIds[1];\n        return this.poolParams.tokens[tokenId];\n    }\n    getPoolTokenMint() {\n        return this.poolParams.poolTokenMint;\n    }\n    getLPBalance(owner) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const address = yield (0, public_1.deriveAssociatedTokenAddress)(owner, this.poolParams.poolTokenMint);\n            const accountInfo = yield this.connection.getAccountInfo(address);\n            // User does not have a balance for this account\n            if (accountInfo == undefined) {\n                return public_1.OrcaU64.fromNumber(0, this.poolParams.poolTokenDecimals);\n            }\n            const result = (0, public_1.deserializeAccount)(accountInfo === null || accountInfo === void 0 ? void 0 : accountInfo.data);\n            if (result == undefined) {\n                throw new Error(\"Failed to parse user account for LP token.\");\n            }\n            return public_1.OrcaU64.fromU64(result.amount, this.poolParams.poolTokenDecimals);\n        });\n    }\n    getLPSupply() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const context = yield this.connection.getTokenSupply(this.poolParams.poolTokenMint);\n            const amt = new spl_token_1.u64(context.value.amount);\n            return public_1.OrcaU64.fromU64(amt, this.poolParams.poolTokenDecimals);\n        });\n    }\n    getQuote(inputToken, inputAmount, slippage) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { inputPoolToken, outputPoolToken } = (0, public_1.getTokens)(this.poolParams, inputToken.mint.toString());\n            const { inputTokenCount, outputTokenCount } = yield (0, public_1.getTokenCount)(this.connection, this.poolParams, inputPoolToken, outputPoolToken);\n            return this.getQuoteWithPoolAmounts(inputToken, inputAmount, inputTokenCount, outputTokenCount, slippage);\n        });\n    }\n    getQuoteWithPoolAmounts(inputToken, inputAmount, inputTokenPoolAmount, outputTokenPoolAmount, slippage) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const slippageTolerance = slippage === undefined ? orca_defaults_1.defaultSlippagePercentage : public_1.Percentage.fromDecimal(slippage);\n            const feeStructure = this.poolParams.feeStructure;\n            const { inputPoolToken, outputPoolToken } = (0, public_1.getTokens)(this.poolParams, inputToken.mint.toString());\n            const inputAmountU64 = public_1.U64Utils.toTokenU64(inputAmount, inputPoolToken, \"inputAmount\");\n            const { value: { feeCalculator }, } = yield this.connection.getRecentBlockhashAndContext(\"singleGossip\");\n            const quoteParams = {\n                inputToken: inputPoolToken,\n                outputToken: outputPoolToken,\n                inputTokenCount: inputTokenPoolAmount,\n                outputTokenCount: outputTokenPoolAmount,\n                feeStructure: feeStructure,\n                slippageTolerance: slippageTolerance,\n                lamportsPerSignature: feeCalculator.lamportsPerSignature,\n                amp: this.poolParams.amp !== undefined ? new spl_token_1.u64(this.poolParams.amp) : undefined,\n            };\n            const quoteBuilder = quote_builder_1.QuoteBuilderFactory.getBuilder(this.poolParams.curveType);\n            const quote = quoteBuilder === null || quoteBuilder === void 0 ? void 0 : quoteBuilder.buildQuote(quoteParams, inputAmountU64);\n            if (quote == undefined) {\n                throw new Error(\"Failed to get quote!\");\n            }\n            return quote;\n        });\n    }\n    swap(owner, inputToken, amountIn, minimumAmountOut) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const _owner = new key_utils_1.Owner(owner);\n            const ownerAddress = _owner.publicKey;\n            const { inputPoolToken, outputPoolToken } = (0, public_1.getTokens)(this.poolParams, inputToken.mint.toString());\n            const amountInU64 = public_1.U64Utils.toTokenU64(amountIn, inputPoolToken, \"amountIn\");\n            const minimumAmountOutU64 = public_1.U64Utils.toTokenU64(minimumAmountOut, outputPoolToken, \"minimumAmountOut\");\n            const _a = yield (0, public_1.resolveOrCreateAssociatedTokenAddress)(this.connection, _owner, inputPoolToken.mint, amountInU64), { address: inputPoolTokenUserAddress } = _a, resolveInputAddrInstructions = __rest(_a, [\"address\"]);\n            const _b = yield (0, public_1.resolveOrCreateAssociatedTokenAddress)(this.connection, _owner, outputPoolToken.mint), { address: outputPoolTokenUserAddress } = _b, resolveOutputAddrInstructions = __rest(_b, [\"address\"]);\n            if (inputPoolTokenUserAddress === undefined || outputPoolTokenUserAddress === undefined) {\n                throw new Error(\"Unable to derive input / output token associated address.\");\n            }\n            const _c = (0, pool_instructions_1.createApprovalInstruction)(ownerAddress, amountInU64, inputPoolTokenUserAddress), { userTransferAuthority } = _c, approvalInstruction = __rest(_c, [\"userTransferAuthority\"]);\n            const swapInstruction = yield (0, pool_instructions_1.createSwapInstruction)(this.poolParams, _owner, inputPoolToken, inputPoolTokenUserAddress, outputPoolToken, outputPoolTokenUserAddress, amountInU64, minimumAmountOutU64, userTransferAuthority.publicKey, this.orcaTokenSwapId);\n            return yield new public_1.TransactionBuilder(this.connection, ownerAddress, _owner)\n                .addInstruction(resolveInputAddrInstructions)\n                .addInstruction(resolveOutputAddrInstructions)\n                .addInstruction(approvalInstruction)\n                .addInstruction(swapInstruction)\n                .build();\n        });\n    }\n    getDepositQuote(maxTokenAIn, maxTokenBIn, slippage) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const slippageTolerance = slippage === undefined ? orca_defaults_1.defaultSlippagePercentage : public_1.Percentage.fromDecimal(slippage);\n            const maxTokenAIn_U64 = public_1.U64Utils.toTokenU64(maxTokenAIn, this.getTokenA(), \"maxTokenAIn\");\n            const maxTokenBIn_U64 = public_1.U64Utils.toTokenU64(maxTokenBIn, this.getTokenB(), \"maxTokenBIn\");\n            const { inputTokenCount: tokenAAmount, outputTokenCount: tokenBAmount } = yield (0, public_1.getTokenCount)(this.connection, this.poolParams, this.getTokenA(), this.getTokenB());\n            const lpSupply = yield this.getLPSupply();\n            if (tokenAAmount.eq(public_1.ZERO) || tokenBAmount.eq(public_1.ZERO)) {\n                return {\n                    minPoolTokenAmountOut: public_1.OrcaU64.fromU64(public_1.ZERO, lpSupply.scale),\n                    maxTokenAIn: public_1.OrcaU64.fromU64(maxTokenAIn_U64, this.getTokenA().scale),\n                    maxTokenBIn: public_1.OrcaU64.fromU64(maxTokenBIn_U64, this.getTokenB().scale),\n                };\n            }\n            const poolTokenAmountWithA = maxTokenAIn_U64\n                .mul(slippageTolerance.denominator)\n                .mul(lpSupply.toU64())\n                .div(tokenAAmount)\n                .div(slippageTolerance.numerator.add(slippageTolerance.denominator));\n            const poolTokenAmountWithB = maxTokenBIn_U64\n                .mul(slippageTolerance.denominator)\n                .mul(lpSupply.toU64())\n                .div(tokenBAmount)\n                .div(slippageTolerance.numerator.add(slippageTolerance.denominator));\n            // Pick the smaller value of the two to calculate the minimum poolTokenAmount out\n            const minPoolTokenAmountOut_U64 = poolTokenAmountWithA.gt(poolTokenAmountWithB)\n                ? poolTokenAmountWithB\n                : poolTokenAmountWithA;\n            return {\n                minPoolTokenAmountOut: public_1.OrcaU64.fromU64(minPoolTokenAmountOut_U64, lpSupply.scale),\n                maxTokenAIn: public_1.OrcaU64.fromU64(maxTokenAIn_U64, this.getTokenA().scale),\n                maxTokenBIn: public_1.OrcaU64.fromU64(maxTokenBIn_U64, this.getTokenB().scale),\n            };\n        });\n    }\n    deposit(owner, maxTokenAIn, maxTokenBIn, minPoolTokenAmountOut) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const _owner = new key_utils_1.Owner(owner);\n            const ownerAddress = _owner.publicKey;\n            const tokenA = this.getTokenA();\n            const tokenB = this.getTokenB();\n            const maxTokenAIn_U64 = public_1.U64Utils.toTokenU64(maxTokenAIn, tokenA, \"maxTokenAIn\");\n            const maxTokenBIn_U64 = public_1.U64Utils.toTokenU64(maxTokenBIn, tokenB, \"maxTokenBIn\");\n            const minPoolTokenAmountOut_U64 = public_1.U64Utils.toPoolU64(minPoolTokenAmountOut, this.poolParams, \"poolTokenAmount\");\n            // If tokenA is SOL, this will create a new wSOL account with maxTokenAIn_U64\n            // Otherwise, get tokenA's associated token account\n            const _a = yield (0, public_1.resolveOrCreateAssociatedTokenAddress)(this.connection, _owner, tokenA.mint, maxTokenAIn_U64), { address: userTokenAPublicKey } = _a, resolveTokenAInstrucitons = __rest(_a, [\"address\"]);\n            // If tokenB is SOL, this will create a new wSOL account with maxTokenBIn_U64\n            // Otherwise, get tokenB's associated token account\n            const _b = yield (0, public_1.resolveOrCreateAssociatedTokenAddress)(this.connection, _owner, tokenB.mint, maxTokenBIn_U64), { address: userTokenBPublicKey } = _b, resolveTokenBInstrucitons = __rest(_b, [\"address\"]);\n            // If the user lacks the pool token account, create it\n            const _c = yield (0, public_1.resolveOrCreateAssociatedTokenAddress)(this.connection, _owner, this.poolParams.poolTokenMint), { address: userPoolTokenPublicKey } = _c, resolvePoolTokenInstructions = __rest(_c, [\"address\"]);\n            // Approve transfer of the tokens being deposited\n            const _d = (0, pool_instructions_1.createApprovalInstruction)(ownerAddress, maxTokenAIn_U64, userTokenAPublicKey), { userTransferAuthority } = _d, transferTokenAInstruction = __rest(_d, [\"userTransferAuthority\"]);\n            const transferTokenBInstruction = __rest((0, pool_instructions_1.createApprovalInstruction)(ownerAddress, maxTokenBIn_U64, userTokenBPublicKey, userTransferAuthority), []);\n            // Create the deposit instruction\n            const depositInstruction = yield (0, pool_instructions_1.createDepositInstruction)(this.poolParams, userTransferAuthority.publicKey, userTokenAPublicKey, userTokenBPublicKey, userPoolTokenPublicKey, minPoolTokenAmountOut_U64, maxTokenAIn_U64, maxTokenBIn_U64, tokenA.addr, tokenB.addr, this.orcaTokenSwapId, _owner);\n            return yield new public_1.TransactionBuilder(this.connection, ownerAddress, _owner)\n                .addInstruction(resolveTokenAInstrucitons)\n                .addInstruction(resolveTokenBInstrucitons)\n                .addInstruction(resolvePoolTokenInstructions)\n                .addInstruction(transferTokenAInstruction)\n                .addInstruction(transferTokenBInstruction)\n                .addInstruction(depositInstruction)\n                .build();\n        });\n    }\n    getWithdrawQuote(withdrawTokenAmount, withdrawTokenMint, slippage) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const slippageTolerance = slippage === undefined ? orca_defaults_1.defaultSlippagePercentage : public_1.Percentage.fromDecimal(slippage);\n            const lpSupply = yield this.getLPSupply();\n            const { inputTokenCount: tokenAAmount, outputTokenCount: tokenBAmount } = yield (0, public_1.getTokenCount)(this.connection, this.poolParams, this.getTokenA(), this.getTokenB());\n            // withdrawTokenAmount needs represent amounts for one of the following: poolTokenAmount, tokenAAmount, or tokenBAmount\n            // determine which token this amount represents, then calculate poolTokenIn_U64\n            let poolTokenIn_U64 = public_1.ZERO;\n            if (withdrawTokenMint.equals(this.getPoolTokenMint())) {\n                poolTokenIn_U64 = public_1.U64Utils.toPoolU64(withdrawTokenAmount, this.poolParams, \"withdrawTokenAmount\");\n            }\n            else if (withdrawTokenMint.equals(this.getTokenA().mint) ||\n                withdrawTokenMint.equals(this.getTokenB().mint)) {\n                const token = withdrawTokenMint.equals(this.getTokenA().mint)\n                    ? this.getTokenA()\n                    : this.getTokenB();\n                const totalAmount = token.mint.equals(this.getTokenA().mint) ? tokenAAmount : tokenBAmount;\n                const numerator = withdrawTokenAmount instanceof public_1.OrcaU64\n                    ? withdrawTokenAmount.toDecimal()\n                    : withdrawTokenAmount;\n                const denominator = public_1.DecimalUtil.fromU64(totalAmount, token.scale);\n                const poolTokenIn = lpSupply.toDecimal().div(denominator).mul(numerator);\n                poolTokenIn_U64 = public_1.U64Utils.toPoolU64(poolTokenIn, this.poolParams, \"poolTokenIn\");\n            }\n            else {\n                throw new Error(`Unable to get withdraw quote with an invalid withdrawTokenMint ${withdrawTokenMint}`);\n            }\n            if (poolTokenIn_U64.eq(public_1.ZERO)) {\n                return {\n                    maxPoolTokenAmountIn: public_1.OrcaU64.fromU64(public_1.ZERO, lpSupply.scale),\n                    minTokenAOut: public_1.OrcaU64.fromU64(public_1.ZERO, this.getTokenA().scale),\n                    minTokenBOut: public_1.OrcaU64.fromU64(public_1.ZERO, this.getTokenB().scale),\n                };\n            }\n            const minTokenAOut = new public_1.OrcaU64(poolTokenIn_U64\n                .mul(slippageTolerance.denominator)\n                .mul(tokenAAmount)\n                .div(lpSupply.toU64())\n                .div(slippageTolerance.numerator.add(slippageTolerance.denominator)), this.getTokenA().scale);\n            const minTokenBOut = new public_1.OrcaU64(poolTokenIn_U64\n                .mul(slippageTolerance.denominator)\n                .mul(tokenBAmount)\n                .div(lpSupply.toU64())\n                .div(slippageTolerance.numerator.add(slippageTolerance.denominator)), this.getTokenB().scale);\n            return {\n                maxPoolTokenAmountIn: public_1.OrcaU64.fromU64(poolTokenIn_U64, lpSupply.scale),\n                minTokenAOut,\n                minTokenBOut,\n            };\n        });\n    }\n    withdraw(owner, poolTokenAmountIn, minTokenAOut, minTokenBOut) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const _owner = new key_utils_1.Owner(owner);\n            const ownerAddress = _owner.publicKey;\n            const tokenA = this.getTokenA();\n            const tokenB = this.getTokenB();\n            const minTokenAOut_U64 = public_1.U64Utils.toTokenU64(minTokenAOut, tokenA, \"minTokenAOut\");\n            const minTokenBOut_U64 = public_1.U64Utils.toTokenU64(minTokenBOut, tokenB, \"minTokenBOut\");\n            const poolTokenAmountIn_U64 = public_1.U64Utils.toPoolU64(poolTokenAmountIn, this.poolParams, \"poolTokenAmountIn\");\n            // Create a token account for tokenA, if necessary\n            const _a = yield (0, public_1.resolveOrCreateAssociatedTokenAddress)(this.connection, _owner, tokenA.mint), { address: userTokenAPublicKey } = _a, resolveTokenAInstrucitons = __rest(_a, [\"address\"]);\n            // Create a token account for tokenB, if necessary\n            const _b = yield (0, public_1.resolveOrCreateAssociatedTokenAddress)(this.connection, _owner, tokenB.mint), { address: userTokenBPublicKey } = _b, resolveTokenBInstrucitons = __rest(_b, [\"address\"]);\n            // Get user's poolToken token account\n            const _c = yield (0, public_1.resolveOrCreateAssociatedTokenAddress)(this.connection, _owner, this.poolParams.poolTokenMint), { address: userPoolTokenPublicKey } = _c, resolvePoolTokenInstructions = __rest(_c, [\"address\"]);\n            // Approve transfer of pool token\n            const _d = (0, pool_instructions_1.createApprovalInstruction)(ownerAddress, poolTokenAmountIn_U64, userPoolTokenPublicKey), { userTransferAuthority } = _d, transferPoolTokenInstruction = __rest(_d, [\"userTransferAuthority\"]);\n            // Create the withdraw instruction\n            const withdrawInstruction = yield (0, pool_instructions_1.createWithdrawInstruction)(this.poolParams, userTransferAuthority.publicKey, userTokenAPublicKey, userTokenBPublicKey, userPoolTokenPublicKey, poolTokenAmountIn_U64, minTokenAOut_U64, minTokenBOut_U64, tokenA.addr, tokenB.addr, this.orcaTokenSwapId, _owner);\n            return yield new public_1.TransactionBuilder(this.connection, ownerAddress, _owner)\n                .addInstruction(resolveTokenAInstrucitons)\n                .addInstruction(resolveTokenBInstrucitons)\n                .addInstruction(resolvePoolTokenInstructions)\n                .addInstruction(transferPoolTokenInstruction)\n                .addInstruction(withdrawInstruction)\n                .build();\n        });\n    }\n}\nexports.OrcaPoolImpl = OrcaPoolImpl;\n"]},"metadata":{},"sourceType":"script"}