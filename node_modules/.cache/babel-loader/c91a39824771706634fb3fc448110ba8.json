{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/mikovainio/FyFy/token-swap/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/Users/mikovainio/FyFy/token-swap/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OrcaU64 = void 0;\n\nvar spl_token_1 = require(\"@solana/spl-token\");\n\nvar decimal_js_1 = __importDefault(require(\"decimal.js\"));\n\nvar decimal_utils_1 = require(\"../../utils/numbers/decimal-utils\");\n/**\n * Orca's U64 wrapper class to help users convert to/from regular javascript number types\n *\n *\n * Examples:\n * OrcaU64(value: 99999, decimal: 0) -> 99999\n * OrcaU64(value: 99999, decimal: 5) -> 0.99999\n */\n\n\nvar OrcaU64 = /*#__PURE__*/function () {\n  function OrcaU64(value) {\n    var scale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n    _classCallCheck(this, OrcaU64);\n\n    this.value = value;\n    this.scale = Math.floor(scale);\n  }\n  /**\n   * Create an OrcaU64 from a Decimal\n   * @param value - an object representing the value of the u64 in Decimal form\n   * @param scale - the number of digits after the decimal point to keep account for in this u64\n   * @returns OrcaU64 hosting a u64 representing the input value adjusted to the provided scale\n   */\n\n\n  _createClass(OrcaU64, [{\n    key: \"toDecimal\",\n    value:\n    /**\n     * Convert this OrcaU64 to Decimal.\n     * @returns Decimal object that equals to the OrcaU64's value & scale\n     */\n    function toDecimal() {\n      return decimal_utils_1.DecimalUtil.fromU64(this.value, this.scale);\n    }\n    /**\n     * Convert this OrcaU64 to number.\n     * @returns number that equals to the OrcaU64's value & scale\n     */\n\n  }, {\n    key: \"toNumber\",\n    value: function toNumber() {\n      return decimal_utils_1.DecimalUtil.fromU64(this.value, this.scale).toNumber();\n    }\n    /**\n     * Convert this OrcaU64 to u64.\n     * @returns u64 that equals to the OrcaU64 value\n     */\n\n  }, {\n    key: \"toU64\",\n    value: function toU64() {\n      return new spl_token_1.u64(this.value.toString());\n    }\n  }], [{\n    key: \"fromDecimal\",\n    value: function fromDecimal(value) {\n      var scale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var dec = Math.floor(scale);\n      return new OrcaU64(decimal_utils_1.DecimalUtil.toU64(value, dec), dec);\n    }\n    /**\n     * Create an OrcaU64 from a number\n     * @param value - an object representing the value of the u64 in number form\n     * @param scale - the number of digits after the decimal point to keep account for in this u64\n     * @returns OrcaU64 hosting a u64 representing the input value adjusted to the provided scale\n     */\n\n  }, {\n    key: \"fromNumber\",\n    value: function fromNumber(value) {\n      var scale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var dec = Math.floor(scale);\n      return new OrcaU64(decimal_utils_1.DecimalUtil.toU64(new decimal_js_1.default(value), dec), dec);\n    }\n    /**\n     * Create an OrcaU64 from a u64\n     * @param value - an object representing the value of the u64\n     * @param scale - the number of digits after the decimal point represented in this u64\n     * @returns OrcaU64 hosting the input u64 with the provided scale\n     */\n\n  }, {\n    key: \"fromU64\",\n    value: function fromU64(value) {\n      var scale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var dec = Math.floor(scale);\n      return new OrcaU64(value, dec);\n    }\n  }]);\n\n  return OrcaU64;\n}();\n\nexports.OrcaU64 = OrcaU64;","map":{"version":3,"sources":["/Users/mikovainio/FyFy/token-swap/node_modules/@orca-so/sdk/dist/public/utils/numbers/orca-u64.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","OrcaU64","spl_token_1","require","decimal_js_1","decimal_utils_1","scale","Math","floor","DecimalUtil","fromU64","toNumber","u64","toString","dec","toU64","default"],"mappings":"AAAA;;;;;;AACA,IAAIA,eAAe,GAAI,QAAQ,KAAKA,eAAd,IAAkC,UAAUC,GAAV,EAAe;AACnE,SAAQA,GAAG,IAAIA,GAAG,CAACC,UAAZ,GAA0BD,GAA1B,GAAgC;AAAE,eAAWA;AAAb,GAAvC;AACH,CAFD;;AAGAE,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AACA,IAAMC,WAAW,GAAGC,OAAO,CAAC,mBAAD,CAA3B;;AACA,IAAMC,YAAY,GAAGV,eAAe,CAACS,OAAO,CAAC,YAAD,CAAR,CAApC;;AACA,IAAME,eAAe,GAAGF,OAAO,CAAC,mCAAD,CAA/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;IACMF,O;AACF,mBAAYD,KAAZ,EAA8B;AAAA,QAAXM,KAAW,uEAAH,CAAG;;AAAA;;AAC1B,SAAKN,KAAL,GAAaA,KAAb;AACA,SAAKM,KAAL,GAAaC,IAAI,CAACC,KAAL,CAAWF,KAAX,CAAb;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;;;;AAyBI;AACJ;AACA;AACA;AACI,yBAAY;AACR,aAAOD,eAAe,CAACI,WAAhB,CAA4BC,OAA5B,CAAoC,KAAKV,KAAzC,EAAgD,KAAKM,KAArD,CAAP;AACH;AACD;AACJ;AACA;AACA;;;;WACI,oBAAW;AACP,aAAOD,eAAe,CAACI,WAAhB,CAA4BC,OAA5B,CAAoC,KAAKV,KAAzC,EAAgD,KAAKM,KAArD,EAA4DK,QAA5D,EAAP;AACH;AACD;AACJ;AACA;AACA;;;;WACI,iBAAQ;AACJ,aAAO,IAAIT,WAAW,CAACU,GAAhB,CAAoB,KAAKZ,KAAL,CAAWa,QAAX,EAApB,CAAP;AACH;;;WA5CD,qBAAmBb,KAAnB,EAAqC;AAAA,UAAXM,KAAW,uEAAH,CAAG;AACjC,UAAMQ,GAAG,GAAGP,IAAI,CAACC,KAAL,CAAWF,KAAX,CAAZ;AACA,aAAO,IAAIL,OAAJ,CAAYI,eAAe,CAACI,WAAhB,CAA4BM,KAA5B,CAAkCf,KAAlC,EAAyCc,GAAzC,CAAZ,EAA2DA,GAA3D,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;;WACI,oBAAkBd,KAAlB,EAAoC;AAAA,UAAXM,KAAW,uEAAH,CAAG;AAChC,UAAMQ,GAAG,GAAGP,IAAI,CAACC,KAAL,CAAWF,KAAX,CAAZ;AACA,aAAO,IAAIL,OAAJ,CAAYI,eAAe,CAACI,WAAhB,CAA4BM,KAA5B,CAAkC,IAAIX,YAAY,CAACY,OAAjB,CAAyBhB,KAAzB,CAAlC,EAAmEc,GAAnE,CAAZ,EAAqFA,GAArF,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;;WACI,iBAAed,KAAf,EAAiC;AAAA,UAAXM,KAAW,uEAAH,CAAG;AAC7B,UAAMQ,GAAG,GAAGP,IAAI,CAACC,KAAL,CAAWF,KAAX,CAAZ;AACA,aAAO,IAAIL,OAAJ,CAAYD,KAAZ,EAAmBc,GAAnB,CAAP;AACH;;;;;;AAuBLf,OAAO,CAACE,OAAR,GAAkBA,OAAlB","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OrcaU64 = void 0;\nconst spl_token_1 = require(\"@solana/spl-token\");\nconst decimal_js_1 = __importDefault(require(\"decimal.js\"));\nconst decimal_utils_1 = require(\"../../utils/numbers/decimal-utils\");\n/**\n * Orca's U64 wrapper class to help users convert to/from regular javascript number types\n *\n *\n * Examples:\n * OrcaU64(value: 99999, decimal: 0) -> 99999\n * OrcaU64(value: 99999, decimal: 5) -> 0.99999\n */\nclass OrcaU64 {\n    constructor(value, scale = 0) {\n        this.value = value;\n        this.scale = Math.floor(scale);\n    }\n    /**\n     * Create an OrcaU64 from a Decimal\n     * @param value - an object representing the value of the u64 in Decimal form\n     * @param scale - the number of digits after the decimal point to keep account for in this u64\n     * @returns OrcaU64 hosting a u64 representing the input value adjusted to the provided scale\n     */\n    static fromDecimal(value, scale = 0) {\n        const dec = Math.floor(scale);\n        return new OrcaU64(decimal_utils_1.DecimalUtil.toU64(value, dec), dec);\n    }\n    /**\n     * Create an OrcaU64 from a number\n     * @param value - an object representing the value of the u64 in number form\n     * @param scale - the number of digits after the decimal point to keep account for in this u64\n     * @returns OrcaU64 hosting a u64 representing the input value adjusted to the provided scale\n     */\n    static fromNumber(value, scale = 0) {\n        const dec = Math.floor(scale);\n        return new OrcaU64(decimal_utils_1.DecimalUtil.toU64(new decimal_js_1.default(value), dec), dec);\n    }\n    /**\n     * Create an OrcaU64 from a u64\n     * @param value - an object representing the value of the u64\n     * @param scale - the number of digits after the decimal point represented in this u64\n     * @returns OrcaU64 hosting the input u64 with the provided scale\n     */\n    static fromU64(value, scale = 0) {\n        const dec = Math.floor(scale);\n        return new OrcaU64(value, dec);\n    }\n    /**\n     * Convert this OrcaU64 to Decimal.\n     * @returns Decimal object that equals to the OrcaU64's value & scale\n     */\n    toDecimal() {\n        return decimal_utils_1.DecimalUtil.fromU64(this.value, this.scale);\n    }\n    /**\n     * Convert this OrcaU64 to number.\n     * @returns number that equals to the OrcaU64's value & scale\n     */\n    toNumber() {\n        return decimal_utils_1.DecimalUtil.fromU64(this.value, this.scale).toNumber();\n    }\n    /**\n     * Convert this OrcaU64 to u64.\n     * @returns u64 that equals to the OrcaU64 value\n     */\n    toU64() {\n        return new spl_token_1.u64(this.value.toString());\n    }\n}\nexports.OrcaU64 = OrcaU64;\n"]},"metadata":{},"sourceType":"script"}