{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar spl_token_1 = require(\"@solana/spl-token\");\n\nvar decimal_js_1 = require(\"decimal.js\");\n\nvar cuberoots_1 = require(\"./cuberoots\");\n\nvar ZERO = new spl_token_1.u64(0);\nvar ONE = new spl_token_1.u64(1);\nvar TWO = new spl_token_1.u64(2);\nvar THREE = new spl_token_1.u64(3);\nvar FOUR = new spl_token_1.u64(4);\nvar EIGHT = new spl_token_1.u64(8);\nvar SIXTEEN = new spl_token_1.u64(16);\nvar N_COINS = TWO;\nvar N_COINS_SQUARED = new spl_token_1.u64(4);\n\nfunction calculateStep(initialD, leverage, sumX, dProduct) {\n  var leverageMul = leverage.mul(sumX);\n  var dPMul = dProduct.mul(N_COINS);\n  var leverageVal = leverageMul.add(dPMul).mul(initialD);\n  var leverageSub = initialD.mul(leverage.sub(ONE));\n  var nCoinsSum = dProduct.mul(N_COINS.add(ONE));\n  var rVal = leverageSub.add(nCoinsSum);\n  return leverageVal.div(rVal);\n}\n\nfunction computeD(leverage, amountA, amountB) {\n  var amountATimesN = amountA.mul(N_COINS).add(ONE);\n  var amountBTimesN = amountB.mul(N_COINS).add(ONE);\n  var sumX = amountA.add(amountB);\n\n  if (sumX.eq(ZERO)) {\n    return ZERO;\n  }\n\n  var dPrevious;\n  var d = sumX;\n\n  for (var i = 0; i < 32; i++) {\n    var dProduct = d;\n    dProduct = dProduct.mul(d).div(amountATimesN);\n    dProduct = dProduct.mul(d).div(amountBTimesN);\n    dPrevious = d;\n    d = calculateStep(d, leverage, sumX, dProduct);\n\n    if (d.eq(dPrevious)) {\n      break;\n    }\n  }\n\n  return d;\n}\n\nfunction _computeOutputAmount(leverage, newInputAmount, d) {\n  var c = d.pow(N_COINS.add(ONE)).div(newInputAmount.mul(N_COINS_SQUARED).mul(leverage));\n  var b = newInputAmount.add(d.div(leverage));\n  var yPrevious;\n  var y = d;\n\n  for (var i = 0; i < 32; i++) {\n    yPrevious = y;\n    y = y.sqr().add(c).div(y.mul(TWO).add(b).sub(d));\n\n    if (y.eq(yPrevious)) {\n      break;\n    }\n  }\n\n  return y;\n}\n\nfunction computeOutputAmount(inputAmount, inputPoolAmount, outputPoolAmount, amp) {\n  var leverage = amp.mul(N_COINS);\n  var newInputPoolAmount = inputAmount.add(inputPoolAmount);\n  var d = computeD(leverage, inputPoolAmount, outputPoolAmount);\n\n  var newOutputPoolAmount = _computeOutputAmount(leverage, newInputPoolAmount, d);\n\n  var outputAmount = outputPoolAmount.sub(newOutputPoolAmount);\n  return new spl_token_1.u64(outputAmount.toString());\n}\n\nexports.computeOutputAmount = computeOutputAmount;\n\nfunction computeInputAmount(outputAmount, inputPoolAmount, outputPoolAmount, amp) {\n  var leverage = amp.mul(N_COINS);\n  var newOutputPoolAmount = outputPoolAmount.sub(outputAmount);\n  var d = computeD(leverage, outputPoolAmount, inputPoolAmount);\n\n  var newInputPoolAmount = _computeOutputAmount(leverage, newOutputPoolAmount, d);\n\n  var inputAmount = newInputPoolAmount.sub(inputPoolAmount);\n  return new spl_token_1.u64(inputAmount.toString());\n}\n\nexports.computeInputAmount = computeInputAmount;\n\nfunction computeEqualInput(tokenAPoolAmount, tokenBPoolAmount, amp) {\n  var leverage = amp.mul(N_COINS);\n  var invariant = computeD(leverage, tokenAPoolAmount, tokenBPoolAmount);\n  var a = new decimal_js_1.Decimal(amp.mul(EIGHT).toString());\n  var b = new decimal_js_1.Decimal(invariant.sub(amp.mul(invariant).mul(FOUR)).toString());\n  var c = new decimal_js_1.Decimal(0);\n  var d = new decimal_js_1.Decimal(invariant.neg().pow(THREE).div(FOUR).toString());\n  var roots = cuberoots_1.getCubicRoots(a, b, c, d);\n  return new spl_token_1.u64(roots[0].real.round().toString());\n}\n\nexports.computeEqualInput = computeEqualInput;\n\nfunction computeBaseOutputAmount(inputAmount, inputPoolAmount, outputPoolAmount, amp) {\n  var leverage = amp.mul(N_COINS);\n  var invariant = computeD(leverage, inputPoolAmount, outputPoolAmount);\n  var a = amp.mul(SIXTEEN);\n  var b = a;\n  var c = invariant.mul(FOUR).sub(invariant.mul(amp).mul(SIXTEEN));\n  var numerator = TWO.mul(a).mul(inputPoolAmount).add(b.mul(outputPoolAmount)).add(c).mul(outputPoolAmount);\n  var denominator = a.mul(inputPoolAmount).add(TWO.mul(b).mul(outputPoolAmount).add(c)).mul(inputPoolAmount);\n  return new spl_token_1.u64(inputAmount.mul(numerator).div(denominator).toString());\n}\n\nexports.computeBaseOutputAmount = computeBaseOutputAmount;\n\nfunction computeSingleTokenDepositOutput(inputAmount, isA, tokenAPoolAmount, tokenBPoolAmount, amp, poolTokenSupply) {\n  if (inputAmount.eq(ZERO)) {\n    return ZERO;\n  }\n\n  var leverage = amp.mul(N_COINS);\n  var d0 = computeD(leverage, tokenAPoolAmount, tokenBPoolAmount);\n\n  var _a = isA ? [tokenAPoolAmount, tokenBPoolAmount] : [tokenBPoolAmount, tokenAPoolAmount],\n      depositTokenAmount = _a[0],\n      otherTokenAmount = _a[1];\n\n  var updatedDepositTokenAmount = depositTokenAmount.add(inputAmount);\n  var d1 = computeD(leverage, updatedDepositTokenAmount, otherTokenAmount);\n  var diff = d1.sub(d0);\n  var finalAmount = new decimal_js_1.Decimal(diff.toString()).mul(poolTokenSupply.toString()).div(d0.toString());\n  return new spl_token_1.u64(finalAmount.floor().toString());\n}\n\nexports.computeSingleTokenDepositOutput = computeSingleTokenDepositOutput;","map":{"version":3,"sources":["../index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar spl_token_1 = require(\"@solana/spl-token\");\nvar decimal_js_1 = require(\"decimal.js\");\nvar cuberoots_1 = require(\"./cuberoots\");\nvar ZERO = new spl_token_1.u64(0);\nvar ONE = new spl_token_1.u64(1);\nvar TWO = new spl_token_1.u64(2);\nvar THREE = new spl_token_1.u64(3);\nvar FOUR = new spl_token_1.u64(4);\nvar EIGHT = new spl_token_1.u64(8);\nvar SIXTEEN = new spl_token_1.u64(16);\nvar N_COINS = TWO;\nvar N_COINS_SQUARED = new spl_token_1.u64(4);\nfunction calculateStep(initialD, leverage, sumX, dProduct) {\n    var leverageMul = leverage.mul(sumX);\n    var dPMul = dProduct.mul(N_COINS);\n    var leverageVal = leverageMul.add(dPMul).mul(initialD);\n    var leverageSub = initialD.mul(leverage.sub(ONE));\n    var nCoinsSum = dProduct.mul(N_COINS.add(ONE));\n    var rVal = leverageSub.add(nCoinsSum);\n    return leverageVal.div(rVal);\n}\nfunction computeD(leverage, amountA, amountB) {\n    var amountATimesN = amountA.mul(N_COINS).add(ONE);\n    var amountBTimesN = amountB.mul(N_COINS).add(ONE);\n    var sumX = amountA.add(amountB);\n    if (sumX.eq(ZERO)) {\n        return ZERO;\n    }\n    var dPrevious;\n    var d = sumX;\n    for (var i = 0; i < 32; i++) {\n        var dProduct = d;\n        dProduct = dProduct.mul(d).div(amountATimesN);\n        dProduct = dProduct.mul(d).div(amountBTimesN);\n        dPrevious = d;\n        d = calculateStep(d, leverage, sumX, dProduct);\n        if (d.eq(dPrevious)) {\n            break;\n        }\n    }\n    return d;\n}\nfunction _computeOutputAmount(leverage, newInputAmount, d) {\n    var c = d\n        .pow(N_COINS.add(ONE))\n        .div(newInputAmount.mul(N_COINS_SQUARED).mul(leverage));\n    var b = newInputAmount.add(d.div(leverage));\n    var yPrevious;\n    var y = d;\n    for (var i = 0; i < 32; i++) {\n        yPrevious = y;\n        y = y.sqr().add(c).div(y.mul(TWO).add(b).sub(d));\n        if (y.eq(yPrevious)) {\n            break;\n        }\n    }\n    return y;\n}\nfunction computeOutputAmount(inputAmount, inputPoolAmount, outputPoolAmount, amp) {\n    var leverage = amp.mul(N_COINS);\n    var newInputPoolAmount = inputAmount.add(inputPoolAmount);\n    var d = computeD(leverage, inputPoolAmount, outputPoolAmount);\n    var newOutputPoolAmount = _computeOutputAmount(leverage, newInputPoolAmount, d);\n    var outputAmount = outputPoolAmount.sub(newOutputPoolAmount);\n    return new spl_token_1.u64(outputAmount.toString());\n}\nexports.computeOutputAmount = computeOutputAmount;\nfunction computeInputAmount(outputAmount, inputPoolAmount, outputPoolAmount, amp) {\n    var leverage = amp.mul(N_COINS);\n    var newOutputPoolAmount = outputPoolAmount.sub(outputAmount);\n    var d = computeD(leverage, outputPoolAmount, inputPoolAmount);\n    var newInputPoolAmount = _computeOutputAmount(leverage, newOutputPoolAmount, d);\n    var inputAmount = newInputPoolAmount.sub(inputPoolAmount);\n    return new spl_token_1.u64(inputAmount.toString());\n}\nexports.computeInputAmount = computeInputAmount;\nfunction computeEqualInput(tokenAPoolAmount, tokenBPoolAmount, amp) {\n    var leverage = amp.mul(N_COINS);\n    var invariant = computeD(leverage, tokenAPoolAmount, tokenBPoolAmount);\n    var a = new decimal_js_1.Decimal(amp.mul(EIGHT).toString());\n    var b = new decimal_js_1.Decimal(invariant.sub(amp.mul(invariant).mul(FOUR)).toString());\n    var c = new decimal_js_1.Decimal(0);\n    var d = new decimal_js_1.Decimal(invariant.neg().pow(THREE).div(FOUR).toString());\n    var roots = cuberoots_1.getCubicRoots(a, b, c, d);\n    return new spl_token_1.u64(roots[0].real.round().toString());\n}\nexports.computeEqualInput = computeEqualInput;\nfunction computeBaseOutputAmount(inputAmount, inputPoolAmount, outputPoolAmount, amp) {\n    var leverage = amp.mul(N_COINS);\n    var invariant = computeD(leverage, inputPoolAmount, outputPoolAmount);\n    var a = amp.mul(SIXTEEN);\n    var b = a;\n    var c = invariant.mul(FOUR).sub(invariant.mul(amp).mul(SIXTEEN));\n    var numerator = TWO.mul(a)\n        .mul(inputPoolAmount)\n        .add(b.mul(outputPoolAmount))\n        .add(c)\n        .mul(outputPoolAmount);\n    var denominator = a\n        .mul(inputPoolAmount)\n        .add(TWO.mul(b).mul(outputPoolAmount).add(c))\n        .mul(inputPoolAmount);\n    return new spl_token_1.u64(inputAmount.mul(numerator).div(denominator).toString());\n}\nexports.computeBaseOutputAmount = computeBaseOutputAmount;\nfunction computeSingleTokenDepositOutput(inputAmount, isA, tokenAPoolAmount, tokenBPoolAmount, amp, poolTokenSupply) {\n    if (inputAmount.eq(ZERO)) {\n        return ZERO;\n    }\n    var leverage = amp.mul(N_COINS);\n    var d0 = computeD(leverage, tokenAPoolAmount, tokenBPoolAmount);\n    var _a = isA ?\n        [tokenAPoolAmount, tokenBPoolAmount] :\n        [tokenBPoolAmount, tokenAPoolAmount], depositTokenAmount = _a[0], otherTokenAmount = _a[1];\n    var updatedDepositTokenAmount = depositTokenAmount.add(inputAmount);\n    var d1 = computeD(leverage, updatedDepositTokenAmount, otherTokenAmount);\n    var diff = d1.sub(d0);\n    var finalAmount = new decimal_js_1.Decimal(diff.toString()).mul(poolTokenSupply.toString()).div(d0.toString());\n    return new spl_token_1.u64(finalAmount.floor().toString());\n}\nexports.computeSingleTokenDepositOutput = computeSingleTokenDepositOutput;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}